diff -r app/app-routing.module.ts app_bk/app-routing.module.ts
10,11c10,11
<   { path: '', redirectTo: 'auth_a', pathMatch: 'full' },
<   { path: '**', redirectTo: 'auth_a' },
---
>   { path: '', redirectTo: 'auth_u', pathMatch: 'full' },
>   { path: '**', redirectTo: 'auth_u' },
diff -r app/pages/_adamiya/adamiya.component.ts app_bk/pages/_adamiya/adamiya.component.ts
1,16c1,16
< import { Component } from '@angular/core';  // 导入angular核心模块
< 
< @Component({    // Component directive 声明组件属于 Component
<   selector: 'ngx-adamiya', // 定义组件在HTML代码中匹配的标签
<   template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
< })
< 
< export class AdamiyaComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
<   constructor() {
<     if (localStorage.getItem('cu_tsn') === 'master' || localStorage.getItem('cu_tsn') === 'sa') {
<     }else {
<       window.alert('对不起，您的角色不正确！请重新登录！');
<       window.location.href = '#/auth_a/_auth_login/auth_login_a';
<     }
<   }
< };
---
> import { Component } from '@angular/core';  // 导入angular核心模块
> 
> @Component({    // Component directive 声明组件属于 Component
>   selector: 'ngx-adamiya', // 定义组件在HTML代码中匹配的标签
>   template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
> })
> 
> export class AdamiyaComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
>   constructor() {
>     if (localStorage.getItem('cu_tsn') === 'master' || localStorage.getItem('cu_tsn') === 'sa') {
>     }else {
>       window.alert('对不起，您的角色不正确！请重新登录！');
>       window.location.href = '#/auth_a/_auth_login/auth_login_a';
>     }
>   }
> };
diff -r app/pages/_adamiya/adamiya_edit/adamiya_edit.component.ts app_bk/pages/_adamiya/adamiya_edit/adamiya_edit.component.ts
1,65c1,65
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {AdamiyaEditService} from './adamiya_edit.service'
< import {XUser} from '../../@xmodel/XUser';
< import {ActivatedRoute} from '@angular/router';
< 
< @Component({
<   selector: 'ngx-adamiya-adamiya-edit',
<   styleUrls: ['adamiya_edit.scss'],
<   templateUrl: 'adamiya_edit.html',
<   providers: [AdamiyaEditService],
< 
< })
< export class AdamiyaEditComponent implements OnInit {
<   private id: string;
<   private xusers: XUser;
<   public CurrentXUser: XUser;
<   public isshowdel: boolean;
<   constructor(private service: AdamiyaEditService, public route: ActivatedRoute) {
<     this.id = this.route.snapshot.params['id'];
<     this.isshowdel = true;
<     if (localStorage.getItem('cu_tsn') === 'sa') {
<       // 控制删除按钮可见
<       this.isshowdel = false;
<     }
<     this.getD();
<   }
< 
<   getD() {
<     this.service.getD(this.id).then(
<       res => {
<         this.xusers = res;
<         this.CurrentXUser = this.xusers[0];
<         if (this.CurrentXUser && this.CurrentXUser.sn !== '') {
<         }else {
<           window.alert('对不起，您查找的信息不存在！');
<         }
<       });
<   }
< 
<   ngOnInit() {
<   }
< 
<   goBack() {
<     window.location.href = '#/pages_a/_s_adamiya/all_adamiya_list';
<   }
< 
<   updateD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (this.CurrentXUser.label.trim() !== '') {
<       // this.service.updateD(this.CurrentXUser);
<       window.alert('已修改成功！')
<     }else {
<       window.alert('对不起，请输入正确的信息！')
<     }
<   }
< 
<   deleteD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(this.id);
<       this.goBack();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {AdamiyaEditService} from './adamiya_edit.service'
> import {XUser} from '../../@xmodel/XUser';
> import {ActivatedRoute} from '@angular/router';
> 
> @Component({
>   selector: 'ngx-adamiya-adamiya-edit',
>   styleUrls: ['adamiya_edit.scss'],
>   templateUrl: 'adamiya_edit.html',
>   providers: [AdamiyaEditService],
> 
> })
> export class AdamiyaEditComponent implements OnInit {
>   private id: string;
>   private xusers: XUser;
>   public CurrentXUser: XUser;
>   public isshowdel: boolean;
>   constructor(private service: AdamiyaEditService, public route: ActivatedRoute) {
>     this.id = this.route.snapshot.params['id'];
>     this.isshowdel = true;
>     if (localStorage.getItem('cu_tsn') === 'sa') {
>       // 控制删除按钮可见
>       this.isshowdel = false;
>     }
>     this.getD();
>   }
> 
>   getD() {
>     this.service.getD(this.id).then(
>       res => {
>         this.xusers = res;
>         this.CurrentXUser = this.xusers[0];
>         if (this.CurrentXUser && this.CurrentXUser.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       });
>   }
> 
>   ngOnInit() {
>   }
> 
>   goBack() {
>     window.location.href = '#/pages_a/_adamiya/all_adamiya_list';
>   }
> 
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentXUser.label.trim() !== '') {
>       // this.service.updateD(this.CurrentXUser);
>       window.alert('已修改成功！')
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> 
>   deleteD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(this.id);
>       this.goBack();
>     }
>   }
> }
diff -r app/pages/_adamiya/adamiya_edit/adamiya_edit.html app_bk/pages/_adamiya/adamiya_edit/adamiya_edit.html
1,42c1,42
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>管理员信息详细</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="login_name">账号</label>
<             <input type="text" readonly="readonly" class="form-control" id="login_name" name="login_name" [(ngModel)]="this.CurrentXUser.login_name">
<           </div>
<           <div class="form-group">
<             <label for="label">姓名</label>
<             <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentXUser.label">
<           </div>
<           <div class="form-group">
<             <label for="tel">电话</label>
<             <input type="text" class="form-control" id="tel" name="tel" [(ngModel)]="this.CurrentXUser.tel">
<           </div>
<           <div class="form-group">
<             <label for="email">Email</label>
<             <input type="email" class="form-control" id="email" name="email" [(ngModel)]="this.CurrentXUser.email">
<           </div>
<           <div class="form-group">
<             <label for="type_sn">类型</label>
<             <select class="form-control" id="type_sn" name="type_sn" [(ngModel)]="this.CurrentXUser.type_sn">
<             </select>
<           </div>
<           <button (click)="goBack()" class="btn btn-success">返回列表</button>
<           <button (click)="deleteD()" class="btn btn-danger" [disabled]="this.isshowdel" id="btnDel">标记删除</button>
<           <button (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>管理员信息详细</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="login_name">账号</label>
>             <input type="text" readonly="readonly" class="form-control" id="login_name" name="login_name" [(ngModel)]="this.CurrentXUser.login_name">
>           </div>
>           <div class="form-group">
>             <label for="label">姓名</label>
>             <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentXUser.label">
>           </div>
>           <div class="form-group">
>             <label for="tel">电话</label>
>             <input type="text" class="form-control" id="tel" name="tel" [(ngModel)]="this.CurrentXUser.tel">
>           </div>
>           <div class="form-group">
>             <label for="email">Email</label>
>             <input type="email" class="form-control" id="email" name="email" [(ngModel)]="this.CurrentXUser.email">
>           </div>
>           <div class="form-group">
>             <label for="type_sn">类型</label>
>             <select class="form-control" id="type_sn" name="type_sn" [(ngModel)]="this.CurrentXUser.type_sn">
>             </select>
>           </div>
>           <button (click)="goBack()" class="btn btn-success">返回列表</button>
>           <button (click)="deleteD()" class="btn btn-danger" [disabled]="this.isshowdel" id="btnDel">标记删除</button>
>           <button (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
> 
diff -r app/pages/_adamiya/adamiya_edit/adamiya_edit.scss app_bk/pages/_adamiya/adamiya_edit/adamiya_edit.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/adamiya_edit/adamiya_edit.service.ts app_bk/pages/_adamiya/adamiya_edit/adamiya_edit.service.ts
1,45c1,45
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import { XUser } from '../../@xmodel/XUser';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsUE = new URLSearchParams();
< 
< @Injectable()
< export class AdamiyaEditService {
<   constructor(private http: Http) {
<   };
< 
<   getD(id): Promise<XUser> {
<     paramsUE.set('id', id);
<     const url = '/_s_share/get_user_detail';
<     return this.http.post(url, paramsUE, options).toPromise().then(
<       res => res.json() as XUser).catch(this.handleError);
<   }
< 
<   private handleError(error: any): Promise<any> {
<     window.alert('An error occurred' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   updateD(xdata) {
<     const url = '/_s_share/edit_user_detail';
<     this.http.post(url, xdata, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(id) {
<     paramsUE.set('id', id);
<     paramsUE.set('en', 'user_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsUE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XUser } from '../../@xmodel/XUser';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsUE = new URLSearchParams();
> 
> @Injectable()
> export class AdamiyaEditService {
>   constructor(private http: Http) {
>   };
> 
>   getD(id): Promise<XUser> {
>     paramsUE.set('id', id);
>     const url = '/_share/get_user_detail';
>     return this.http.post(url, paramsUE, options).toPromise().then(
>       res => res.json() as XUser).catch(this.handleError);
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('An error occurred' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   updateD(xdata) {
>     const url = '/_share/edit_user_detail';
>     this.http.post(url, xdata, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(id) {
>     paramsUE.set('id', id);
>     paramsUE.set('en', 'user_info');
>     this.http.post('/_share/delete_to_recycle', paramsUE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_adamiya/adamiya_edit/index.ts app_bk/pages/_adamiya/adamiya_edit/index.ts
1c1
< export * from './adamiya_edit.component';
---
> export * from './adamiya_edit.component';
diff -r app/pages/_adamiya/adamiya.module.ts app_bk/pages/_adamiya/adamiya.module.ts
1,120c1,83
< import { CommonModule } from '@angular/common';
< import { NgModule } from '@angular/core';
< import { Ng2SmartTableModule } from 'ng2-smart-table';
< import { ThemeModule } from '../../@theme/theme.module';
< import { CKEditorModule } from 'ng2-ckeditor';
< import { NgxEchartsModule } from 'ngx-echarts';
< 
< import { AdamiyaComponent } from './adamiya.component'; // 导入刚才新建的模块
< 
< import { DataImportComponent } from './data_import';
< import { DataImportService } from './data_import/data_import.service';
< 
< import { AllEnterpriseListComponent } from './all_enterprise_list';
< import { AllEnterpriseListService } from './all_enterprise_list/all_enterprise_list.service';
< 
< import { AllFavorListComponent } from './all_favor_list';
< import { AllFavorListService } from './all_favor_list/all_favor_list.service';
< 
< import { AllProjectListComponent } from '../_adamiya/all_project_list';
< import { AllProjectListService } from '../_adamiya/all_project_list/all_project_list.service';
< 
< import { AllProductListComponent } from '../_adamiya/all_product_list';
< import { AllProductListService } from '../_adamiya/all_product_list/all_product_list.service';
< 
< import { AllUserListComponent } from './all_user_list';
< import { AllUserListService } from './all_user_list/all_user_list.service';
< 
< import { AllIndustryListComponent } from './all_industry_list';
< import { AllIndustryListService } from './all_industry_list/all_industry_list.service';
< 
< import { AllSceneListComponent } from './all_scene_list';
< import { AllSceneListService } from './all_scene_list/all_scene_list.service';
< 
< import { AllAdamiyaListComponent } from './all_adamiya_list';
< import { AllAdamiyaListService } from './all_adamiya_list/all_adamiya_list.service';
< 
< import { AdamiyaEditComponent } from './adamiya_edit';
< import { AdamiyaEditService } from './adamiya_edit/adamiya_edit.service';
< 
< import { KVListComponent } from './kv_list';
< import { KVListService } from './kv_list/kv_list.service';
< 
< import {STAByEnterpriseComponent} from './sta_by_enterprise';
< import {STAByEnterpriseService} from './sta_by_enterprise/sta_by_enterprise.service';
< 
< import {STAByProductComponent} from './sta_by_product';
< import {STAByProductService} from './sta_by_product/sta_by_product.service';
< 
< import { EchartsPieIndustryEnterpriseComponent } from './sta_by_enterprise/echarts-pie-industry-enterprise.component';
< import { EchartsPieSceneEnterpriseComponent } from './sta_by_enterprise/echarts-pie-scene-enterprise.component';
< import { EchartsAreaStackEnterpriseComponent } from './sta_by_enterprise/echarts-area-stack-enterprise.component';
< 
< import { EchartsPieIndustryProductComponent } from './sta_by_product/echarts-pie-industry-product.component';
< import { EchartsPieSceneProductComponent } from './sta_by_product/echarts-pie-scene-product.component';
< import { EchartsAreaStackProductComponent } from './sta_by_product/echarts-area-stack-product.component';
< 
< import { EchartsLineComponent } from './sta_by_enterprise/echarts-line.component';
< import { EchartsBarComponent } from './sta_by_enterprise/echarts-bar.component';
< import { EchartsMultipleXaxisComponent } from './sta_by_enterprise/echarts-multiple-xaxis.component';
< import { EchartsBarAnimationComponent } from './sta_by_enterprise/echarts-bar-animation.component';
< import { EchartsRadarComponent } from './sta_by_enterprise/echarts-radar.component';
< 
< import { RoutingAdamiya } from './adamiya.routing'; // 导入路由文件
< 
< export class AppModule { }
< 
< @NgModule({
<     imports: [
<       CommonModule,
<       RoutingAdamiya,
<       Ng2SmartTableModule,
<       ThemeModule,
<       NgxEchartsModule,
<       CKEditorModule,
<     ],
<     declarations: [
<       AdamiyaComponent,
<       DataImportComponent,
<       AllEnterpriseListComponent,
<       AllFavorListComponent,
<       AllProjectListComponent,
<       AllProductListComponent,
<       AllUserListComponent,
<       AllIndustryListComponent,
<       AllSceneListComponent,
<       AllAdamiyaListComponent,
<       AdamiyaEditComponent,
<       KVListComponent,
<       STAByEnterpriseComponent,
<       STAByProductComponent,
<       EchartsPieSceneEnterpriseComponent,
<       EchartsPieIndustryEnterpriseComponent,
<       EchartsPieSceneProductComponent,
<       EchartsPieIndustryProductComponent,
<       EchartsAreaStackEnterpriseComponent,
<       EchartsAreaStackProductComponent,
<       EchartsLineComponent,
<       EchartsBarComponent,
<       EchartsMultipleXaxisComponent,
<       EchartsBarAnimationComponent,
<       EchartsRadarComponent,
<     ],
<     providers: [
<       AllEnterpriseListService,
<       DataImportService,
<       AllFavorListService,
<       AllProjectListService,
<       AllProductListService,
<       AllUserListService,
<       AllIndustryListService,
<       AllSceneListService,
<       AllAdamiyaListService,
<       AdamiyaEditService,
<       KVListService,
<       STAByEnterpriseService,
<       STAByProductService,
<     ],
< })
< 
< export class AdamiyaModule {}
---
> import { CommonModule } from '@angular/common';
> import { NgModule } from '@angular/core';
> import { Ng2SmartTableModule } from 'ng2-smart-table';
> import { ThemeModule } from '../../@theme/theme.module';
> import { CKEditorModule } from 'ng2-ckeditor';
> 
> import { AdamiyaComponent } from './adamiya.component'; // 导入刚才新建的模块
> 
> import { DataImportComponent } from './data_import';
> import { DataImportService } from './data_import/data_import.service';
> 
> import { AllEnterpriseListComponent } from './all_enterprise_list';
> import { AllEnterpriseListService } from './all_enterprise_list/all_enterprise_list.service';
> 
> import { AllFavorListComponent } from './all_favor_list';
> import { AllFavorListService } from './all_favor_list/all_favor_list.service';
> 
> import { AllProjectListComponent } from '../_adamiya/all_project_list';
> import { AllProjectListService } from '../_adamiya/all_project_list/all_project_list.service';
> 
> import { AllProductListComponent } from '../_adamiya/all_product_list';
> import { AllProductListService } from '../_adamiya/all_product_list/all_product_list.service';
> 
> import { AllUserListComponent } from './all_user_list';
> import { AllUserListService } from './all_user_list/all_user_list.service';
> 
> import { AllIndustryListComponent } from './all_industry_list';
> import { AllIndustryListService } from './all_industry_list/all_industry_list.service';
> 
> import { AllSceneListComponent } from './all_scene_list';
> import { AllSceneListService } from './all_scene_list/all_scene_list.service';
> 
> import { AllAdamiyaListComponent } from './all_adamiya_list';
> import { AllAdamiyaListService } from './all_adamiya_list/all_adamiya_list.service';
> 
> import { AdamiyaEditComponent } from './adamiya_edit';
> import { AdamiyaEditService } from './adamiya_edit/adamiya_edit.service';
> 
> import { KVListComponent } from './kv_list';
> import { KVListService } from './kv_list/kv_list.service';
> 
> import { RoutingAdamiya } from './adamiya.routing'; // 导入路由文件
> 
> export class AppModule { }
> 
> @NgModule({
>     imports: [
>       CommonModule,
>       RoutingAdamiya,
>       Ng2SmartTableModule,
>       ThemeModule,
>       CKEditorModule,
>     ],
>     declarations: [
>       AdamiyaComponent,
>       DataImportComponent,
>       AllEnterpriseListComponent,
>       AllFavorListComponent,
>       AllProjectListComponent,
>       AllProductListComponent,
>       AllUserListComponent,
>       AllIndustryListComponent,
>       AllSceneListComponent,
>       AllAdamiyaListComponent,
>       AdamiyaEditComponent,
>       KVListComponent,
>     ],
>     providers: [
>       AllEnterpriseListService,
>       DataImportService,
>       AllFavorListService,
>       AllProjectListService,
>       AllProductListService,
>       AllUserListService,
>       AllIndustryListService,
>       AllSceneListService,
>       AllAdamiyaListService,
>       AdamiyaEditService,
>       KVListService,
>     ],
> })
> 
> export class AdamiyaModule {}
diff -r app/pages/_adamiya/adamiya.routing.ts app_bk/pages/_adamiya/adamiya.routing.ts
1,79c1,69
< import { Routes, RouterModule } from '@angular/router';
< 
< import { AdamiyaComponent } from './adamiya.component'; // 导入刚才新建的模块
< 
< import { AllEnterpriseListComponent } from './all_enterprise_list'
< import { AllFavorListComponent } from './all_favor_list'
< import { AllProjectListComponent } from './all_project_list'
< import { AllProductListComponent } from './all_product_list'
< import { AllUserListComponent } from './all_user_list'
< import { AllIndustryListComponent } from './all_industry_list'
< import { AllSceneListComponent } from './all_scene_list'
< import { AllAdamiyaListComponent } from './all_adamiya_list'
< import { AdamiyaEditComponent } from './adamiya_edit'
< import { DataImportComponent } from './data_import'
< import { KVListComponent } from './kv_list'
< import { STAByEnterpriseComponent } from './sta_by_enterprise'
< import { STAByProductComponent } from './sta_by_product'
< 
< const routes: Routes = [
<     {
<         path: '',
<         component: AdamiyaComponent,
<         children: [
<           {
<             path: 'all_enterprise_list',
<             component: AllEnterpriseListComponent,
<           },
<           {
<             path: 'all_favor_list',
<             component: AllFavorListComponent,
<           },
<           {
<             path: 'all_project_list',
<             component: AllProjectListComponent,
<           },
<           {
<             path: 'all_product_list',
<             component: AllProductListComponent,
<           },
<           {
<             path: 'all_user_list',
<             component: AllUserListComponent,
<           },
<           {
<             path: 'all_industry_list',
<             component: AllIndustryListComponent,
<           },
<           {
<             path: 'all_scene_list',
<             component: AllSceneListComponent,
<           },
<           {
<             path: 'all_adamiya_list',
<             component: AllAdamiyaListComponent,
<           },
<           {
<             path: 'data_import',
<             component: DataImportComponent,
<           },
<           {
<             path: 'adamiya_edit/:sn',
<             component: AdamiyaEditComponent,
<           },
<           {
<             path: 'kv_list/:en',
<             component: KVListComponent,
<           },
<           {
<             path: 'sta_by_enterprise',
<             component: STAByEnterpriseComponent,
<           },
<           {
<             path: 'sta_by_product',
<             component: STAByProductComponent,
<           },
<         ],
<     },
< ];
< export const RoutingAdamiya = RouterModule.forChild(routes);
---
> import { Routes, RouterModule } from '@angular/router';
> 
> import { AdamiyaComponent } from './adamiya.component'; // 导入刚才新建的模块
> 
> import { AllEnterpriseListComponent } from './all_enterprise_list'
> import { AllFavorListComponent } from './all_favor_list'
> import { AllProjectListComponent } from './all_project_list'
> import { AllProductListComponent } from './all_product_list'
> import { AllUserListComponent } from './all_user_list'
> import { AllIndustryListComponent } from './all_industry_list'
> import { AllSceneListComponent } from './all_scene_list'
> import { AllAdamiyaListComponent } from './all_adamiya_list'
> import { AdamiyaEditComponent } from './adamiya_edit'
> import { DataImportComponent } from './data_import'
> import { KVListComponent } from './kv_list'
> 
> const routes: Routes = [
>     {
>         path: '',
>         component: AdamiyaComponent,
>         children: [
>           {
>             path: 'all_enterprise_list',
>             component: AllEnterpriseListComponent,
>           },
>           {
>             path: 'all_favor_list',
>             component: AllFavorListComponent,
>           },
>           {
>             path: 'all_project_list',
>             component: AllProjectListComponent,
>           },
>           {
>             path: 'all_product_list',
>             component: AllProductListComponent,
>           },
>           {
>             path: 'all_user_list',
>             component: AllUserListComponent,
>           },
>           {
>             path: 'all_industry_list',
>             component: AllIndustryListComponent,
>           },
>           {
>             path: 'all_scene_list',
>             component: AllSceneListComponent,
>           },
>           {
>             path: 'all_adamiya_list',
>             component: AllAdamiyaListComponent,
>           },
>           {
>             path: 'data_import',
>             component: DataImportComponent,
>           },
>           {
>             path: 'adamiya_edit/:sn',
>             component: AdamiyaEditComponent,
>           },
>           {
>             path: 'kv_list/:en',
>             component: KVListComponent,
>           },
>         ],
>     },
> ];
> export const RoutingAdamiya = RouterModule.forChild(routes);
diff -r app/pages/_adamiya/all_adamiya_list/all_adamiya_list.component.ts app_bk/pages/_adamiya/all_adamiya_list/all_adamiya_list.component.ts
1,106c1,106
< import {Component, OnInit} from '@angular/core';
< import {AllAdamiyaListService} from './all_adamiya_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-adamiya-all-adamiya-list',
<   templateUrl: './all_adamiya_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllAdamiyaListComponent implements OnInit {
< 
<   settings = {
<     actions: {
<       delete: false,
<     },
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<         editable: false,
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_adamiya/adamiya_edit/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         editable: false,
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: AllAdamiyaListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllAdamiyaListService} from './all_adamiya_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-adamiya-all-adamiya-list',
>   templateUrl: './all_adamiya_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllAdamiyaListComponent implements OnInit {
> 
>   settings = {
>     actions: {
>       delete: false,
>     },
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>         editable: false,
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_a/_adamiya/adamiya_edit/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         editable: false,
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: AllAdamiyaListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> }
diff -r app/pages/_adamiya/all_adamiya_list/all_adamiya_list.html app_bk/pages/_adamiya/all_adamiya_list/all_adamiya_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     管理员列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     管理员列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_adamiya_list/all_adamiya_list.scss app_bk/pages/_adamiya/all_adamiya_list/all_adamiya_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_adamiya_list/all_adamiya_list.service.ts app_bk/pages/_adamiya/all_adamiya_list/all_adamiya_list.service.ts
1,46c1,46
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options1 = new RequestOptions({ headers: headers });
< const paramsC1 = new URLSearchParams();
< const paramsE1 = new URLSearchParams();
< const paramsD1 = new URLSearchParams();
< 
< @Injectable()
< export class AllAdamiyaListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_adamiya/get_adamiya_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC1.set('label', newData['label']);
<     paramsC1.set('position', newData['position']);
<     paramsC1.set('mobile', newData['mobile']);
<     paramsC1.set('email', newData['email']);
<     paramsC1.set('tel', newData['tel']);
<     this.http.post('/_s_adamiya/create_adamiya_list', paramsC1, options1).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE1.set('label', newData['label']);
<     paramsE1.set('position', newData['position']);
<     paramsE1.set('mobile', newData['mobile']);
<     paramsE1.set('email', newData['email']);
<     paramsE1.set('tel', newData['tel']);
<     paramsE1.set('id', newData['id']);
<     this.http.post('/_s_adamiya/edit_adamiya_list', paramsE1, options1).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options1 = new RequestOptions({ headers: headers });
> const paramsC1 = new URLSearchParams();
> const paramsE1 = new URLSearchParams();
> const paramsD1 = new URLSearchParams();
> 
> @Injectable()
> export class AllAdamiyaListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_adamiya/get_adamiya_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC1.set('label', newData['label']);
>     paramsC1.set('position', newData['position']);
>     paramsC1.set('mobile', newData['mobile']);
>     paramsC1.set('email', newData['email']);
>     paramsC1.set('tel', newData['tel']);
>     this.http.post('/_adamiya/create_adamiya_list', paramsC1, options1).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE1.set('label', newData['label']);
>     paramsE1.set('position', newData['position']);
>     paramsE1.set('mobile', newData['mobile']);
>     paramsE1.set('email', newData['email']);
>     paramsE1.set('tel', newData['tel']);
>     paramsE1.set('id', newData['id']);
>     this.http.post('/_adamiya/edit_adamiya_list', paramsE1, options1).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_adamiya/all_adamiya_list/index.ts app_bk/pages/_adamiya/all_adamiya_list/index.ts
1c1
< export * from './all_adamiya_list.component';
---
> export * from './all_adamiya_list.component';
diff -r app/pages/_adamiya/all_enterprise_list/all_enterprise_list.component.ts app_bk/pages/_adamiya/all_enterprise_list/all_enterprise_list.component.ts
1,140c1,153
< import {Component, OnInit} from '@angular/core';
< import {AllEnterpriseListService} from './all_enterprise_list.service';
< import {XEnterprise} from '../../@xmodel/XEnterprise';
< 
< @Component({
<   selector: 'ngx-adamiya-all-enterprise-list',
<   templateUrl: './all_enterprise_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllEnterpriseListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<         editable: false,
<         filter: {
<           type: 'list',
<           config: {
<             selectText: '全部...',
<             list: [
<               { value: '默认内置', title: '默认内置' },
<               { value: '已上市', title: '已上市' },
<               { value: '未计划上市', title: '未计划上市' },
<               { value: '预备上市', title: '预备上市' },
<             ],
<           },
<         },
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<         filter: {
<           type: 'list',
<           config: {
<             selectText: '全部...',
<             list: [
<               { value: '默认内置', title: '默认内置' },
<             ],
<           },
<         },
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_nda: {
<         title: 'NDA签证',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_share/enterprise_edit/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<         editable: false,
<       },
<     },
<   };
< 
<   xs: XEnterprise[];
< 
<   constructor(private service: AllEnterpriseListService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<       res => {
<         this.xs = res;
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllEnterpriseListService} from './all_enterprise_list.service';
> import {XEnterprise} from '../../@xmodel/XEnterprise';
> 
> @Component({
>   selector: 'ngx-adamiya-all-enterprise-list',
>   templateUrl: './all_enterprise_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllEnterpriseListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>         editable: false,
>         filter: {
>           type: 'list',
>           config: {
>             selectText: '全部...',
>             list: [
>               { value: '默认内置', title: '默认内置' },
>               { value: '已上市', title: '已上市' },
>               { value: '未计划上市', title: '未计划上市' },
>               { value: '预备上市', title: '预备上市' },
>             ],
>           },
>         },
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>         filter: {
>           type: 'list',
>           config: {
>             selectText: '全部...',
>             list: [
>               { value: '默认内置', title: '默认内置' },
>             ],
>           },
>         },
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_nda: {
>         title: 'NDA签署',
>         type: 'string',
>         editable: false,
>         filter: {
>           type: 'list',
>           config: {
>             selectText: '全部...',
>             list: [
>               { value: '', title: '默认内置' },
>               { value: '是', title: '是' },
>               { value: '否', title: '否' },
> 
>             ],
>           },
>         },
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_a/_share/enterprise_edit/' +
>             row.sn +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>         editable: false,
>       },
>     },
>   };
> 
>   xs: XEnterprise[];
> 
>   constructor(private service: AllEnterpriseListService) {
>   }
> 
>   ngOnInit() {
>     this.service.getD().then(
>       res => {
>         this.xs = res;
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_enterprise_list/all_enterprise_list.html app_bk/pages/_adamiya/all_enterprise_list/all_enterprise_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     企业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     企业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_enterprise_list/all_enterprise_list.scss app_bk/pages/_adamiya/all_enterprise_list/all_enterprise_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_enterprise_list/all_enterprise_list.service.ts app_bk/pages/_adamiya/all_enterprise_list/all_enterprise_list.service.ts
1,112c1,112
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class AllEnterpriseListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XEnterprise[]> {
<     // return this.http.get('/_s_adamiya/get_enterprise_list').map((res) => res.json());
<     const url = '/_s_share/get_enterprise_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XEnterprise {
<     const x = new XEnterprise();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.basic_nda = data['basic_nda'];
<     x.basic_reg_capital = data['basic_reg_capital'];
<     x.level_label = data['level_label'];
<     x.type_label = data['type_label'];
<     x.basic_cn_uid = data['basic_cn_uid'];
<     const basic_setup_dt = new Date(data['basic_setup_dt']);
<     x.basic_setup_dt = basic_setup_dt.getFullYear() + '/'
<       + (basic_setup_dt.getMonth() + 1) + '/' + basic_setup_dt.getDate();
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData) {
<     const url = '/_s_share/create_enterprise_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('basic_nda', newData['basic_nda'])
<       .set('basic_reg_capital', newData['basic_reg_capital'])
<       .set('basic_setup_dt', newData['basic_setup_dt'])
<       .set('basic_cn_uid', newData['basic_cn_uid']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData) {
<     const url = '/_s_share/edit_enterprise_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('basic_nda', newData['basic_nda'])
<       .set('basic_reg_capital', newData['basic_reg_capital'])
<       .set('basic_setup_dt', newData['basic_setup_dt'])
<       .set('basic_cn_uid', newData['basic_cn_uid'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData) {
<     const url = '/_s_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'enterprise_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class AllEnterpriseListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XEnterprise[]> {
>     // return this.http.get('/_adamiya/get_enterprise_list').map((res) => res.json());
>     const url = '/_share/get_enterprise_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XEnterprise {
>     const x = new XEnterprise();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.basic_nda = data['basic_nda'];
>     x.basic_reg_capital = data['basic_reg_capital'];
>     x.level_label = data['level_label'];
>     x.type_label = data['type_label'];
>     x.basic_cn_uid = data['basic_cn_uid'];
>     const basic_setup_dt = new Date(data['basic_setup_dt']);
>     x.basic_setup_dt = basic_setup_dt.getFullYear() + '/'
>       + (basic_setup_dt.getMonth() + 1) + '/' + basic_setup_dt.getDate();
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData) {
>     const url = '/_share/create_enterprise_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('basic_nda', newData['basic_nda'])
>       .set('basic_reg_capital', newData['basic_reg_capital'])
>       .set('basic_setup_dt', newData['basic_setup_dt'])
>       .set('basic_cn_uid', newData['basic_cn_uid']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData) {
>     const url = '/_share/edit_enterprise_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('basic_nda', newData['basic_nda'])
>       .set('basic_reg_capital', newData['basic_reg_capital'])
>       .set('basic_setup_dt', newData['basic_setup_dt'])
>       .set('basic_cn_uid', newData['basic_cn_uid'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', 'enterprise_info');
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/all_enterprise_list/index.ts app_bk/pages/_adamiya/all_enterprise_list/index.ts
1c1
< export * from './all_enterprise_list.component';
---
> export * from './all_enterprise_list.component';
diff -r app/pages/_adamiya/all_favor_list/all_favor_list.component.ts app_bk/pages/_adamiya/all_favor_list/all_favor_list.component.ts
1,85c1,85
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {AllFavorListService} from './all_favor_list.service';
< 
< @Component({
<   selector: 'ngx-adamiya-all-favor-list',
<   templateUrl: './all_favor_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllFavorListComponent implements OnInit {
< 
<   settings = {
<     actions: {
<       add: false,
<       edit: false,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_sn: {
<         title: '类型',
<         type: 'string',
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: AllFavorListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {AllFavorListService} from './all_favor_list.service';
> 
> @Component({
>   selector: 'ngx-adamiya-all-favor-list',
>   templateUrl: './all_favor_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllFavorListComponent implements OnInit {
> 
>   settings = {
>     actions: {
>       add: false,
>       edit: false,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_sn: {
>         title: '类型',
>         type: 'string',
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: AllFavorListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_favor_list/all_favor_list.html app_bk/pages/_adamiya/all_favor_list/all_favor_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     收藏夹
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     收藏夹
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_favor_list/all_favor_list.scss app_bk/pages/_adamiya/all_favor_list/all_favor_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_favor_list/all_favor_list.service.ts app_bk/pages/_adamiya/all_favor_list/all_favor_list.service.ts
1,30c1,30
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class AllFavorListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_adamiya/get_favor_list').map((res) => res.json());
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'favor_info');
<     this.http.post('/_s_adamiya/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class AllFavorListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_adamiya/get_favor_list').map((res) => res.json());
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'favor_info');
>     this.http.post('/_adamiya/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_adamiya/all_favor_list/index.ts app_bk/pages/_adamiya/all_favor_list/index.ts
1c1
< export * from './all_favor_list.component';
---
> export * from './all_favor_list.component';
diff -r app/pages/_adamiya/all_industry_list/all_industry_list.component.ts app_bk/pages/_adamiya/all_industry_list/all_industry_list.component.ts
1,94c1,94
< import {Component, OnInit} from '@angular/core';
< import {AllIndustryListService} from './all_industry_list.service';
< import {XIndustry} from '../../@xmodel/XIndustry';
< 
< @Component({
<   selector: 'ngx-adamiya-all-industry-list',
<   templateUrl: './all_industry_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllIndustryListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '名称',
<         type: 'string',
<       },
<       custom_code: {
<         title: '自定义编码',
<         type: 'string',
<       },
<       display_code: {
<         title: '排序号',
<         type: 'number',
<       },
<       seo_tag: {
<         title: '检索标签',
<         type: 'string',
<       },
<     },
<   };
< 
<   xs: XIndustry[];
< 
<   constructor(private service: AllIndustryListService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<     res => {
<     this.xs = res;
<     }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllIndustryListService} from './all_industry_list.service';
> import {XIndustry} from '../../@xmodel/XIndustry';
> 
> @Component({
>   selector: 'ngx-adamiya-all-industry-list',
>   templateUrl: './all_industry_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllIndustryListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '名称',
>         type: 'string',
>       },
>       custom_code: {
>         title: '自定义编码',
>         type: 'string',
>       },
>       display_code: {
>         title: '排序号',
>         type: 'number',
>       },
>       seo_tag: {
>         title: '检索标签',
>         type: 'string',
>       },
>     },
>   };
> 
>   xs: XIndustry[];
> 
>   constructor(private service: AllIndustryListService) {
>   }
> 
>   ngOnInit() {
>     this.service.getD().then(
>     res => {
>     this.xs = res;
>     }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_industry_list/all_industry_list.html app_bk/pages/_adamiya/all_industry_list/all_industry_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     行业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     行业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_industry_list/all_industry_list.scss app_bk/pages/_adamiya/all_industry_list/all_industry_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_industry_list/all_industry_list.service.ts app_bk/pages/_adamiya/all_industry_list/all_industry_list.service.ts
1,105c1,105
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XIndustry } from '../../@xmodel/XIndustry';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class AllIndustryListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XIndustry[]> {
<     // return this.http.get('/_s_adamiya/get_industry_list').map((res) => res.json());
<     const url = '/_s_adamiya/get_industry_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XIndustry {
<     const x = new XIndustry();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.custom_code = data['custom_code'];
<     x.display_code = data['display_code'];
<     x.seo_tag = data['seo_tag'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData) {
<     const url = '/_s_adamiya/create_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData) {
<     const url = '/_s_adamiya/edit_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData) {
<     const url = '/_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'industry_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XIndustry } from '../../@xmodel/XIndustry';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class AllIndustryListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XIndustry[]> {
>     // return this.http.get('/_adamiya/get_industry_list').map((res) => res.json());
>     const url = '/_adamiya/get_industry_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XIndustry {
>     const x = new XIndustry();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.custom_code = data['custom_code'];
>     x.display_code = data['display_code'];
>     x.seo_tag = data['seo_tag'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData) {
>     const url = '/_adamiya/create_industry_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData) {
>     const url = '/_adamiya/edit_industry_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', 'industry_info');
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/all_industry_list/index.ts app_bk/pages/_adamiya/all_industry_list/index.ts
1c1
< export * from './all_industry_list.component';
---
> export * from './all_industry_list.component';
diff -r app/pages/_adamiya/all_product_list/all_product_list.component.ts app_bk/pages/_adamiya/all_product_list/all_product_list.component.ts
1,109c1,109
< import {Component, OnInit} from '@angular/core';
< import {AllProductListService} from './all_product_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-adamiya-all-product-list',
<   templateUrl: './all_product_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllProductListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmEdit: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '产品名称',
<         type: 'string',
<       },
<       sku: {
<         title: 'SKU',
<         type: 'string',
<       },
<       moq: {
<         title: 'MOQ',
<         type: 'number',
<       },
<       moq_unit: {
<         title: '单位',
<         type: 'string',
<       },
<       price_sale: {
<         title: '零售价（元）',
<         type: 'number',
<       },
<       price_out: {
<         title: '出货价（元）',
<         type: 'number',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_share/product_edit/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: AllProductListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.newData);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllProductListService} from './all_product_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-adamiya-all-product-list',
>   templateUrl: './all_product_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllProductListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmEdit: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '产品名称',
>         type: 'string',
>       },
>       sku: {
>         title: 'SKU',
>         type: 'string',
>       },
>       moq: {
>         title: 'MOQ',
>         type: 'number',
>       },
>       moq_unit: {
>         title: '单位',
>         type: 'string',
>       },
>       price_sale: {
>         title: '零售价（元）',
>         type: 'number',
>       },
>       price_out: {
>         title: '出货价（元）',
>         type: 'number',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_a/_share/product_edit/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: AllProductListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.newData);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_product_list/all_product_list.html app_bk/pages/_adamiya/all_product_list/all_product_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     产品列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     产品列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_product_list/all_product_list.scss app_bk/pages/_adamiya/all_product_list/all_product_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_product_list/all_product_list.service.ts app_bk/pages/_adamiya/all_product_list/all_product_list.service.ts
1,53c1,53
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const params = new URLSearchParams();
< 
< @Injectable()
< export class AllProductListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_product_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     params.set('label', newData['label']);
<     params.set('position', newData['position']);
<     params.set('mobile', newData['mobile']);
<     params.set('email', newData['email']);
<     params.set('tel', newData['tel']);
<     this.http.post('/_s_share/create_product_list', params, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     params.set('label', newData['label']);
<     params.set('position', newData['position']);
<     params.set('mobile', newData['mobile']);
<     params.set('email', newData['email']);
<     params.set('tel', newData['tel']);
<     params.set('id', newData['id']);
<     this.http.post('/_s_share/edit_product_list', params, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     params.set('id', newData['id']);
<     params.set('en', 'product_info');
<     this.http.post('/_s_share/delete_to_recycle', params, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const params = new URLSearchParams();
> 
> @Injectable()
> export class AllProductListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_product_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     params.set('label', newData['label']);
>     params.set('position', newData['position']);
>     params.set('mobile', newData['mobile']);
>     params.set('email', newData['email']);
>     params.set('tel', newData['tel']);
>     this.http.post('/_share/create_product_list', params, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     params.set('label', newData['label']);
>     params.set('position', newData['position']);
>     params.set('mobile', newData['mobile']);
>     params.set('email', newData['email']);
>     params.set('tel', newData['tel']);
>     params.set('id', newData['id']);
>     this.http.post('/_share/edit_product_list', params, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     params.set('id', newData['id']);
>     params.set('en', 'product_info');
>     this.http.post('/_share/delete_to_recycle', params, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_adamiya/all_product_list/index.ts app_bk/pages/_adamiya/all_product_list/index.ts
1c1
< export * from './all_product_list.component';
---
> export * from './all_product_list.component';
diff -r app/pages/_adamiya/all_project_list/all_project_list.component.ts app_bk/pages/_adamiya/all_project_list/all_project_list.component.ts
1,117c1,117
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {AllProjectListService} from './all_project_list.service';
< 
< @Component({
<   selector: 'ngx-adamiya-all-project-list',
<   templateUrl: './all_project_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllProjectListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '项目名称',
<         type: 'string',
<       },
<       custom_code: {
<         title: '自定义编码',
<         type: 'string',
<       },
<       create_dt: {
<         editable: false,
<         title: '创建时间',
<         type: 'string',
<       },
<       type_label: {
<         editable: false,
<         title: '类型',
<         type: 'string',
<       },
<       status_label: {
<         editable: false,
<         title: '状态',
<         type: 'string',
<       },
<       total_budget: {
<         title: '总预算',
<         type: 'number',
<       },
<       lenovo_user_label: {
<         editable: false,
<         title: '对接人',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/project_edit/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: AllProjectListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {AllProjectListService} from './all_project_list.service';
> 
> @Component({
>   selector: 'ngx-adamiya-all-project-list',
>   templateUrl: './all_project_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllProjectListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '项目名称',
>         type: 'string',
>       },
>       custom_code: {
>         title: '自定义编码',
>         type: 'string',
>       },
>       create_dt: {
>         editable: false,
>         title: '创建时间',
>         type: 'string',
>       },
>       type_label: {
>         editable: false,
>         title: '类型',
>         type: 'string',
>       },
>       status_label: {
>         editable: false,
>         title: '状态',
>         type: 'string',
>       },
>       total_budget: {
>         title: '总预算',
>         type: 'number',
>       },
>       lenovo_user_label: {
>         editable: false,
>         title: '对接人',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/project_edit/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: AllProjectListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_project_list/all_project_list.html app_bk/pages/_adamiya/all_project_list/all_project_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     项目列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     项目列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_project_list/all_project_list.scss app_bk/pages/_adamiya/all_project_list/all_project_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_project_list/all_project_list.service.ts app_bk/pages/_adamiya/all_project_list/all_project_list.service.ts
1,55c1,55
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class AllProjectListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_project_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC.set('label', newData['label']);
<     paramsC.set('position', newData['position']);
<     paramsC.set('mobile', newData['mobile']);
<     paramsC.set('email', newData['email']);
<     paramsC.set('tel', newData['tel']);
<     this.http.post('/_s_share/create_project_list', paramsC, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE.set('label', newData['label']);
<     paramsE.set('position', newData['position']);
<     paramsE.set('mobile', newData['mobile']);
<     paramsE.set('email', newData['email']);
<     paramsE.set('tel', newData['tel']);
<     paramsE.set('id', newData['id']);
<     this.http.post('/_s_share/edit_project_list', paramsE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'project_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class AllProjectListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_project_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC.set('label', newData['label']);
>     paramsC.set('position', newData['position']);
>     paramsC.set('mobile', newData['mobile']);
>     paramsC.set('email', newData['email']);
>     paramsC.set('tel', newData['tel']);
>     this.http.post('/_share/create_project_list', paramsC, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE.set('label', newData['label']);
>     paramsE.set('position', newData['position']);
>     paramsE.set('mobile', newData['mobile']);
>     paramsE.set('email', newData['email']);
>     paramsE.set('tel', newData['tel']);
>     paramsE.set('id', newData['id']);
>     this.http.post('/_share/edit_project_list', paramsE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'project_info');
>     this.http.post('/_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_adamiya/all_project_list/index.ts app_bk/pages/_adamiya/all_project_list/index.ts
1c1
< export * from './all_project_list.component';
---
> export * from './all_project_list.component';
diff -r app/pages/_adamiya/all_scene_list/all_scene_list.component.ts app_bk/pages/_adamiya/all_scene_list/all_scene_list.component.ts
1,95c1,95
< import {Component, OnInit} from '@angular/core';
< import {AllSceneListService} from './all_scene_list.service';
< import {Observable} from 'rxjs/Observable';
< import {XScene} from '../../@xmodel/XScene';
< 
< @Component({
<   selector: 'ngx-adamiya-all-scene-list',
<   templateUrl: './all_scene_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllSceneListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '名称',
<         type: 'string',
<       },
<       custom_code: {
<         title: '自定义编码',
<         type: 'string',
<       },
<       display_code: {
<         title: '排序号',
<         type: 'number',
<       },
<       seo_tag: {
<         title: '检索标签',
<         type: 'string',
<       },
<     },
<   };
< 
<   xs: XScene[];
< 
<   constructor(private service: AllSceneListService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<       res => {
<         this.xs = res;
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllSceneListService} from './all_scene_list.service';
> import {Observable} from 'rxjs/Observable';
> import {XScene} from '../../@xmodel/XScene';
> 
> @Component({
>   selector: 'ngx-adamiya-all-scene-list',
>   templateUrl: './all_scene_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllSceneListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '名称',
>         type: 'string',
>       },
>       custom_code: {
>         title: '自定义编码',
>         type: 'string',
>       },
>       display_code: {
>         title: '排序号',
>         type: 'number',
>       },
>       seo_tag: {
>         title: '检索标签',
>         type: 'string',
>       },
>     },
>   };
> 
>   xs: XScene[];
> 
>   constructor(private service: AllSceneListService) {
>   }
> 
>   ngOnInit() {
>     this.service.getD().then(
>       res => {
>         this.xs = res;
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_scene_list/all_scene_list.html app_bk/pages/_adamiya/all_scene_list/all_scene_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     场景列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     场景列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_scene_list/all_scene_list.scss app_bk/pages/_adamiya/all_scene_list/all_scene_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_scene_list/all_scene_list.service.ts app_bk/pages/_adamiya/all_scene_list/all_scene_list.service.ts
1,105c1,105
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XScene } from '../../@xmodel/XScene';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class AllSceneListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XScene[]> {
<     // return this.http.get('/_s_adamiya/get_scene_list').map((res) => res.json());
<     const url = '/_s_adamiya/get_scene_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XScene {
<     const x = new XScene();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.custom_code = data['custom_code'];
<     x.display_code = data['display_code'];
<     x.seo_tag = data['seo_tag'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData) {
<     const url = '/_s_adamiya/create_scene_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData) {
<     const url = '/_s_adamiya/edit_scene_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData) {
<     const url = '/_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'scene_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XScene } from '../../@xmodel/XScene';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class AllSceneListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XScene[]> {
>     // return this.http.get('/_adamiya/get_scene_list').map((res) => res.json());
>     const url = '/_adamiya/get_scene_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XScene {
>     const x = new XScene();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.custom_code = data['custom_code'];
>     x.display_code = data['display_code'];
>     x.seo_tag = data['seo_tag'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData) {
>     const url = '/_adamiya/create_scene_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData) {
>     const url = '/_adamiya/edit_scene_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', 'scene_info');
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/all_scene_list/index.ts app_bk/pages/_adamiya/all_scene_list/index.ts
1c1
< export * from './all_scene_list.component';
---
> export * from './all_scene_list.component';
diff -r app/pages/_adamiya/all_user_list/all_user_list.component.ts app_bk/pages/_adamiya/all_user_list/all_user_list.component.ts
1,119c1,119
< import {Component, OnInit} from '@angular/core';
< import {AllUserListService} from './all_user_list.service';
< import {XUser} from '../../@xmodel/XUser';
< 
< @Component({
<   selector: 'ngx-adamiya-all-user-list',
<   templateUrl: './all_user_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class AllUserListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<         editable: false,
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_share/user_edit/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         editable: false,
<         filter: false,
<       },
<     },
<   };
< 
<   xs: XUser[];
< 
<   constructor(private service: AllUserListService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<       res => {
<         this.xs = res;
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {AllUserListService} from './all_user_list.service';
> import {XUser} from '../../@xmodel/XUser';
> 
> @Component({
>   selector: 'ngx-adamiya-all-user-list',
>   templateUrl: './all_user_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class AllUserListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>         editable: false,
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_a/_share/user_edit/' +
>             row.sn +
>             '"><i class="nb-list"></i></a>'
>         },
>         editable: false,
>         filter: false,
>       },
>     },
>   };
> 
>   xs: XUser[];
> 
>   constructor(private service: AllUserListService) {
>   }
> 
>   ngOnInit() {
>     this.service.getD().then(
>       res => {
>         this.xs = res;
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/all_user_list/all_user_list.html app_bk/pages/_adamiya/all_user_list/all_user_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     用户列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     用户列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/all_user_list/all_user_list.scss app_bk/pages/_adamiya/all_user_list/all_user_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/all_user_list/all_user_list.service.ts app_bk/pages/_adamiya/all_user_list/all_user_list.service.ts
1,107c1,107
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XUser } from '../../@xmodel/XUser';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class AllUserListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XUser[]> {
<     const url = '/_s_adamiya/get_user_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XUser {
<     const x = new XUser();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.position = data['position'];
<     x.mobile = data['mobile'];
<     x.email = data['email'];
<     x.tel = data['tel'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData) {
<     const url = '/_s_adamiya/create_user_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('position', newData['position'])
<       .set('mobile', newData['mobile'])
<       .set('email', newData['email'])
<       .set('tel', newData['tel']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData) {
<     const url = '/_s_adamiya/edit_user_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('position', newData['position'])
<       .set('mobile', newData['mobile'])
<       .set('email', newData['email'])
<       .set('tel', newData['tel'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData) {
<     const url = '/_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'user_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XUser } from '../../@xmodel/XUser';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class AllUserListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XUser[]> {
>     const url = '/_adamiya/get_user_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XUser {
>     const x = new XUser();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.position = data['position'];
>     x.mobile = data['mobile'];
>     x.email = data['email'];
>     x.tel = data['tel'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData) {
>     const url = '/_adamiya/create_user_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('position', newData['position'])
>       .set('mobile', newData['mobile'])
>       .set('email', newData['email'])
>       .set('tel', newData['tel']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData) {
>     const url = '/_adamiya/edit_user_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('position', newData['position'])
>       .set('mobile', newData['mobile'])
>       .set('email', newData['email'])
>       .set('tel', newData['tel'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', 'user_info');
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/all_user_list/index.ts app_bk/pages/_adamiya/all_user_list/index.ts
1c1
< export * from './all_user_list.component';
---
> export * from './all_user_list.component';
diff -r app/pages/_adamiya/data_import/data_import.component.ts app_bk/pages/_adamiya/data_import/data_import.component.ts
1,69c1,85
< import {Component, DoCheck} from '@angular/core';
< import {DataImportService} from './data_import.service';
< 
< @Component({
<   selector: 'ngx-adamiya-data-import',
<   templateUrl: './data_import.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class DataImportComponent implements DoCheck {
< 
<   closesign;
<   hrefurl;
< 
<   constructor() {
<     this.closesign = '0';
<   }
< 
<   newwindow;
< 
<   ngDoCheck() {
<     if (this.closesign === '1') {
<       this.closesign = '0';
<       if (this.newwindow.closed || this.newwindow === null) {
<       }
<       // window.alert('导入完成！');
<       // 查询导入的条数
<       // if (window.confirm('导入完成！是否立即查看？')) {
<       //   window.location.href = this.hrefurl;
<       // }
<     }
<   }
< 
<   importProduct(): void {
<     this.closesign = '1';
<     this.hrefurl =  '#/pages_a/_s_adamiya/all_product_list';
<     this.newwindow = window.open('http://localhost:3001/_s_file/import_product', 'newwindow',
<       'height=200, width=600, toolbar=no, menubar=no,' +
<       ' scrollbars=no, resizable=no, location=no, status=no');
<   }
< 
<   importEnterprise(): void {
<     this.closesign = '1';
<     this.hrefurl =  '#/pages_a/_s_adamiya/all_enterprise_list';
<     this.newwindow = window.open('http://localhost:3001/_s_file/import_enterprise', 'newwindow',
<       'height=200, width=600, toolbar=no, menubar=no,' +
<       ' scrollbars=no, resizable=no, location=no, status=no');
<   }
< 
<   importUser(): void {
<     this.closesign = '1';
<     this.hrefurl =  '#/pages_a/_s_adamiya/all_user_list';
<     this.newwindow = window.open('http://localhost:3001/_s_file/import_user', 'newwindow',
<       'height=200, width=600, toolbar=no, menubar=no,' +
<       ' scrollbars=no, resizable=no, location=no, status=no');
<   }
< 
<   importProject(): void {
<     this.closesign = '1';
<     this.hrefurl =  '#/pages_a/_s_adamiya/all_project_list';
<     this.newwindow = window.open('http://localhost:3001/_s_file/import_project', 'newwindow',
<       'height=200, width=600, toolbar=no, menubar=no,' +
<       ' scrollbars=no, resizable=no, location=no, status=no');
<   }
< }
---
> import {Component, DoCheck} from '@angular/core';
> import {DataImportService} from './data_import.service';
> 
> @Component({
>   selector: 'ngx-adamiya-data-import',
>   templateUrl: './data_import.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class DataImportComponent implements DoCheck {
> 
>   closesign;
>   hrefurl;
> 
>   constructor() {
>     this.closesign = '0';
>   }
> 
>   newwindow;
> 
>   ngDoCheck() {
>     if (this.closesign === '1') {
>       this.closesign = '0';
>       if (this.newwindow.closed || this.newwindow === null) {
>       }
>       // window.alert('导入完成！');
>       // 查询导入的条数
>       if (window.confirm('打开导入窗口？')) {
>         window.location.href = this.hrefurl;
>       }
>     }
>   }
> 
>   importProduct(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_product_list';
>     this.newwindow = window.open('/import_product', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> 
>   importEnterprise(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_enterprise_list';
>     this.newwindow = window.open('/import_enterprise', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> 
>   importUser(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_user_list';
>     this.newwindow = window.open('/import_user', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> 
>   importProject(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_project_list';
>     this.newwindow = window.open('/import_project', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> 
>   importScense(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_scense_list';
>     this.newwindow = window.open('/import_scense', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> 
>   importIndustry(): void {
>     this.closesign = '1';
>     this.hrefurl =  '#/pages_a/_adamiya/all_industry_list';
>     this.newwindow = window.open('/import_industry', 'newwindow',
>       'height=200, width=600, toolbar=no, menubar=no,' +
>       ' scrollbars=no, resizable=no, location=no, status=no');
>   }
> }
diff -r app/pages/_adamiya/data_import/data_import.html app_bk/pages/_adamiya/data_import/data_import.html
1,15c1,19
< <nb-card>
<   <nb-card-header>
<     数据导入
<   </nb-card-header>
< 
<   <nb-card-body>
<     <button type="submit" (click)="importUser()" class="btn btn-info">导入用户</button>
<     <hr />
<     <button type="submit" (click)="importProduct()" class="btn btn-info">导入产品</button>
<     <hr />
<     <button type="submit" (click)="importEnterprise()" class="btn btn-info">导入企业</button>
<     <hr />
<     <button type="submit" (click)="importProject()" class="btn btn-info">导入项目</button>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     数据导入
>   </nb-card-header>
> 
>   <nb-card-body>
>     <button type="submit" (click)="importUser()" class="btn btn-info">导入用户</button>
>     <hr />
>     <button type="submit" (click)="importProduct()" class="btn btn-info">导入产品</button>
>     <hr />
>     <button type="submit" (click)="importEnterprise()" class="btn btn-info">导入企业</button>
>     <hr />
>     <button type="submit" (click)="importProject()" class="btn btn-info">导入项目</button>
>     <hr />
>     <button type="submit" (click)="importIndustry()" class="btn btn-info">导入行业</button>
>     <hr />
>     <button type="submit" (click)="importScense()" class="btn btn-info">导入场景</button>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/data_import/data_import.scss app_bk/pages/_adamiya/data_import/data_import.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/data_import/data_import.service.ts app_bk/pages/_adamiya/data_import/data_import.service.ts
1,103c1,103
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XIndustry } from '../../@xmodel/XIndustry';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class DataImportService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XIndustry[]> {
<     // return this.http.get('/_s_adamiya/get_industry_list').map((res) => res.json());
<     const url = '/_s_adamiya/get_industry_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XIndustry {
<     const x = new XIndustry();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.custom_code = data['custom_code'];
<     x.seo_tag = data['seo_tag'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData) {
<     const url = '/_s_adamiya/create_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('tel', newData['tel']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData) {
<     const url = '/_s_adamiya/edit_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('seo_tag', newData['seo_tag'])
<       .set('custom_code', newData['custom_code'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData) {
<     const url = '/_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'industry_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XIndustry } from '../../@xmodel/XIndustry';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class DataImportService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XIndustry[]> {
>     // return this.http.get('/_adamiya/get_industry_list').map((res) => res.json());
>     const url = '/_adamiya/get_industry_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XIndustry {
>     const x = new XIndustry();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.custom_code = data['custom_code'];
>     x.seo_tag = data['seo_tag'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData) {
>     const url = '/_adamiya/create_industry_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('tel', newData['tel']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData) {
>     const url = '/_adamiya/edit_industry_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('seo_tag', newData['seo_tag'])
>       .set('custom_code', newData['custom_code'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', 'industry_info');
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/data_import/index.ts app_bk/pages/_adamiya/data_import/index.ts
1c1
< export * from './data_import.component';
---
> export * from './data_import.component';
diff -r app/pages/_adamiya/kv_list/index.ts app_bk/pages/_adamiya/kv_list/index.ts
1c1
< export * from './kv_list.component';
---
> export * from './kv_list.component';
diff -r app/pages/_adamiya/kv_list/kv_list.component.ts app_bk/pages/_adamiya/kv_list/kv_list.component.ts
1,109c1,109
< import {Component, OnInit, OnChanges, DoCheck} from '@angular/core';
< import {KVListService} from './kv_list.service';
< import {XKV} from '../../@xmodel/XKV';
< import {ActivatedRoute, Params} from '@angular/router';
< 
< @Component({
<   selector: 'ngx-adamiya-kv-list',
<   templateUrl: './kv_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class KVListComponent implements OnInit, DoCheck {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       sn: {
<         editable: false,
<         title: '系统编号',
<         type: 'string',
<         filter: false,
<       },
<       label: {
<         title: '名称',
<         type: 'string',
<       },
<       custom_code: {
<         title: '自定义编码',
<         type: 'string',
<       },
<       display_code: {
<         title: '排序号',
<         type: 'number',
<       },
<     },
<   };
< 
<   xs: XKV[];
<   private en: string;
<   private ennew: string;
< 
<   constructor(private service: KVListService, private route: ActivatedRoute) {
<     this.ennew = '0';
<     this.en = '0';
<   }
< 
<   ngDoCheck() {
<     this.route.params.subscribe((params: Params) => this.ennew = params['en']);
<     if (this.ennew !== this.en) {
<       // window.alert(this.en);
<       this.en = this.ennew;
<       this.service.getD(this.en).then(
<         res => {
<           this.xs = res;
<         }).catch(this.handleError);
<     }
<   }
< 
<   ngOnInit() {
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData, this.en);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData, this.en);
<     event.confirm.resolve();
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data, this.en);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit, OnChanges, DoCheck} from '@angular/core';
> import {KVListService} from './kv_list.service';
> import {XKV} from '../../@xmodel/XKV';
> import {ActivatedRoute, Params} from '@angular/router';
> 
> @Component({
>   selector: 'ngx-adamiya-kv-list',
>   templateUrl: './kv_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class KVListComponent implements OnInit, DoCheck {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       sn: {
>         editable: false,
>         title: '系统编号',
>         type: 'string',
>         filter: false,
>       },
>       label: {
>         title: '名称',
>         type: 'string',
>       },
>       custom_code: {
>         title: '自定义编码',
>         type: 'string',
>       },
>       display_code: {
>         title: '排序号',
>         type: 'number',
>       },
>     },
>   };
> 
>   xs: XKV[];
>   private en: string;
>   private ennew: string;
> 
>   constructor(private service: KVListService, private route: ActivatedRoute) {
>     this.ennew = '0';
>     this.en = '0';
>   }
> 
>   ngDoCheck() {
>     this.route.params.subscribe((params: Params) => this.ennew = params['en']);
>     if (this.ennew !== this.en) {
>       // window.alert(this.en);
>       this.en = this.ennew;
>       this.service.getD(this.en).then(
>         res => {
>           this.xs = res;
>         }).catch(this.handleError);
>     }
>   }
> 
>   ngOnInit() {
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData, this.en);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData, this.en);
>     event.confirm.resolve();
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data, this.en);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_adamiya/kv_list/kv_list.html app_bk/pages/_adamiya/kv_list/kv_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     行业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     行业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_adamiya/kv_list/kv_list.scss app_bk/pages/_adamiya/kv_list/kv_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/kv_list/kv_list.service.ts app_bk/pages/_adamiya/kv_list/kv_list.service.ts
1,109c1,109
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XKV } from '../../@xmodel/XKV';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class KVListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(en): Promise<XKV[]> {
<     const url = '/_s_share/get_kv_list';
<     const params = new HttpParams()
<       .set('en', en);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XKV {
<     const x = new XKV();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.creator_sn = data['creator_sn'];
<     x.create_dt = data['create_dt'];
<     const last_update_dt = new Date(data['last_update_dt']);
<     x.last_update_dt = last_update_dt.toLocaleString();
<     x.custom_code = data['custom_code'];
<     x.display_code = data['display_code'];
<     x.is_deleted = data['is_deleted'];
<     x.is_na = data['is_na'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   createD(newData, en) {
<     const url = '/_adamiya/create_kv_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('en', en)
<       .set('label', newData['label'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData, en) {
<     const url = '/_adamiya/edit_kv_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('en', en)
<       .set('label', newData['label'])
<       .set('custom_code', newData['custom_code'])
<       .set('display_code', newData['display_code'])
<       .set('id', newData['id']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   deleteD(newData, en) {
<     const url = '/_s_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', en);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XKV } from '../../@xmodel/XKV';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class KVListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(en): Promise<XKV[]> {
>     const url = '/_share/get_kv_list';
>     const params = new HttpParams()
>       .set('en', en);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XKV {
>     const x = new XKV();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.creator_sn = data['creator_sn'];
>     x.create_dt = data['create_dt'];
>     const last_update_dt = new Date(data['last_update_dt']);
>     x.last_update_dt = last_update_dt.toLocaleString();
>     x.custom_code = data['custom_code'];
>     x.display_code = data['display_code'];
>     x.is_deleted = data['is_deleted'];
>     x.is_na = data['is_na'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   createD(newData, en) {
>     const url = '/_adamiya/create_kv_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('en', en)
>       .set('label', newData['label'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData, en) {
>     const url = '/_adamiya/edit_kv_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('en', en)
>       .set('label', newData['label'])
>       .set('custom_code', newData['custom_code'])
>       .set('display_code', newData['display_code'])
>       .set('id', newData['id']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   deleteD(newData, en) {
>     const url = '/_share/delete_to_recycle';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', en);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_adamiya/sta_by_all/index.ts app_bk/pages/_adamiya/sta_by_all/index.ts
1c1
< export * from './sta_by_all.component';
---
> export * from './sta_by_all.component';
diff -r app/pages/_adamiya/sta_by_all/sta_by_all.service.ts app_bk/pages/_adamiya/sta_by_all/sta_by_all.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STAByAllService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_master/sta_by_all').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByAllService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_master/sta_by_all').map((res) => res.json());
>     }
> }
diff -r app/pages/_adamiya/sta_by_date/index.ts app_bk/pages/_adamiya/sta_by_date/index.ts
1c1
< export * from './sta_by_date.component';
---
> export * from './sta_by_date.component';
diff -r app/pages/_adamiya/sta_by_date/sta_by_date.component.html app_bk/pages/_adamiya/sta_by_date/sta_by_date.component.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_adamiya/sta_by_date/sta_by_date.component.ts app_bk/pages/_adamiya/sta_by_date/sta_by_date.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {STAByDateService} from './sta_by_date.service'
< 
< @Component({
<   selector: 'ngx-sta-by-date',
<   styleUrls: ['sta_by_date.scss'],
<   templateUrl: 'sta_by_date.component.html',
<   providers: [STAByDateService],
< 
< })
< export class STAByDateComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: STAByDateService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByDateService} from './sta_by_date.service'
> 
> @Component({
>   selector: 'ngx-sta-by-date',
>   styleUrls: ['sta_by_date.scss'],
>   templateUrl: 'sta_by_date.component.html',
>   providers: [STAByDateService],
> 
> })
> export class STAByDateComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByDateService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_adamiya/sta_by_date/sta_by_date.scss app_bk/pages/_adamiya/sta_by_date/sta_by_date.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_date/sta_by_date.service.ts app_bk/pages/_adamiya/sta_by_date/sta_by_date.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STAByDateService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByDateService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-area-stack-enterprise.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-bar-animation.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-bar.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-line.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-multiple-xaxis.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-pie-industry-enterprise.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-pie-scene-enterprise.component.ts
只在 app/pages/_adamiya/sta_by_enterprise 存在：echarts-radar.component.ts
diff -r app/pages/_adamiya/sta_by_enterprise/index.ts app_bk/pages/_adamiya/sta_by_enterprise/index.ts
1c1
< export * from './sta_by_enterprise.component';
---
> export * from './sta_by_enterprise.component';
只在 app_bk/pages/_adamiya/sta_by_enterprise 存在：sta_by_enterprise.component.html
diff -r app/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.component.ts app_bk/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.component.ts
1,44c1,27
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {STAByEnterpriseService} from './sta_by_enterprise.service'
< 
< @Component({
<   selector: 'ngx-sta-by-enterprise',
<   styleUrls: ['sta_by_enterprise.scss'],
<   templateUrl: 'sta_by_enterprise.html',
<   providers: [STAByEnterpriseService],
< 
< })
< export class STAByEnterpriseComponent implements OnInit {
<   a;  b;  c;  d;  e;  f;  g;
<   constructor(private service: STAByEnterpriseService) {
<     this.a = '11';
<     this.b = '21';
<     this.c = '14';
<     this.d = '51';
<     this.e = '41';
<     this.f = '71';
<     this.g = '12';
<   }
< 
<   ngOnInit() {
<     this.service.getDIndustry();
<     this.service.getDScene();
<     this.service.getDGrowIndustryYM();
<     this.service.getDGrowIndustry();
<     // this.service.getDSTA().then(
<     //  res => {
<         // this.xssd_grow_industry = res;
<         // this.xssd_grow_industry.forEach((val, idx, array) => {
<         //  this.xsld_year_month.push(val.yyyy + '/' + val.mm);
<         // });
<     //  }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<     // this.xssd_scene.forEach((val, idx, array) => {
<     //           this.xsld_scene.push(val.name);
<     //         });
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByEnterpriseService} from './sta_by_enterprise.service'
> 
> @Component({
>   selector: 'ngx-sta-by-enterprise',
>   styleUrls: ['sta_by_enterprise.scss'],
>   templateUrl: 'sta_by_enterprise.component.html',
>   providers: [STAByEnterpriseService],
> 
> })
> export class STAByEnterpriseComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByEnterpriseService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
只在 app/pages/_adamiya/sta_by_enterprise 存在：sta_by_enterprise.html
diff -r app/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.scss app_bk/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< @import '~@nebular/theme/styles/global/bootstrap/buttons';
< 
< @include nb-install-component() {
<   ngx-echarts-pie,
<   ngx-echarts-bar,
<   ngx-echarts-line,
<   ngx-echarts-multiple-xaxis,
<   ngx-echarts-area-stack,
<   ngx-echarts-bar-animation,
<   ngx-echarts-radar {
<     display: block;
<     height: nb-theme(card-height-medium);
<     width: 100%;
<   }
< 
<   /deep/ .echart {
<     height: 100%;
<     width: 100%;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.service.ts app_bk/pages/_adamiya/sta_by_enterprise/sta_by_enterprise.service.ts
1,190c1,11
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import {XSTAPieSeriesData} from '../../@xmodel/XSTAPieSeriesData';
< import {XSTAAreaStackSeriesData} from '../../@xmodel/XSTAAreaStackSeriesData';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class STAByEnterpriseService {
<   constructor(private httpClient: HttpClient) {
<     localStorage.setItem('sta_by_enterprise_industry_dt', '');
<     localStorage.setItem('sta_by_enterprise_scene_dt', '');
<     localStorage.setItem('sta_by_enterprise_grow_industry_ym_dt', '');
<     localStorage.setItem('sta_by_enterprise_grow_industry_dt', '');
<   };
< 
<   getDSTA() {
<     const url = '/_s_adamiya/get_sta_enterprise_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<           }
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustry() {
<     localStorage.setItem('sta_by_enterprise_xssd_industry', '');
<     localStorage.setItem('sta_by_enterprise_xsld_industry', '');
<     const url = '/_s_adamiya/get_sta_enterprise_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     const xsld = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           xssd.push(this.setX(data[i]));
<           xsld.push(data[i]['name']);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         const ls2 = JSON.stringify(xsld);
<         // window.alert(ls2);
<         localStorage.setItem('sta_by_enterprise_xssd_industry', ls1);
<         localStorage.setItem('sta_by_enterprise_xsld_industry', ls2);
<         localStorage.setItem('sta_by_enterprise_industry_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   getDScene() {
<     localStorage.setItem('sta_by_enterprise_xssd_scene', '');
<     localStorage.setItem('sta_by_enterprise_xsld_scene', '');
<     const url = '/_s_adamiya/get_sta_enterprise_scene';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     const xsld = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           xssd.push(this.setX(data[i]));
<           xsld.push(data[i]['name']);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         const ls2 = JSON.stringify(xsld);
<         // window.alert(ls2 + '222');
<         localStorage.setItem('sta_by_enterprise_xssd_scene', ls1);
<         localStorage.setItem('sta_by_enterprise_xsld_scene', ls2);
<         localStorage.setItem('sta_by_enterprise_scene_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   setX(data: any): XSTAPieSeriesData {
<     const x = new XSTAPieSeriesData();
<     x.value = data['value'];
<     x.name = data['name'];
<     return x;
<   }
< 
<   oldname;
<   newname;
<   index;
<   oldym;
<   xsldym = [];
< 
<   getDGrowIndustryYM() {
<     localStorage.setItem('sta_by_enterprise_xsld_year_month', '');
<     this.oldym = '';
<     const url = '/_s_adamiya/get_sta_enterprise_grow_by_industry_ym';
<     const params = new HttpParams()
<       .set('ln', '');
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           // 年月序列
<           const newym = data[i]['yyyy'].toString() + '/' + data[i]['mm'].toString();
<           if (newym !== this.oldym) {
<             this.oldym = newym;
<             this.xsldym.push(newym);
<           }
<         }
<         const ls1 = JSON.stringify(this.xsldym);
<         // window.alert(ls1);
<         localStorage.setItem('sta_by_enterprise_xsld_year_month', ls1);
<         localStorage.setItem('sta_by_enterprise_grow_industry_ym_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   getDGrowIndustry() {
<     localStorage.setItem('sta_by_enterprise_xssd_grow_industry', '');
<     this.oldname = '';
<     this.newname = '';
<     const url = '/_s_adamiya/get_sta_enterprise_grow_by_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         this.index = 0;
<         while (this.index < count) {
<           // 行业序列
<           this.oldname = data[this.index]['name']; // 必然有一个元素才会进入 while
<           // window.alert(this.oldname);
<           const xasssd = new XSTAAreaStackSeriesData();
<           const xasssd_data = [];
<           xasssd.name = data[this.index]['name'];
<           xasssd.type = data[this.index]['type'];
<           xasssd.stack = data[this.index]['stack'];
<           xasssd.areaStyle = data[this.index]['areaStyle'];
<           // 行业序列数据初始化
<           for (let j = 0; j < this.xsldym.length; j++) {
<             xasssd_data.push('0');
<           }
<           for (let i = this.index; i < count; i++) {
<             this.newname = data[i]['name'];
<             if (this.newname !== this.oldname) {
<               break;
<             }
<             this.index ++;
<             // 行业序列数据，要匹配年月
<             const ym = data[i]['yyyy'].toString() + '/' + data[i]['mm'].toString();
<             const ymindex = this.xsldym.indexOf(ym);
<             if (ymindex > -1)
<               xasssd_data[ymindex] = data[i]['value'];
<           }
<           xasssd.data = xasssd_data;
<           xssd.push(xasssd);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         localStorage.setItem('sta_by_enterprise_xssd_grow_industry', ls1);
<         localStorage.setItem('sta_by_enterprise_grow_industry_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByEnterpriseService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_adamiya/sta_by_favor/index.ts app_bk/pages/_adamiya/sta_by_favor/index.ts
1c1
< export * from './sta_by_favor.component';
---
> export * from './sta_by_favor.component';
diff -r app/pages/_adamiya/sta_by_favor/sta_by_favor.component.html app_bk/pages/_adamiya/sta_by_favor/sta_by_favor.component.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_adamiya/sta_by_favor/sta_by_favor.component.ts app_bk/pages/_adamiya/sta_by_favor/sta_by_favor.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {STAByFavorService} from './sta_by_favor.service'
< 
< @Component({
<   selector: 'ngx-sta-by-favor',
<   styleUrls: ['sta_by_favor.scss'],
<   templateUrl: 'sta_by_favor.component.html',
<   providers: [STAByFavorService],
< 
< })
< export class STAByFavorComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: STAByFavorService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByFavorService} from './sta_by_favor.service'
> 
> @Component({
>   selector: 'ngx-sta-by-favor',
>   styleUrls: ['sta_by_favor.scss'],
>   templateUrl: 'sta_by_favor.component.html',
>   providers: [STAByFavorService],
> 
> })
> export class STAByFavorComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByFavorService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_adamiya/sta_by_favor/sta_by_favor.scss app_bk/pages/_adamiya/sta_by_favor/sta_by_favor.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_favor/sta_by_favor.service.ts app_bk/pages/_adamiya/sta_by_favor/sta_by_favor.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STAByFavorService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByFavorService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_adamiya/sta_by_industry/index.ts app_bk/pages/_adamiya/sta_by_industry/index.ts
1c1
< export * from './sta_by_industry.component';
---
> export * from './sta_by_industry.component';
diff -r app/pages/_adamiya/sta_by_industry/sta_by_industry.component.html app_bk/pages/_adamiya/sta_by_industry/sta_by_industry.component.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_adamiya/sta_by_industry/sta_by_industry.component.ts app_bk/pages/_adamiya/sta_by_industry/sta_by_industry.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {STAByIndustryService} from './sta_by_industry.service'
< 
< @Component({
<   selector: 'ngx-sta-by-industry',
<   styleUrls: ['sta_by_industry.scss'],
<   templateUrl: 'sta_by_industry.component.html',
<   providers: [STAByIndustryService],
< 
< })
< export class STAByIndustryComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: STAByIndustryService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByIndustryService} from './sta_by_industry.service'
> 
> @Component({
>   selector: 'ngx-sta-by-industry',
>   styleUrls: ['sta_by_industry.scss'],
>   templateUrl: 'sta_by_industry.component.html',
>   providers: [STAByIndustryService],
> 
> })
> export class STAByIndustryComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByIndustryService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_adamiya/sta_by_industry/sta_by_industry.scss app_bk/pages/_adamiya/sta_by_industry/sta_by_industry.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_industry/sta_by_industry.service.ts app_bk/pages/_adamiya/sta_by_industry/sta_by_industry.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STAByIndustryService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByIndustryService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
只在 app/pages/_adamiya/sta_by_product 存在：echarts-area-stack-product.component.ts
只在 app/pages/_adamiya/sta_by_product 存在：echarts-pie-industry-product.component.ts
只在 app/pages/_adamiya/sta_by_product 存在：echarts-pie-scene-product.component.ts
diff -r app/pages/_adamiya/sta_by_product/index.ts app_bk/pages/_adamiya/sta_by_product/index.ts
1c1
< export * from './sta_by_product.component';
---
> export * from './sta_by_product.component';
只在 app_bk/pages/_adamiya/sta_by_product 存在：sta_by_product.component.html
diff -r app/pages/_adamiya/sta_by_product/sta_by_product.component.ts app_bk/pages/_adamiya/sta_by_product/sta_by_product.component.ts
1,44c1,27
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {STAByProductService} from './sta_by_product.service'
< 
< @Component({
<   selector: 'ngx-sta-by-product',
<   styleUrls: ['sta_by_product.scss'],
<   templateUrl: 'sta_by_product.html',
<   providers: [STAByProductService],
< 
< })
< export class STAByProductComponent implements OnInit {
<   a;  b;  c;  d;  e;  f;  g;
<   constructor(private service: STAByProductService) {
<     this.a = '11';
<     this.b = '21';
<     this.c = '14';
<     this.d = '51';
<     this.e = '41';
<     this.f = '71';
<     this.g = '12';
<   }
< 
<   ngOnInit() {
<     this.service.getDIndustry();
<     this.service.getDScene();
<     this.service.getDGrowIndustryYM();
<     this.service.getDGrowIndustry();
<     // this.service.getDSTA().then(
<     //  res => {
<     // this.xssd_grow_industry = res;
<     // this.xssd_grow_industry.forEach((val, idx, array) => {
<     //  this.xsld_year_month.push(val.yyyy + '/' + val.mm);
<     // });
<     //  }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<     // this.xssd_scene.forEach((val, idx, array) => {
<     //           this.xsld_scene.push(val.name);
<     //         });
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByProductService} from './sta_by_product.service'
> 
> @Component({
>   selector: 'ngx-sta-by-product',
>   styleUrls: ['sta_by_product.scss'],
>   templateUrl: 'sta_by_product.component.html',
>   providers: [STAByProductService],
> 
> })
> export class STAByProductComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByProductService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
只在 app/pages/_adamiya/sta_by_product 存在：sta_by_product.html
diff -r app/pages/_adamiya/sta_by_product/sta_by_product.scss app_bk/pages/_adamiya/sta_by_product/sta_by_product.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< @import '~@nebular/theme/styles/global/bootstrap/buttons';
< 
< @include nb-install-component() {
<   ngx-echarts-pie,
<   ngx-echarts-bar,
<   ngx-echarts-line,
<   ngx-echarts-multiple-xaxis,
<   ngx-echarts-area-stack,
<   ngx-echarts-bar-animation,
<   ngx-echarts-radar {
<     display: block;
<     height: nb-theme(card-height-medium);
<     width: 100%;
<   }
< 
<   /deep/ .echart {
<     height: 100%;
<     width: 100%;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_product/sta_by_product.service.ts app_bk/pages/_adamiya/sta_by_product/sta_by_product.service.ts
1,190c1,11
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import {XSTAPieSeriesData} from '../../@xmodel/XSTAPieSeriesData';
< import {XSTAAreaStackSeriesData} from '../../@xmodel/XSTAAreaStackSeriesData';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class STAByProductService {
<   constructor(private httpClient: HttpClient) {
<     localStorage.setItem('sta_by_product_industry_dt', '');
<     localStorage.setItem('sta_by_product_scene_dt', '');
<     localStorage.setItem('sta_by_product_grow_industry_ym_dt', '');
<     localStorage.setItem('sta_by_product_grow_industry_dt', '');
<   };
< 
<   getDSTA() {
<     const url = '/_s_adamiya/get_sta_product_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<           }
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustry() {
<     localStorage.setItem('sta_by_product_xssd_industry', '');
<     localStorage.setItem('sta_by_product_xsld_industry', '');
<     const url = '/_s_adamiya/get_sta_product_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     const xsld = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           xssd.push(this.setX(data[i]));
<           xsld.push(data[i]['name']);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         const ls2 = JSON.stringify(xsld);
<         // window.alert(ls2);
<         localStorage.setItem('sta_by_product_xssd_industry', ls1);
<         localStorage.setItem('sta_by_product_xsld_industry', ls2);
<         localStorage.setItem('sta_by_product_industry_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   getDScene() {
<     localStorage.setItem('sta_by_product_xssd_scene', '');
<     localStorage.setItem('sta_by_product_xsld_scene', '');
<     const url = '/_s_adamiya/get_sta_product_scene';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     const xsld = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           xssd.push(this.setX(data[i]));
<           xsld.push(data[i]['name']);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         const ls2 = JSON.stringify(xsld);
<         // window.alert(ls2 + '222');
<         localStorage.setItem('sta_by_product_xssd_scene', ls1);
<         localStorage.setItem('sta_by_product_xsld_scene', ls2);
<         localStorage.setItem('sta_by_product_scene_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   setX(data: any): XSTAPieSeriesData {
<     const x = new XSTAPieSeriesData();
<     x.value = data['value'];
<     x.name = data['name'];
<     return x;
<   }
< 
<   oldname;
<   newname;
<   index;
<   oldym;
<   xsldym = [];
< 
<   getDGrowIndustryYM() {
<     localStorage.setItem('sta_by_product_xsld_year_month', '');
<     this.oldym = '';
<     const url = '/_s_adamiya/get_sta_product_grow_by_industry_ym';
<     const params = new HttpParams()
<       .set('ln', '');
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           // 年月序列
<           const newym = data[i]['yyyy'].toString() + '/' + data[i]['mm'].toString();
<           if (newym !== this.oldym) {
<             this.oldym = newym;
<             this.xsldym.push(newym);
<           }
<         }
<         const ls1 = JSON.stringify(this.xsldym);
<         // window.alert(ls1);
<         localStorage.setItem('sta_by_product_xsld_year_month', ls1);
<         localStorage.setItem('sta_by_product_grow_industry_ym_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   getDGrowIndustry() {
<     localStorage.setItem('sta_by_product_xssd_grow_industry', '');
<     this.oldname = '';
<     this.newname = '';
<     const url = '/_s_adamiya/get_sta_product_grow_by_industry';
<     const params = new HttpParams()
<       .set('ln', '');
<     const xssd = [];
<     this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         this.index = 0;
<         while (this.index < count) {
<           // 行业序列
<           this.oldname = data[this.index]['name']; // 必然有一个元素才会进入 while
<           // window.alert(this.oldname);
<           const xasssd = new XSTAAreaStackSeriesData();
<           const xasssd_data = [];
<           xasssd.name = data[this.index]['name'];
<           xasssd.type = data[this.index]['type'];
<           xasssd.stack = data[this.index]['stack'];
<           xasssd.areaStyle = data[this.index]['areaStyle'];
<           // 行业序列数据初始化
<           for (let j = 0; j < this.xsldym.length; j++) {
<             xasssd_data.push('0');
<           }
<           for (let i = this.index; i < count; i++) {
<             this.newname = data[i]['name'];
<             if (this.newname !== this.oldname) {
<               break;
<             }
<             this.index ++;
<             // 行业序列数据，要匹配年月
<             const ym = data[i]['yyyy'].toString() + '/' + data[i]['mm'].toString();
<             const ymindex = this.xsldym.indexOf(ym);
<             if (ymindex > -1)
<               xasssd_data[ymindex] = data[i]['value'];
<           }
<           xasssd.data = xasssd_data;
<           xssd.push(xasssd);
<         }
<         const ls1 = JSON.stringify(xssd);
<         // window.alert(ls1);
<         localStorage.setItem('sta_by_product_xssd_grow_industry', ls1);
<         localStorage.setItem('sta_by_product_grow_industry_dt', '1');
<       },
<     ).catch(this.handleError);
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByProductService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_adamiya/sta_by_scene/index.ts app_bk/pages/_adamiya/sta_by_scene/index.ts
1c1
< export * from './sta_by_scene.component';
---
> export * from './sta_by_scene.component';
diff -r app/pages/_adamiya/sta_by_scene/sta_by_scene.component.html app_bk/pages/_adamiya/sta_by_scene/sta_by_scene.component.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_adamiya/sta_by_scene/sta_by_scene.component.ts app_bk/pages/_adamiya/sta_by_scene/sta_by_scene.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {STABySceneService} from './sta_by_scene.service'
< 
< @Component({
<   selector: 'ngx-sta-by-scene',
<   styleUrls: ['sta_by_scene.scss'],
<   templateUrl: 'sta_by_scene.component.html',
<   providers: [STABySceneService],
< 
< })
< export class STABySceneComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: STABySceneService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STABySceneService} from './sta_by_scene.service'
> 
> @Component({
>   selector: 'ngx-sta-by-scene',
>   styleUrls: ['sta_by_scene.scss'],
>   templateUrl: 'sta_by_scene.component.html',
>   providers: [STABySceneService],
> 
> })
> export class STABySceneComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STABySceneService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_adamiya/sta_by_scene/sta_by_scene.scss app_bk/pages/_adamiya/sta_by_scene/sta_by_scene.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_scene/sta_by_scene.service.ts app_bk/pages/_adamiya/sta_by_scene/sta_by_scene.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STABySceneService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STABySceneService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_adamiya/sta_by_user/index.ts app_bk/pages/_adamiya/sta_by_user/index.ts
1c1
< export * from './sta_by_user.component';
---
> export * from './sta_by_user.component';
diff -r app/pages/_adamiya/sta_by_user/sta_by_user.component.html app_bk/pages/_adamiya/sta_by_user/sta_by_user.component.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_adamiya/sta_by_user/sta_by_user.component.ts app_bk/pages/_adamiya/sta_by_user/sta_by_user.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {STAByUserService} from './sta_by_user.service'
< 
< @Component({
<   selector: 'ngx-sta-by-user',
<   styleUrls: ['sta_by_user.scss'],
<   templateUrl: 'sta_by_user.component.html',
<   providers: [STAByUserService],
< 
< })
< export class STAByUserComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: STAByUserService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {STAByUserService} from './sta_by_user.service'
> 
> @Component({
>   selector: 'ngx-sta-by-user',
>   styleUrls: ['sta_by_user.scss'],
>   templateUrl: 'sta_by_user.component.html',
>   providers: [STAByUserService],
> 
> })
> export class STAByUserComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: STAByUserService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_adamiya/sta_by_user/sta_by_user.scss app_bk/pages/_adamiya/sta_by_user/sta_by_user.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_adamiya/sta_by_user/sta_by_user.service.ts app_bk/pages/_adamiya/sta_by_user/sta_by_user.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class STAByUserService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class STAByUserService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/@api/base_service.service.ts app_bk/pages/@api/base_service.service.ts
1,57c1,57
< import { Injectable } from '@angular/core';
< import { Http, Headers } from '@angular/http';
< import { Observable } from 'rxjs/Observable';
< import 'rxjs/Rx';
< 
< @Injectable()
< export class BaseService {
<   constructor(private http: Http) { }
<   /**
<    * @param {string} url地址
<    * @param {any} [options]可选提交的参数
<    * @param {any} [header]可选设置的头信息
<    * @memberof ServiceBaseService
<    * @title: 封装一个get请求的基础类
<    */
<   getData(url: string, options?: any, myheaders?: any): Observable<any> {
<     // 配置请求头
<     const myHeaders: Headers = new Headers();
<     // tslint:disable-next-line:forin
<     for (const key in myheaders) {
<       myHeaders.append(key, myheaders[key]);
<     };
<     url += (url.indexOf('?') < 0 ? '?' : '&') + this.param(options);
<     return this.http.get(url, { headers: myHeaders }).map(res => res.json());
<   }
< 
<   /**
<    * @param url地址
<    * @param options提交的数据
<    * @param myheaders可选参数设置头
<    * @title:封装一个post请求数据的
<    */
<   postData(url: string, options: any, myheaders?: any): Observable<any> {
<     const myHeaders: Headers = new Headers();
<     myHeaders.append('Content-Type', 'application/json');
<     // tslint:disable-next-line:forin
<     for (const key in myheaders) {
<       myHeaders.append(key, myheaders[key]);
<     };
<     return this.http.post(url, options, { headers: myHeaders });
<   }
<   /**
<    * @param {any} data
<    * @returns
<    * @memberof ServiceBaseService
<    * @title:封装一个序列化get请求的参数的方法
<    */
<   param(data): string {
<     let url = '';
<     // tslint:disable-next-line:forin
<     for (const k in data) {
<       const value = data[k] !== undefined ? data[k] : '';
<       url += `&${k}=${encodeURIComponent(value)}`;
<     }
<     return url ? url.substring(1) : '';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http, Headers } from '@angular/http';
> import { Observable } from 'rxjs/Observable';
> import 'rxjs/Rx';
> 
> @Injectable()
> export class BaseService {
>   constructor(private http: Http) { }
>   /**
>    * @param {string} url地址
>    * @param {any} [options]可选提交的参数
>    * @param {any} [header]可选设置的头信息
>    * @memberof ServiceBaseService
>    * @title: 封装一个get请求的基础类
>    */
>   getData(url: string, options?: any, myheaders?: any): Observable<any> {
>     // 配置请求头
>     const myHeaders: Headers = new Headers();
>     // tslint:disable-next-line:forin
>     for (const key in myheaders) {
>       myHeaders.append(key, myheaders[key]);
>     };
>     url += (url.indexOf('?') < 0 ? '?' : '&') + this.param(options);
>     return this.http.get(url, { headers: myHeaders }).map(res => res.json());
>   }
> 
>   /**
>    * @param url地址
>    * @param options提交的数据
>    * @param myheaders可选参数设置头
>    * @title:封装一个post请求数据的
>    */
>   postData(url: string, options: any, myheaders?: any): Observable<any> {
>     const myHeaders: Headers = new Headers();
>     myHeaders.append('Content-Type', 'application/json');
>     // tslint:disable-next-line:forin
>     for (const key in myheaders) {
>       myHeaders.append(key, myheaders[key]);
>     };
>     return this.http.post(url, options, { headers: myHeaders });
>   }
>   /**
>    * @param {any} data
>    * @returns
>    * @memberof ServiceBaseService
>    * @title:封装一个序列化get请求的参数的方法
>    */
>   param(data): string {
>     let url = '';
>     // tslint:disable-next-line:forin
>     for (const k in data) {
>       const value = data[k] !== undefined ? data[k] : '';
>       url += `&${k}=${encodeURIComponent(value)}`;
>     }
>     return url ? url.substring(1) : '';
>   }
> }
diff -r app/pages/_auth_a.component.ts app_bk/pages/_auth_a.component.ts
1,18c1,18
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-auth-a',
<   template: `
<     <ngx-psp-auth-layout>
<       <router-outlet></router-outlet>
<     </ngx-psp-auth-layout>
<   `,
< })
< export class AuthAComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     localStorage.setItem('cu_type', 'adamiya');
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-auth-a',
>   template: `
>     <ngx-psp-auth-layout>
>       <router-outlet></router-outlet>
>     </ngx-psp-auth-layout>
>   `,
> })
> export class AuthAComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     localStorage.setItem('cu_type', 'adamiya');
>   }
> }
diff -r app/pages/_auth_a.module.ts app_bk/pages/_auth_a.module.ts
1,24c1,24
< import {NgModule, OnInit} from '@angular/core';
< 
< import { AuthAComponent } from './_auth_a.component';
< import { AuthARoutingModule } from './_auth_a-routing.module';
< import { LoginAModule } from './_login_a/login_a.module';
< import { ThemeModule } from '../@theme/theme.module';
< import { MiscellaneousModule } from './miscellaneous/miscellaneous.module';
< 
< const AUTHA_COMPONENTS = [
<   AuthAComponent,
< ];
< 
< @NgModule({
<   imports: [
<     AuthARoutingModule,
<     ThemeModule,
<     LoginAModule,
<     MiscellaneousModule,
<   ],
<   declarations: [
<     ...AUTHA_COMPONENTS,
<   ],
< })
< export class AuthAModule {}
---
> import {NgModule, OnInit} from '@angular/core';
> 
> import { AuthAComponent } from './_auth_a.component';
> import { AuthARoutingModule } from './_auth_a-routing.module';
> import { LoginAModule } from './_login_a/login_a.module';
> import { ThemeModule } from '../@theme/theme.module';
> import { MiscellaneousModule } from './miscellaneous/miscellaneous.module';
> 
> const AUTHA_COMPONENTS = [
>   AuthAComponent,
> ];
> 
> @NgModule({
>   imports: [
>     AuthARoutingModule,
>     ThemeModule,
>     LoginAModule,
>     MiscellaneousModule,
>   ],
>   declarations: [
>     ...AUTHA_COMPONENTS,
>   ],
> })
> export class AuthAModule {}
diff -r app/pages/_auth_login/a_logout/a_logout.component.ts app_bk/pages/_auth_login/a_logout/a_logout.component.ts
1,28c1,28
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-authes-a-logout',
<   styleUrls: ['a_logout.scss'],
<   templateUrl: 'a_logout.html',
< 
< })
< export class ALogoutComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     const cuid = localStorage.getItem('cu_id');
<     // if (uid && uid !== '')
<     //   window.location.reload();
<     localStorage.setItem('cu_id', '');
<     localStorage.setItem('cu_label', '');
<     localStorage.setItem('cu_sn', '');
<     localStorage.setItem('cu_pic', '');
<     localStorage.setItem('cu_ln', '');
<     localStorage.setItem('cu_type', 'adamiya');
<   }
< 
<   reLogin() {
<     window.location.href = '#/auth_a/_auth_login/auth_login_a';
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-authes-a-logout',
>   styleUrls: ['a_logout.scss'],
>   templateUrl: 'a_logout.html',
> 
> })
> export class ALogoutComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     const cuid = localStorage.getItem('cu_id');
>     // if (uid && uid !== '')
>     //   window.location.reload();
>     localStorage.setItem('cu_id', '');
>     localStorage.setItem('cu_label', '');
>     localStorage.setItem('cu_sn', '');
>     localStorage.setItem('cu_pic', '');
>     localStorage.setItem('cu_ln', '');
>     localStorage.setItem('cu_type', 'adamiya');
>   }
> 
>   reLogin() {
>     window.location.href = '#/auth_a/_auth_login/auth_login_a';
>   }
> }
diff -r app/pages/_auth_login/a_logout/a_logout.html app_bk/pages/_auth_login/a_logout/a_logout.html
1,19c1,19
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>尊敬的管理员，您已注销</nb-card-header>
<       <nb-card-body>
<         <form>
<           <button type="submit" class="btn btn-danger" (click)="reLogin()">重新登录</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>尊敬的管理员，您已注销</nb-card-header>
>       <nb-card-body>
>         <form>
>           <button type="submit" class="btn btn-danger" (click)="reLogin()">重新登录</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
> 
diff -r app/pages/_auth_login/a_logout/a_logout.scss app_bk/pages/_auth_login/a_logout/a_logout.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_auth_login/a_logout/index.ts app_bk/pages/_auth_login/a_logout/index.ts
1c1
< export * from './a_logout.component';
---
> export * from './a_logout.component';
diff -r app/pages/_auth_login/auth_login_a/auth_login_a.component.ts app_bk/pages/_auth_login/auth_login_a/auth_login_a.component.ts
1,52c1,52
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {AuthLoginAService} from './auth_login_a.service'
< import { XUser } from '../../@xmodel/XUser';
< 
< @Component({
<   selector: 'ngx-auth-login-auth-login-a',
<   styleUrls: ['auth_login_a.scss'],
<   templateUrl: 'auth_login_a.html',
<   providers: [AuthLoginAService],
< 
< })
< 
< export class AuthLoginAComponent implements OnInit {
<   private xs: XUser[];
<   public CurrentX: XUser;
<   public ln: string;
<   public pd: string;
<   constructor(private service: AuthLoginAService) {  }
< 
<   ngOnInit() {  }
< 
<   getLogin() {
<     if (!this.ln || !this.pd) {
<       window.alert('对不起，请不要留空！');
<     } else if (this.ln.trim() === '' || this.pd.trim() === '') {
<       window.alert('对不起，请不要留空！');
<     } else {
<       this.service.getLogin(this.ln, this.pd).then(
<         res => {
<           this.xs = res;
<           this.CurrentX = this.xs[0];
<           // window.alert(this.CurrentXUser.login_name);
<           if (this.CurrentX && this.CurrentX.sn !== '') {
<             localStorage.setItem('cu_id', this.CurrentX.id.toString());
<             localStorage.setItem('cu_label', this.CurrentX.label);
<             localStorage.setItem('cu_sn', this.CurrentX.sn);
<             localStorage.setItem('cu_pic', this.CurrentX.id.toString());
<             localStorage.setItem('cu_ln', this.CurrentX.login_name);
<             localStorage.setItem('cu_tsn', this.CurrentX.type_sn);
<             window.location.href = '#/pages_a/master';
<           } else {
<             window.alert('对不起，您输入的登录信息不正确！');
<           }
<         }).catch(this.handleError);
<     }
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {AuthLoginAService} from './auth_login_a.service'
> import { XUser } from '../../@xmodel/XUser';
> 
> @Component({
>   selector: 'ngx-auth-login-auth-login-a',
>   styleUrls: ['auth_login_a.scss'],
>   templateUrl: 'auth_login_a.html',
>   providers: [AuthLoginAService],
> 
> })
> 
> export class AuthLoginAComponent implements OnInit {
>   private xs: XUser[];
>   public CurrentX: XUser;
>   public ln: string;
>   public pd: string;
>   constructor(private service: AuthLoginAService) {  }
> 
>   ngOnInit() {  }
> 
>   getLogin() {
>     if (!this.ln || !this.pd) {
>       window.alert('对不起，请不要留空！');
>     } else if (this.ln.trim() === '' || this.pd.trim() === '') {
>       window.alert('对不起，请不要留空！');
>     } else {
>       this.service.getLogin(this.ln, this.pd).then(
>         res => {
>           this.xs = res;
>           this.CurrentX = this.xs[0];
>           // window.alert(this.CurrentXUser.login_name);
>           if (this.CurrentX && this.CurrentX.sn !== '') {
>             localStorage.setItem('cu_id', this.CurrentX.id.toString());
>             localStorage.setItem('cu_label', this.CurrentX.label);
>             localStorage.setItem('cu_sn', this.CurrentX.sn);
>             localStorage.setItem('cu_pic', this.CurrentX.id.toString());
>             localStorage.setItem('cu_ln', this.CurrentX.login_name);
>             localStorage.setItem('cu_tsn', this.CurrentX.type_sn);
>             window.location.href = '#/pages_a/master';
>           } else {
>             window.alert('对不起，您输入的登录信息不正确！');
>           }
>         }).catch(this.handleError);
>     }
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> }
diff -r app/pages/_auth_login/auth_login_a/auth_login_a.html app_bk/pages/_auth_login/auth_login_a/auth_login_a.html
1,26c1,26
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>选品池：管理员登录</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="ln">账号</label>
<             <input type="text" required="required" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
<           </div>
<           <div class="form-group">
<             <label for="pd">密码</label>
<             <input type="password" required="required" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
<           </div>
<           <button type="submit" (click)="getLogin()" class="btn btn-danger">登录</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>选品池：管理员登录</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="ln">账号</label>
>             <input type="text" required="required" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
>           </div>
>           <div class="form-group">
>             <label for="pd">密码</label>
>             <input type="password" required="required" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
>           </div>
>           <button type="submit" (click)="getLogin()" class="btn btn-danger">登录</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
diff -r app/pages/_auth_login/auth_login_a/auth_login_a.scss app_bk/pages/_auth_login/auth_login_a/auth_login_a.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_auth_login/auth_login_a/auth_login_a.service.ts app_bk/pages/_auth_login/auth_login_a/auth_login_a.service.ts
1,51c1,51
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< // import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { XUser } from '../../@xmodel/XUser';
< 
< @Injectable()
< export class AuthLoginAService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getLogin(ln, p): Promise<XUser[]> {
<     const url = '/_s_authes/get_adamiya_login';
<     const params = new HttpParams()
<       .set('ln', ln)
<       .set('p', p);
<     // 默认application/json
<     // return this.httpClient.post(url, {params})
<     //  .toPromise()
<     //  .catch(this.handleError);
<     const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setX(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   setX(data: any): XUser {
<     const x = new XUser();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.login_name = data['login_name'];
<     x.type_sn = data['type_sn'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> // import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { XUser } from '../../@xmodel/XUser';
> 
> @Injectable()
> export class AuthLoginAService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getLogin(ln, p): Promise<XUser[]> {
>     const url = '/_authes/get_adamiya_login';
>     const params = new HttpParams()
>       .set('ln', ln)
>       .set('p', p);
>     // 默认application/json
>     // return this.httpClient.post(url, {params})
>     //  .toPromise()
>     //  .catch(this.handleError);
>     const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listx.push(this.setX(data[i]));
>         }
>         return listx;
>       },
>     ).catch(this.handleError);
>   }
> 
>   setX(data: any): XUser {
>     const x = new XUser();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.login_name = data['login_name'];
>     x.type_sn = data['type_sn'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> }
diff -r app/pages/_auth_login/auth_login_a/index.ts app_bk/pages/_auth_login/auth_login_a/index.ts
1c1
< export * from './auth_login_a.component';
---
> export * from './auth_login_a.component';
diff -r app/pages/_auth_login/auth_login.component.ts app_bk/pages/_auth_login/auth_login.component.ts
1,10c1,10
< import { Component } from '@angular/core';  // 导入angular核心模块
< 
< @Component({    // Component directive 声明组件属于 Component
<     selector: 'ngx-auth-login', // 定义组件在HTML代码中匹配的标签
<     template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
< })
< 
< export class AuthLoginComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
<     constructor() { }
< };
---
> import { Component } from '@angular/core';  // 导入angular核心模块
> 
> @Component({    // Component directive 声明组件属于 Component
>     selector: 'ngx-auth-login', // 定义组件在HTML代码中匹配的标签
>     template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
> })
> 
> export class AuthLoginComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
>     constructor() { }
> };
diff -r app/pages/_auth_login/auth_login.module.ts app_bk/pages/_auth_login/auth_login.module.ts
1,42c1,42
< import { CommonModule } from '@angular/common';
< import { NgModule } from '@angular/core';
< import { ThemeModule } from '../../@theme/theme.module';
< 
< import { AuthLoginComponent } from './auth_login.component'; // 导入刚才新建的模块
< 
< 
< import { AuthLoginUService } from './auth_login_u/auth_login_u.service';
< import { AuthLoginAService } from './auth_login_a/auth_login_a.service';
< 
< import { AuthLoginUComponent } from './auth_login_u';
< import { AuthLoginAComponent } from './auth_login_a';
< 
< import { URegService } from '../_auth_login/u_reg/u_reg.service';
< import { ULogoutComponent } from '../_auth_login/u_logout';
< import { URegComponent } from '../_auth_login/u_reg';
< import { ALogoutComponent } from '../_auth_login/a_logout';
< 
< import { RoutingAuthLogin } from './auth_login.routing';
< 
< @NgModule({
<     imports: [
<       CommonModule,
<       RoutingAuthLogin,
<       ThemeModule,
<     ],
<     declarations: [
<       AuthLoginComponent,
<       AuthLoginAComponent,
<       AuthLoginUComponent,
<       ULogoutComponent,
<       URegComponent,
<       ALogoutComponent,
<     ],
<     providers: [
<       URegService,
<       AuthLoginAService,
<       AuthLoginUService,
<     ],
< })
< 
< export class AuthLoginModule {}
---
> import { CommonModule } from '@angular/common';
> import { NgModule } from '@angular/core';
> import { ThemeModule } from '../../@theme/theme.module';
> 
> import { AuthLoginComponent } from './auth_login.component'; // 导入刚才新建的模块
> 
> 
> import { AuthLoginUService } from './auth_login_u/auth_login_u.service';
> import { AuthLoginAService } from './auth_login_a/auth_login_a.service';
> 
> import { AuthLoginUComponent } from './auth_login_u';
> import { AuthLoginAComponent } from './auth_login_a';
> 
> import { URegService } from '../_auth_login/u_reg/u_reg.service';
> import { ULogoutComponent } from '../_auth_login/u_logout';
> import { URegComponent } from '../_auth_login/u_reg';
> import { ALogoutComponent } from '../_auth_login/a_logout';
> 
> import { RoutingAuthLogin } from './auth_login.routing';
> 
> @NgModule({
>     imports: [
>       CommonModule,
>       RoutingAuthLogin,
>       ThemeModule,
>     ],
>     declarations: [
>       AuthLoginComponent,
>       AuthLoginAComponent,
>       AuthLoginUComponent,
>       ULogoutComponent,
>       URegComponent,
>       ALogoutComponent,
>     ],
>     providers: [
>       URegService,
>       AuthLoginAService,
>       AuthLoginUService,
>     ],
> })
> 
> export class AuthLoginModule {}
diff -r app/pages/_auth_login/auth_login.routing.ts app_bk/pages/_auth_login/auth_login.routing.ts
1,39c1,39
< import { Routes, RouterModule } from '@angular/router';
< 
< import { AuthLoginComponent } from './auth_login.component'; // 导入刚才新建的模块
< 
< import { AuthLoginAComponent } from './auth_login_a'
< import { AuthLoginUComponent } from './auth_login_u'
< import { ULogoutComponent } from './u_logout'
< import { ALogoutComponent } from './a_logout'
< import { URegComponent } from './u_reg';
< 
< const routes: Routes = [
<   {
<     path: '',
<     component: AuthLoginComponent,
<     children: [
<       {
<         path: 'auth_login_a',
<         component: AuthLoginAComponent,
<       },
<       {
<         path: 'auth_login_u',
<         component: AuthLoginUComponent,
<       },
<       {
<         path: 'u_logout',
<         component: ULogoutComponent,
<       },
<       {
<         path: 'a_logout',
<         component: ALogoutComponent,
<       },
<       {
<         path: 'u_reg',
<         component: URegComponent,
<       },
<     ],
<   },
< ];
< export const RoutingAuthLogin = RouterModule.forChild(routes);
---
> import { Routes, RouterModule } from '@angular/router';
> 
> import { AuthLoginComponent } from './auth_login.component'; // 导入刚才新建的模块
> 
> import { AuthLoginAComponent } from './auth_login_a'
> import { AuthLoginUComponent } from './auth_login_u'
> import { ULogoutComponent } from './u_logout'
> import { ALogoutComponent } from './a_logout'
> import { URegComponent } from './u_reg';
> 
> const routes: Routes = [
>   {
>     path: '',
>     component: AuthLoginComponent,
>     children: [
>       {
>         path: 'auth_login_a',
>         component: AuthLoginAComponent,
>       },
>       {
>         path: 'auth_login_u',
>         component: AuthLoginUComponent,
>       },
>       {
>         path: 'u_logout',
>         component: ULogoutComponent,
>       },
>       {
>         path: 'a_logout',
>         component: ALogoutComponent,
>       },
>       {
>         path: 'u_reg',
>         component: URegComponent,
>       },
>     ],
>   },
> ];
> export const RoutingAuthLogin = RouterModule.forChild(routes);
diff -r app/pages/_auth_login/auth_login_u/auth_login_u.component.ts app_bk/pages/_auth_login/auth_login_u/auth_login_u.component.ts
1,52c1,52
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {AuthLoginUService} from './auth_login_u.service'
< import { XUser } from '../../@xmodel/XUser';
< 
< @Component({
<   selector: 'ngx-auth-login-auth-login-u',
<   styleUrls: ['auth_login_u.scss'],
<   templateUrl: 'auth_login_u.html',
<   providers: [AuthLoginUService],
< 
< })
< 
< export class AuthLoginUComponent implements OnInit {
<   private xusers: XUser[];
<   public CurrentXUser: XUser;
<   public ln: string;
<   public pd: string;
<   constructor(private service: AuthLoginUService) {
<   }
<   ngOnInit() {  }
< 
<   getLogin() {
<     if (!this.ln || !this.pd) {
<       window.alert('对不起，请不要留空！');
<     } else if (this.ln.trim() === '' || this.pd.trim() === '') {
<       window.alert('对不起，请不要留空！');
<     } else {
<       this.service.getLogin(this.ln, this.pd).then(
<         res => {
<           this.xusers = res;
<           this.CurrentXUser = this.xusers[0];
<           // window.alert(this.CurrentXUser.login_name);
<           if (this.CurrentXUser && this.CurrentXUser.sn !== '') {
<             localStorage.setItem('cu_id', this.CurrentXUser.id.toString());
<             localStorage.setItem('cu_label', this.CurrentXUser.label);
<             localStorage.setItem('cu_sn', this.CurrentXUser.sn);
<             localStorage.setItem('cu_pic', this.CurrentXUser.id.toString());
<             localStorage.setItem('cu_ln', this.CurrentXUser.login_name);
<             localStorage.setItem('cu_tsn', this.CurrentXUser.type_sn);
<             window.location.href = '#/pages_u/user';
<           } else {
<             window.alert('对不起，您输入的登录信息不正确！');
<           }
<         }).catch(this.handleError);
<     }
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {AuthLoginUService} from './auth_login_u.service'
> import { XUser } from '../../@xmodel/XUser';
> 
> @Component({
>   selector: 'ngx-auth-login-auth-login-u',
>   styleUrls: ['auth_login_u.scss'],
>   templateUrl: 'auth_login_u.html',
>   providers: [AuthLoginUService],
> 
> })
> 
> export class AuthLoginUComponent implements OnInit {
>   private xusers: XUser[];
>   public CurrentXUser: XUser;
>   public ln: string;
>   public pd: string;
>   constructor(private service: AuthLoginUService) {
>   }
>   ngOnInit() {  }
> 
>   getLogin() {
>     if (!this.ln || !this.pd) {
>       window.alert('对不起，请不要留空！');
>     } else if (this.ln.trim() === '' || this.pd.trim() === '') {
>       window.alert('对不起，请不要留空！');
>     } else {
>       this.service.getLogin(this.ln, this.pd).then(
>         res => {
>           this.xusers = res;
>           this.CurrentXUser = this.xusers[0];
>           // window.alert(this.CurrentXUser.login_name);
>           if (this.CurrentXUser && this.CurrentXUser.sn !== '') {
>             localStorage.setItem('cu_id', this.CurrentXUser.id.toString());
>             localStorage.setItem('cu_label', this.CurrentXUser.label);
>             localStorage.setItem('cu_sn', this.CurrentXUser.sn);
>             localStorage.setItem('cu_pic', this.CurrentXUser.id.toString());
>             localStorage.setItem('cu_ln', this.CurrentXUser.login_name);
>             localStorage.setItem('cu_tsn', this.CurrentXUser.type_sn);
>             window.location.href = '#/pages_u/user';
>           } else {
>             window.alert('对不起，您输入的登录信息不正确！');
>           }
>         }).catch(this.handleError);
>     }
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> }
diff -r app/pages/_auth_login/auth_login_u/auth_login_u.html app_bk/pages/_auth_login/auth_login_u/auth_login_u.html
1,25c1,25
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>选品池：用户登录</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="ln">账号</label>
<             <input type="text" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
<           </div>
<           <div class="form-group">
<             <label for="pd">密码</label>
<             <input type="password" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
<           </div>
<           <button type="submit" (click)="getLogin()" class="btn btn-danger">登录</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-3">
<   </div>
< </div>
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>选品池：用户登录</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="ln">账号</label>
>             <input type="text" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
>           </div>
>           <div class="form-group">
>             <label for="pd">密码</label>
>             <input type="password" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
>           </div>
>           <button type="submit" (click)="getLogin()" class="btn btn-danger">登录</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
>   <div class="col-md-3">
>   </div>
> </div>
diff -r app/pages/_auth_login/auth_login_u/auth_login_u.scss app_bk/pages/_auth_login/auth_login_u/auth_login_u.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_auth_login/auth_login_u/auth_login_u.service.ts app_bk/pages/_auth_login/auth_login_u/auth_login_u.service.ts
1,51c1,51
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { XUser } from '../../@xmodel/XUser';
< 
< @Injectable()
< export class AuthLoginUService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getLogin(ln, p): Promise<XUser[]> {
<     const url = '/_s_authes/get_user_login';
<     const params = new HttpParams()
<       .set('ln', ln)
<       .set('p', p);
<     // 默认application/json
<     // return this.httpClient.post(url, {params})
<     //  .toPromise()
<     //  .catch(this.handleError);
<     const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
<     const listxu = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listxu.push(this.setXUser(data[i]));
<         }
<         return listxu;
<       },
<     ).catch(this.handleError);
<   }
< 
<   private setXUser(data: any): XUser {
<     const xu = new XUser();
<     xu.id = data['id'];
<     xu.sn = data['sn'];
<     xu.label = data['label'];
<     xu.login_name = data['login_name'];
<     xu.type_sn = data['type_sn'];
<     return xu;
<   }
< 
<   private handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { XUser } from '../../@xmodel/XUser';
> 
> @Injectable()
> export class AuthLoginUService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getLogin(ln, p): Promise<XUser[]> {
>     const url = '/_authes/get_user_login';
>     const params = new HttpParams()
>       .set('ln', ln)
>       .set('p', p);
>     // 默认application/json
>     // return this.httpClient.post(url, {params})
>     //  .toPromise()
>     //  .catch(this.handleError);
>     const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
>     const listxu = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listxu.push(this.setXUser(data[i]));
>         }
>         return listxu;
>       },
>     ).catch(this.handleError);
>   }
> 
>   private setXUser(data: any): XUser {
>     const xu = new XUser();
>     xu.id = data['id'];
>     xu.sn = data['sn'];
>     xu.label = data['label'];
>     xu.login_name = data['login_name'];
>     xu.type_sn = data['type_sn'];
>     return xu;
>   }
> 
>   private handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> }
diff -r app/pages/_auth_login/auth_login_u/index.ts app_bk/pages/_auth_login/auth_login_u/index.ts
1c1
< export * from './auth_login_u.component';
---
> export * from './auth_login_u.component';
diff -r app/pages/_auth_login/u_logout/index.ts app_bk/pages/_auth_login/u_logout/index.ts
1c1
< export * from './u_logout.component';
---
> export * from './u_logout.component';
diff -r app/pages/_auth_login/u_logout/u_logout.component.ts app_bk/pages/_auth_login/u_logout/u_logout.component.ts
1,30c1,30
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< 
< @Component({
<   selector: 'ngx-authes-u-logout',
<   styleUrls: ['u_logout.scss'],
<   templateUrl: 'u_logout.html',
< 
< })
< export class ULogoutComponent implements OnInit {
< 
<   constructor() {
<   }
< 
<   ngOnInit() {
<     const uid = localStorage.getItem('cu_id');
<     // if (uid && uid !== '')
<     //   window.location.reload();
<     localStorage.setItem('cu_id', '');
<     localStorage.setItem('cu_label', '');
<     localStorage.setItem('cu_sn', '');
<     localStorage.setItem('cu_pic', '');
<     localStorage.setItem('cu_ln', '');
<     localStorage.setItem('cu_type', 'user');
<   }
< 
<   reLogin() {
<     window.location.href = '#/auth_u/_auth_login/auth_login_u';
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> 
> @Component({
>   selector: 'ngx-authes-u-logout',
>   styleUrls: ['u_logout.scss'],
>   templateUrl: 'u_logout.html',
> 
> })
> export class ULogoutComponent implements OnInit {
> 
>   constructor() {
>   }
> 
>   ngOnInit() {
>     const uid = localStorage.getItem('cu_id');
>     // if (uid && uid !== '')
>     //   window.location.reload();
>     localStorage.setItem('cu_id', '');
>     localStorage.setItem('cu_label', '');
>     localStorage.setItem('cu_sn', '');
>     localStorage.setItem('cu_pic', '');
>     localStorage.setItem('cu_ln', '');
>     localStorage.setItem('cu_type', 'user');
>   }
> 
>   reLogin() {
>     window.location.href = '#/auth_u/_auth_login/auth_login_u';
>   }
> }
diff -r app/pages/_auth_login/u_logout/u_logout.html app_bk/pages/_auth_login/u_logout/u_logout.html
1,19c1,19
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>尊敬的用户，您已注销</nb-card-header>
<       <nb-card-body>
<         <form>
<           <button type="submit" class="btn btn-danger" (click)="reLogin()">重新登录</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>尊敬的用户，您已注销</nb-card-header>
>       <nb-card-body>
>         <form>
>           <button type="submit" class="btn btn-danger" (click)="reLogin()">重新登录</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
> 
diff -r app/pages/_auth_login/u_logout/u_logout.scss app_bk/pages/_auth_login/u_logout/u_logout.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_auth_login/u_reg/index.ts app_bk/pages/_auth_login/u_reg/index.ts
1c1
< export * from './u_reg.component';
---
> export * from './u_reg.component';
diff -r app/pages/_auth_login/u_reg/u_reg.component.ts app_bk/pages/_auth_login/u_reg/u_reg.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {URegService} from './u_reg.service'
< 
< @Component({
<   selector: 'ngx-authes-u-reg',
<   styleUrls: ['u_reg.scss'],
<   templateUrl: 'u_reg.html',
<   providers: [URegService],
< 
< })
< export class URegComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: URegService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {URegService} from './u_reg.service'
> 
> @Component({
>   selector: 'ngx-authes-u-reg',
>   styleUrls: ['u_reg.scss'],
>   templateUrl: 'u_reg.html',
>   providers: [URegService],
> 
> })
> export class URegComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: URegService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_auth_login/u_reg/u_reg.html app_bk/pages/_auth_login/u_reg/u_reg.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_auth_login/u_reg/u_reg.scss app_bk/pages/_auth_login/u_reg/u_reg.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_auth_login/u_reg/u_reg.service.ts app_bk/pages/_auth_login/u_reg/u_reg.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class URegService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_s_authes/get_user_reg').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class URegService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_authes/get_user_reg').map((res) => res.json());
>     }
> }
diff -r app/pages/_auth_u.component.ts app_bk/pages/_auth_u.component.ts
1,18c1,18
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-auth-u',
<   template: `
<     <ngx-psp-auth-layout>
<       <router-outlet></router-outlet>
<     </ngx-psp-auth-layout>
<   `,
< })
< export class AuthUComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     localStorage.setItem('cu_type', 'user');
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-auth-u',
>   template: `
>     <ngx-psp-auth-layout>
>       <router-outlet></router-outlet>
>     </ngx-psp-auth-layout>
>   `,
> })
> export class AuthUComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     localStorage.setItem('cu_type', 'user');
>   }
> }
diff -r app/pages/_auth_u.module.ts app_bk/pages/_auth_u.module.ts
1,24c1,24
< import {NgModule, OnInit} from '@angular/core';
< 
< import { AuthUComponent } from './_auth_u.component';
< import { AuthURoutingModule } from './_auth_u-routing.module';
< import { LoginUModule } from './_login_u/login_u.module';
< import { ThemeModule } from '../@theme/theme.module';
< import { MiscellaneousModule } from './miscellaneous/miscellaneous.module';
< 
< const AUTHU_COMPONENTS = [
<   AuthUComponent,
< ];
< 
< @NgModule({
<   imports: [
<     AuthURoutingModule,
<     ThemeModule,
<     LoginUModule,
<     MiscellaneousModule,
<   ],
<   declarations: [
<     ...AUTHU_COMPONENTS,
<   ],
< })
< export class AuthUModule {}
---
> import {NgModule, OnInit} from '@angular/core';
> 
> import { AuthUComponent } from './_auth_u.component';
> import { AuthURoutingModule } from './_auth_u-routing.module';
> import { LoginUModule } from './_login_u/login_u.module';
> import { ThemeModule } from '../@theme/theme.module';
> import { MiscellaneousModule } from './miscellaneous/miscellaneous.module';
> 
> const AUTHU_COMPONENTS = [
>   AuthUComponent,
> ];
> 
> @NgModule({
>   imports: [
>     AuthURoutingModule,
>     ThemeModule,
>     LoginUModule,
>     MiscellaneousModule,
>   ],
>   declarations: [
>     ...AUTHU_COMPONENTS,
>   ],
> })
> export class AuthUModule {}
diff -r app/pages/_login_a/login_a.component.ts app_bk/pages/_login_a/login_a.component.ts
1,36c1,36
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-login-a',
<   styleUrls: ['./login_a.scss'],
<   templateUrl: './login_a.html',
< })
< export class LoginAComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     this.go();
<     // window.setTimeout('go()', 2000);
<   }
< 
<   go() {
<     const cuid = localStorage.getItem('cu_id');
<     const culabel = localStorage.getItem('cu_label');
<     const cutype = localStorage.getItem('cu_type');
<     const cusn = localStorage.getItem('cu_sn');
<     const cupic = localStorage.getItem('cu_pic');
<     const culn = localStorage.getItem('cu_ln');
<     const cutsn = localStorage.getItem('cu_tsn');
<     // window.alert(cutype);
<     if (cutype && cutype !== '') {
<       if (cuid && cuid !== '') {
<         window.location.href = '#/pages_a/master';
<       } else {
<         window.location.href = '#/auth_a/_auth_login/auth_login_a';
<       }
<     } else {
<       window.location.href = '#/auth_a/_auth_login/auth_login_a';
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-login-a',
>   styleUrls: ['./login_a.scss'],
>   templateUrl: './login_a.html',
> })
> export class LoginAComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     this.go();
>     // window.setTimeout('go()', 2000);
>   }
> 
>   go() {
>     const cuid = localStorage.getItem('cu_id');
>     const culabel = localStorage.getItem('cu_label');
>     const cutype = localStorage.getItem('cu_type');
>     const cusn = localStorage.getItem('cu_sn');
>     const cupic = localStorage.getItem('cu_pic');
>     const culn = localStorage.getItem('cu_ln');
>     const cutsn = localStorage.getItem('cu_tsn');
>     // window.alert(cutype);
>     if (cutype && cutype !== '') {
>       if (cuid && cuid !== '') {
>         window.location.href = '#/pages_a/master';
>       } else {
>         window.location.href = '#/auth_a/_auth_login/auth_login_a';
>       }
>     } else {
>       window.location.href = '#/auth_a/_auth_login/auth_login_a';
>     }
>   }
> }
diff -r app/pages/_login_a/login_a.module.ts app_bk/pages/_login_a/login_a.module.ts
1,19c1,19
< import {NgModule, OnInit} from '@angular/core';
< import { CommonModule } from '@angular/common';
< 
< import { ThemeModule } from '../../@theme/theme.module';
< import { LoginAComponent } from './login_a.component';
< 
< @NgModule({
<   imports: [
<     CommonModule,
<     ThemeModule,
<   ],
<   declarations: [
<     LoginAComponent,
<   ],
<   providers: [
<   ],
< })
< export class LoginAModule {
< }
---
> import {NgModule, OnInit} from '@angular/core';
> import { CommonModule } from '@angular/common';
> 
> import { ThemeModule } from '../../@theme/theme.module';
> import { LoginAComponent } from './login_a.component';
> 
> @NgModule({
>   imports: [
>     CommonModule,
>     ThemeModule,
>   ],
>   declarations: [
>     LoginAComponent,
>   ],
>   providers: [
>   ],
> })
> export class LoginAModule {
> }
diff -r app/pages/_login_u/login_u.component.ts app_bk/pages/_login_u/login_u.component.ts
1,36c1,36
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-login-u',
<   styleUrls: ['./login_u.scss'],
<   templateUrl: './login_u.html',
< })
< export class LoginUComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     this.go();
<     // window.setTimeout('go()', 2000);
<   }
< 
<   go() {
<     const cuid = localStorage.getItem('cu_id');
<     const culabel = localStorage.getItem('cu_label');
<     const cutype = localStorage.getItem('cu_type');
<     const cusn = localStorage.getItem('cu_sn');
<     const cupic = localStorage.getItem('cu_pic');
<     const culn = localStorage.getItem('cu_ln');
<     const cutsn = localStorage.getItem('cu_tsn');
<     // window.alert(cutype);
<     if (cutype && cutype !== '') {
<       if (cuid && cuid !== '') {
<         window.location.href = '#/pages_u/user';
<       }else {
<         window.location.href = '#/auth_u/_auth_login/auth_login_u';
<       }
<     }else {
<       window.location.href = '#/auth_u/_auth_login/auth_login_u';
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-login-u',
>   styleUrls: ['./login_u.scss'],
>   templateUrl: './login_u.html',
> })
> export class LoginUComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     this.go();
>     // window.setTimeout('go()', 2000);
>   }
> 
>   go() {
>     const cuid = localStorage.getItem('cu_id');
>     const culabel = localStorage.getItem('cu_label');
>     const cutype = localStorage.getItem('cu_type');
>     const cusn = localStorage.getItem('cu_sn');
>     const cupic = localStorage.getItem('cu_pic');
>     const culn = localStorage.getItem('cu_ln');
>     const cutsn = localStorage.getItem('cu_tsn');
>     // window.alert(cutype);
>     if (cutype && cutype !== '') {
>       if (cuid && cuid !== '') {
>         window.location.href = '#/pages_u/user';
>       }else {
>         window.location.href = '#/auth_u/_auth_login/auth_login_u';
>       }
>     }else {
>       window.location.href = '#/auth_u/_auth_login/auth_login_u';
>     }
>   }
> }
diff -r app/pages/_login_u/login_u.module.ts app_bk/pages/_login_u/login_u.module.ts
1,19c1,19
< import {NgModule, OnInit} from '@angular/core';
< import { CommonModule } from '@angular/common';
< 
< import { ThemeModule } from '../../@theme/theme.module';
< import { LoginUComponent } from './login_u.component';
< 
< @NgModule({
<   imports: [
<     CommonModule,
<     ThemeModule,
<   ],
<   declarations: [
<     LoginUComponent,
<   ],
<   providers: [
<   ],
< })
< export class LoginUModule {
< }
---
> import {NgModule, OnInit} from '@angular/core';
> import { CommonModule } from '@angular/common';
> 
> import { ThemeModule } from '../../@theme/theme.module';
> import { LoginUComponent } from './login_u.component';
> 
> @NgModule({
>   imports: [
>     CommonModule,
>     ThemeModule,
>   ],
>   declarations: [
>     LoginUComponent,
>   ],
>   providers: [
>   ],
> })
> export class LoginUModule {
> }
diff -r app/pages/_master/master.component.ts app_bk/pages/_master/master.component.ts
1,41c1,41
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-master',
<   styleUrls: ['./master.scss'],
<   templateUrl: './master.html',
< })
< export class MasterComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     const cuid = localStorage.getItem('cu_id');
<     const culabel = localStorage.getItem('cu_label');
<     const cutype = localStorage.getItem('cu_type');
<     const cusn = localStorage.getItem('cu_sn');
<     const cupic = localStorage.getItem('cu_pic');
<     const culn = localStorage.getItem('cu_ln');
<     const cutsn = localStorage.getItem('cu_tsn');
<     // window.alert(cutype);
<     if (cutsn && cutsn !== '' && cutsn !== 'master' && cutsn !== 'sa') {
<       window.alert('对不起，您的角色不正确！请重新登录！');
<       window.location.href = '#/auth_a/_auth_login/auth_login_a';
<     } else {
<       if (cutype && cutype.trim() !== '') {
<         if (cuid && cuid.trim() !== '') {
<           // window.alert(cuid);
<         } else {
<           if (cutype === 'adamiya') {
<             window.location.href = '#/auth_a/_auth_login/auth_login_a';
<           } else {
<             window.location.href = '#/auth_u/_auth_login/auth_login_u';
<           }
<         }
<       } else {
<         window.location.href = '#/auth_a/_auth_login/auth_login_a';
<       }
<     }
<     // window.alert(cul);
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-master',
>   styleUrls: ['./master.scss'],
>   templateUrl: './master.html',
> })
> export class MasterComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     const cuid = localStorage.getItem('cu_id');
>     const culabel = localStorage.getItem('cu_label');
>     const cutype = localStorage.getItem('cu_type');
>     const cusn = localStorage.getItem('cu_sn');
>     const cupic = localStorage.getItem('cu_pic');
>     const culn = localStorage.getItem('cu_ln');
>     const cutsn = localStorage.getItem('cu_tsn');
>     // window.alert(cutype);
>     if (cutsn && cutsn !== '' && cutsn !== 'master' && cutsn !== 'sa') {
>       window.alert('对不起，您的角色不正确！请重新登录！');
>       window.location.href = '#/auth_a/_auth_login/auth_login_a';
>     } else {
>       if (cutype && cutype.trim() !== '') {
>         if (cuid && cuid.trim() !== '') {
>           // window.alert(cuid);
>         } else {
>           if (cutype === 'adamiya') {
>             window.location.href = '#/auth_a/_auth_login/auth_login_a';
>           } else {
>             window.location.href = '#/auth_u/_auth_login/auth_login_u';
>           }
>         }
>       } else {
>         window.location.href = '#/auth_a/_auth_login/auth_login_a';
>       }
>     }
>     // window.alert(cul);
>   }
> }
diff -r app/pages/_master/master.module.ts app_bk/pages/_master/master.module.ts
1,50c1,50
< import {NgModule, OnInit} from '@angular/core';
< 
< import { NgxEchartsModule } from 'ngx-echarts';
< 
< import { ThemeModule } from '../../@theme/theme.module';
< import { MasterComponent } from './master.component';
< import { StatusCardComponent } from './status-card/status-card.component';
< import { ContactsComponent } from './contacts/contacts.component';
< import { RoomsComponent } from './rooms/rooms.component';
< import { RoomSelectorComponent } from './rooms/room-selector/room-selector.component';
< import { TemperatureComponent } from './temperature/temperature.component';
< import { TemperatureDraggerComponent } from './temperature/temperature-dragger/temperature-dragger.component';
< import { TeamComponent } from './team/team.component';
< import { KittenComponent } from './kitten/kitten.component';
< import { SecurityCamerasComponent } from './security-cameras/security-cameras.component';
< import { ElectricityComponent } from './electricity/electricity.component';
< import { ElectricityChartComponent } from './electricity/electricity-chart/electricity-chart.component';
< import { WeatherComponent } from './weather/weather.component';
< import { SolarComponent } from './solar/solar.component';
< import { PlayerComponent } from './rooms/player/player.component';
< import { TrafficComponent } from './traffic/traffic.component';
< import { TrafficChartComponent } from './traffic/traffic-chart.component';
< 
< @NgModule({
<   imports: [
<     ThemeModule,
<     NgxEchartsModule,
<   ],
<   declarations: [
<     MasterComponent,
<     StatusCardComponent,
<     TemperatureDraggerComponent,
<     ContactsComponent,
<     RoomSelectorComponent,
<     TemperatureComponent,
<     RoomsComponent,
<     TeamComponent,
<     KittenComponent,
<     SecurityCamerasComponent,
<     ElectricityComponent,
<     ElectricityChartComponent,
<     WeatherComponent,
<     PlayerComponent,
<     SolarComponent,
<     TrafficComponent,
<     TrafficChartComponent,
<   ],
< })
< export class MasterModule {
< }
---
> import {NgModule, OnInit} from '@angular/core';
> 
> import { NgxEchartsModule } from 'ngx-echarts';
> 
> import { ThemeModule } from '../../@theme/theme.module';
> import { MasterComponent } from './master.component';
> import { StatusCardComponent } from './status-card/status-card.component';
> import { ContactsComponent } from './contacts/contacts.component';
> import { RoomsComponent } from './rooms/rooms.component';
> import { RoomSelectorComponent } from './rooms/room-selector/room-selector.component';
> import { TemperatureComponent } from './temperature/temperature.component';
> import { TemperatureDraggerComponent } from './temperature/temperature-dragger/temperature-dragger.component';
> import { TeamComponent } from './team/team.component';
> import { KittenComponent } from './kitten/kitten.component';
> import { SecurityCamerasComponent } from './security-cameras/security-cameras.component';
> import { ElectricityComponent } from './electricity/electricity.component';
> import { ElectricityChartComponent } from './electricity/electricity-chart/electricity-chart.component';
> import { WeatherComponent } from './weather/weather.component';
> import { SolarComponent } from './solar/solar.component';
> import { PlayerComponent } from './rooms/player/player.component';
> import { TrafficComponent } from './traffic/traffic.component';
> import { TrafficChartComponent } from './traffic/traffic-chart.component';
> 
> @NgModule({
>   imports: [
>     ThemeModule,
>     NgxEchartsModule,
>   ],
>   declarations: [
>     MasterComponent,
>     StatusCardComponent,
>     TemperatureDraggerComponent,
>     ContactsComponent,
>     RoomSelectorComponent,
>     TemperatureComponent,
>     RoomsComponent,
>     TeamComponent,
>     KittenComponent,
>     SecurityCamerasComponent,
>     ElectricityComponent,
>     ElectricityChartComponent,
>     WeatherComponent,
>     PlayerComponent,
>     SolarComponent,
>     TrafficComponent,
>     TrafficChartComponent,
>   ],
> })
> export class MasterModule {
> }
diff -r app/pages/pages_a-menu.ts app_bk/pages/pages_a-menu.ts
96a97,108
>         title: '综合',
>         link: '/pages_a/_adamiya/sta_by_all',
>       },
>       {
>         title: '按时间',
>         link: '/pages_a/_adamiya/sta_by_date',
>       },
>       {
>         title: '按用户',
>         link: '/pages_a/_adamiya/sta_by_user',
>       },
>       {
102a115,126
>       },
>       {
>         title: '按行业',
>         link: '/pages_a/_adamiya/sta_by_industry',
>       },
>       {
>         title: '按场景',
>         link: '/pages_a/_adamiya/sta_by_scene',
>       },
>       {
>         title: '按收藏',
>         link: '/pages_a/_adamiya/sta_by_favor',
diff -r app/pages/_share/enterprise_detail/enterprise_detail.component.ts app_bk/pages/_share/enterprise_detail/enterprise_detail.component.ts
1,393c1,393
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {EnterpriseDetailService} from './enterprise_detail.service'
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< import {ActivatedRoute} from '@angular/router';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-share-enterprise-detail',
<   styleUrls: ['enterprise_detail.scss'],
<   templateUrl: 'enterprise_detail.html',
<   providers: [EnterpriseDetailService],
< 
< })
< export class EnterpriseDetailComponent implements OnInit {
<   private sn: string;
<   public xes: XEnterprise;
<   public CurrentX: XEnterprise;
<   settingsProject = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/enterprise_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsProduct = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/enterprise_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsUserContact = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsUserLenovo = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsFile = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsScene = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       Actions: {
<         title: '选择场景',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsIndustry = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       Actions: {
<         title: '选择行业',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSourceFile: Observable<any>;
<   dataSetFile: Array<any> = [];
<   dataSourceProject: Observable<any>;
<   dataSetProject: Array<any> = [];
<   dataSourceProduct: Observable<any>;
<   dataSetProduct: Array<any> = [];
<   dataSourceUserLenovo: Observable<any>;
<   dataSetUserLenovo: Array<any> = [];
<   dataSourceUserContact: Observable<any>;
<   dataSetUserContact: Array<any> = [];
<   dataSourceIndustry: Observable<any>;
<   dataSetIndustry: Array<any> = [];
<   dataSourceScene: Observable<any>;
<   dataSetScene: Array<any> = [];
< 
<   constructor(private service: EnterpriseDetailService, public route: ActivatedRoute) {
<     this.sn = this.route.snapshot.params['sn'];
<     this.getD();
<     this.dataSourceIndustry = this.service.getDIndustry(this.sn);
<     this.dataSourceScene = this.service.getDScene(this.sn);
<     this.dataSourceFile = this.service.getDFile(this.sn);
<     this.dataSourceProject = this.service.getDProject(this.sn);
<     this.dataSourceProduct = this.service.getDProduct(this.sn);
<     this.dataSourceUserContact = this.service.getDUserContact(this.sn);
<     this.dataSourceUserLenovo = this.service.getDUserLenovo(this.sn);
<   }
< 
<   getD() {
<     this.service.getD(this.sn).then(
<       res => {
<         this.xes = res;
<         this.CurrentX = this.xes[0];
<         if (this.CurrentX && this.CurrentX.sn !== '') {
<         }else {
<           window.alert('对不起，您查找的信息不存在！');
<         }
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   ngOnInit() {
<     this.dataSourceIndustry.subscribe(
<       (data) => this.dataSetIndustry = data,
<     );
<     this.dataSourceScene.subscribe(
<       (data) => this.dataSetScene = data,
<     );
<     this.dataSourceFile.subscribe(
<       (data) => this.dataSetFile = data,
<     );
<     this.dataSourceUserLenovo.subscribe(
<       (data) => this.dataSetUserLenovo = data,
<     );
<     this.dataSourceUserContact.subscribe(
<       (data) => this.dataSetUserContact = data,
<     );
<     this.dataSourceProduct.subscribe(
<       (data) => this.dataSetProduct = data,
<     );
<     this.dataSourceProject.subscribe(
<       (data) => this.dataSetProject = data,
<     );
<   }
< 
<   backD() {
<     window.location.href = '#/pages_a/_s_adamiya/all_enterprise_list';
<   }
< 
<   updateD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (this.CurrentX.label.trim() !== '') {
<       this.service.updateD(this.CurrentX);
<       window.alert('已修改成功！');
<     }else {
<       window.alert('对不起，请输入正确的信息！')
<     }
<   }
< 
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {EnterpriseDetailService} from './enterprise_detail.service'
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> import {ActivatedRoute} from '@angular/router';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-enterprise-detail',
>   styleUrls: ['enterprise_detail.scss'],
>   templateUrl: 'enterprise_detail.html',
>   providers: [EnterpriseDetailService],
> 
> })
> export class EnterpriseDetailComponent implements OnInit {
>   private sn: string;
>   public xes: XEnterprise;
>   public CurrentX: XEnterprise;
>   settingsProject = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsProduct = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsUserContact = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsUserLenovo = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsFile = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsScene = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择场景',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsIndustry = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择行业',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSourceFile: Observable<any>;
>   dataSetFile: Array<any> = [];
>   dataSourceProject: Observable<any>;
>   dataSetProject: Array<any> = [];
>   dataSourceProduct: Observable<any>;
>   dataSetProduct: Array<any> = [];
>   dataSourceUserLenovo: Observable<any>;
>   dataSetUserLenovo: Array<any> = [];
>   dataSourceUserContact: Observable<any>;
>   dataSetUserContact: Array<any> = [];
>   dataSourceIndustry: Observable<any>;
>   dataSetIndustry: Array<any> = [];
>   dataSourceScene: Observable<any>;
>   dataSetScene: Array<any> = [];
> 
>   constructor(private service: EnterpriseDetailService, public route: ActivatedRoute) {
>     this.sn = this.route.snapshot.params['sn'];
>     this.getD();
>     this.dataSourceIndustry = this.service.getDIndustry(this.sn);
>     this.dataSourceScene = this.service.getDScene(this.sn);
>     this.dataSourceFile = this.service.getDFile(this.sn);
>     this.dataSourceProject = this.service.getDProject(this.sn);
>     this.dataSourceProduct = this.service.getDProduct(this.sn);
>     this.dataSourceUserContact = this.service.getDUserContact(this.sn);
>     this.dataSourceUserLenovo = this.service.getDUserLenovo(this.sn);
>   }
> 
>   getD() {
>     this.service.getD(this.sn).then(
>       res => {
>         this.xes = res;
>         this.CurrentX = this.xes[0];
>         if (this.CurrentX && this.CurrentX.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   ngOnInit() {
>     this.dataSourceIndustry.subscribe(
>       (data) => this.dataSetIndustry = data,
>     );
>     this.dataSourceScene.subscribe(
>       (data) => this.dataSetScene = data,
>     );
>     this.dataSourceFile.subscribe(
>       (data) => this.dataSetFile = data,
>     );
>     this.dataSourceUserLenovo.subscribe(
>       (data) => this.dataSetUserLenovo = data,
>     );
>     this.dataSourceUserContact.subscribe(
>       (data) => this.dataSetUserContact = data,
>     );
>     this.dataSourceProduct.subscribe(
>       (data) => this.dataSetProduct = data,
>     );
>     this.dataSourceProject.subscribe(
>       (data) => this.dataSetProject = data,
>     );
>   }
> 
>   backD() {
>     window.location.href = '#/pages_a/_adamiya/all_enterprise_list';
>   }
> 
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentX.label.trim() !== '') {
>       this.service.updateD(this.CurrentX);
>       window.alert('已修改成功！');
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> 
> }
diff -r app/pages/_share/enterprise_detail/enterprise_detail.html app_bk/pages/_share/enterprise_detail/enterprise_detail.html
1,75c1,75
< <div class="row">
<   <div class="col-md-10">
<     <nb-tabset fullWidth>
<       <nb-tab tabTitle="企业基本信息">
<         <div class="row">
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="label">名称</label>
<               <input type="text" readonly="readonly" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_cn_uid">统一信用代码</label>
<               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_reg_capital">注册资本</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_setup_dt">设立日期</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_address">地址</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_tel">电话</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
<             </div>
<           </div>
<         </div>
<       </nb-tab>
<       <nb-tab tabTitle="联系人">
<         <span>Content #2</span>
<       </nb-tab>
<       <nb-tab tabTitle="财务信息">
<         <span>Content #13</span>
<       </nb-tab>
<       <nb-tab tabTitle="项目信息">
<         <span>Content #33</span>
<       </nb-tab>
<       <nb-tab tabTitle="产品信息">
<         <span>Content #34</span>
<       </nb-tab>
<       <nb-tab tabTitle="附件信息">
<         <span>Content #35</span>
<       </nb-tab>
<       <nb-tab tabTitle="其他信息">
<         <span>Content #35</span>
<       </nb-tab>
<     </nb-tabset>
< 
<     <div class="col-md-12 col-lg-12">
<       <button class="btn btn-success">返回列表</button>
<     </div>
< 
<   </div>
< 
<   <div class="col-md-2">aa
<   </div>
< 
< 
< </div>
< 
---
> <div class="row">
>   <div class="col-md-10">
>     <nb-tabset fullWidth>
>       <nb-tab tabTitle="企业基本信息">
>         <div class="row">
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="label">名称</label>
>               <input type="text" readonly="readonly" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_cn_uid">统一信用代码</label>
>               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_reg_capital">注册资本</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_setup_dt">设立日期</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_address">地址</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_tel">电话</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
>             </div>
>           </div>
>         </div>
>       </nb-tab>
>       <nb-tab tabTitle="联系人">
>         <span>Content #2</span>
>       </nb-tab>
>       <nb-tab tabTitle="财务信息">
>         <span>Content #13</span>
>       </nb-tab>
>       <nb-tab tabTitle="项目信息">
>         <span>Content #33</span>
>       </nb-tab>
>       <nb-tab tabTitle="产品信息">
>         <span>Content #34</span>
>       </nb-tab>
>       <nb-tab tabTitle="附件信息">
>         <span>Content #35</span>
>       </nb-tab>
>       <nb-tab tabTitle="其他信息">
>         <span>Content #35</span>
>       </nb-tab>
>     </nb-tabset>
> 
>     <div class="col-md-12 col-lg-12">
>       <button class="btn btn-success">返回列表</button>
>     </div>
> 
>   </div>
> 
>   <div class="col-md-2">aa
>   </div>
> 
> 
> </div>
> 
diff -r app/pages/_share/enterprise_detail/enterprise_detail.scss app_bk/pages/_share/enterprise_detail/enterprise_detail.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/enterprise_detail/enterprise_detail.service.ts app_bk/pages/_share/enterprise_detail/enterprise_detail.service.ts
1,77c1,77
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsE = new URLSearchParams();
< 
< @Injectable()
< export class EnterpriseDetailService {
<   constructor(private http: Http) {
<   };
< 
<   getD(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_detail';
<     return this.http.post(url, paramsE, options).toPromise().then(
<       res => res.json() as XEnterprise).catch(this.handleError);
<   }
< 
<   getDIndustry(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_industry_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDScene(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_scene_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDUserContact(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_contact_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDUserLenovo(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_lenovo_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDProject(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_project_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDProduct(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_product_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDFile(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_file_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   private handleError(error: any): Promise<any> {
<     window.alert('对不起，' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   updateD(xdata) {
<     const url = '/_s_share/edit_enterprise_detail';
<     this.http.post(url, xdata, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsE = new URLSearchParams();
> 
> @Injectable()
> export class EnterpriseDetailService {
>   constructor(private http: Http) {
>   };
> 
>   getD(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_detail';
>     return this.http.post(url, paramsE, options).toPromise().then(
>       res => res.json() as XEnterprise).catch(this.handleError);
>   }
> 
>   getDIndustry(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_industry_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDScene(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_scene_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserContact(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_contact_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserLenovo(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_lenovo_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProject(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_project_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProduct(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_product_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDFile(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_file_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('对不起，' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   updateD(xdata) {
>     const url = '/_share/edit_enterprise_detail';
>     this.http.post(url, xdata, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/enterprise_detail/index.ts app_bk/pages/_share/enterprise_detail/index.ts
1c1
< export * from './enterprise_detail.component';
---
> export * from './enterprise_detail.component';
diff -r app/pages/_share/enterprise_edit/enterprise_edit.component.ts app_bk/pages/_share/enterprise_edit/enterprise_edit.component.ts
1,450c1,450
< import {Component, OnInit} from '@angular/core';
< import {EnterpriseEditService} from './enterprise_edit.service';
< import {ActivatedRoute} from '@angular/router';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< import { XKV } from '../../@xmodel/XKV';
< import { XIndustry } from '../../@xmodel/XIndustry';
< import { XScene } from '../../@xmodel/XScene';
< 
< @Component({
<   selector: 'ngx-share-enterprise-edit',
<   styleUrls: ['enterprise_edit.scss'],
<   templateUrl: 'enterprise_edit.html',
<   providers: [EnterpriseEditService],
< 
< })
< export class EnterpriseEditComponent implements OnInit {
<   private sn: string;
<   public lastYear: number;
<   public thisYear: number;
<   public CurrentX: XEnterprise;
<   settingsProject = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsProduct = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsUserContact = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsUserLenovo = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsFile = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   xsEnterprise: XEnterprise[];
<   xsELevel: XKV[];
<   xsEType: XKV[];
<   xsEStatus: XKV[];
<   xsEClass: XKV[];
< 
<   xsScene: XScene[];
<   xsSceneNA: XScene[];
<   settingsScene = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '已选场景',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
<   settingsSceneNA = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '待选场景',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
< 
<   xsIndustry: XIndustry[];
<   xsIndustryNA: XIndustry[];
<   settingsIndustry = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '已选行业',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
<   settingsIndustryNA = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '待选行业',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
< 
<   constructor(private service: EnterpriseEditService, public route: ActivatedRoute) {
<     const dateObj = new Date();
<     this.thisYear = dateObj.getFullYear();
<     this.lastYear = dateObj.getFullYear() - 1;
<     this.sn = this.route.snapshot.params['sn'];
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   ngOnInit() {
<     this.service.getDELevel().then(
<       res => {
<         this.xsELevel = res;
<       }).catch(this.handleError);
<     this.service.getDEType().then(
<       res => {
<         this.xsEType = res;
<       }).catch(this.handleError);
<     this.service.getDEStatus().then(
<       res => {
<         this.xsEStatus = res;
<       }).catch(this.handleError);
<     this.service.getD(this.sn).then(
<       res => {
<         this.xsEnterprise = res;
<         this.CurrentX = this.xsEnterprise[0];
<       }).catch(this.handleError);
<     this.service.getDIndustry(this.sn).then(
<       res => {
<         this.xsIndustry = res;
<       }).catch(this.handleError);
<     this.service.getDScene(this.sn).then(
<       res => {
<         this.xsScene = res;
<       }).catch(this.handleError);
<     this.service.getDIndustryNA(this.sn).then(
<       res => {
<         this.xsIndustryNA = res;
<       }).catch(this.handleError);
<     this.service.getDSceneNA(this.sn).then(
<       res => {
<         this.xsSceneNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onSUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsScene = this.xsScene.filter(x => x.sn !== r.sn);
<     this.service.deleteScene(this.sn, r.sn).then(
<       res => {
<         this.xsSceneNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onSNAUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsSceneNA = this.xsSceneNA.filter(x => x.sn !== r.sn);
<     this.service.addScene(this.sn, r.sn).then(
<       res => {
<         this.xsScene = res;
<       }).catch(this.handleError);
<   }
< 
<   onIUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsIndustry = this.xsIndustry.filter(x => x.sn !== r.sn);
<     this.service.deleteIndustry(this.sn, r.sn).then(
<       res => {
<         this.xsIndustryNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onINAUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsIndustryNA = this.xsIndustryNA.filter(x => x.sn !== r.sn);
<     this.service.addIndustry(this.sn, r.sn).then(
<       res => {
<         this.xsIndustry = res;
<       }).catch(this.handleError);
<   }
< //  this.xsIndustryNA.forEach((val, idx, array) => {
< // val: 当前值
< // idx：当前index
< // array: Array
< 
< 
<   backD() {
<     window.location.href = '#/pages_a/_adamiya/all_enterprise_list';
<   }
< 
<   updateD() {
<     this.service.editD(this.CurrentX);
<   }
< 
< }
---
> import {Component, OnInit} from '@angular/core';
> import {EnterpriseEditService} from './enterprise_edit.service';
> import {ActivatedRoute} from '@angular/router';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> import { XKV } from '../../@xmodel/XKV';
> import { XIndustry } from '../../@xmodel/XIndustry';
> import { XScene } from '../../@xmodel/XScene';
> 
> @Component({
>   selector: 'ngx-share-enterprise-edit',
>   styleUrls: ['enterprise_edit.scss'],
>   templateUrl: 'enterprise_edit.html',
>   providers: [EnterpriseEditService],
> 
> })
> export class EnterpriseEditComponent implements OnInit {
>   private sn: string;
>   public lastYear: number;
>   public thisYear: number;
>   public CurrentX: XEnterprise;
>   settingsProject = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsProduct = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsUserContact = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsUserLenovo = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsFile = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   xsEnterprise: XEnterprise[];
>   xsELevel: XKV[];
>   xsEType: XKV[];
>   xsEStatus: XKV[];
>   xsEClass: XKV[];
> 
>   xsScene: XScene[];
>   xsSceneNA: XScene[];
>   settingsScene = {
>     selectMode: 'multi',
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       label: {
>         editable: false,
>         title: '已选场景',
>         type: 'string',
>         filter: false,
>       },
>     },
>   };
>   settingsSceneNA = {
>     selectMode: 'multi',
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       label: {
>         editable: false,
>         title: '待选场景',
>         type: 'string',
>         filter: false,
>       },
>     },
>   };
> 
>   xsIndustry: XIndustry[];
>   xsIndustryNA: XIndustry[];
>   settingsIndustry = {
>     selectMode: 'multi',
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       label: {
>         editable: false,
>         title: '已选行业',
>         type: 'string',
>         filter: false,
>       },
>     },
>   };
>   settingsIndustryNA = {
>     selectMode: 'multi',
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       label: {
>         editable: false,
>         title: '待选行业',
>         type: 'string',
>         filter: false,
>       },
>     },
>   };
> 
>   constructor(private service: EnterpriseEditService, public route: ActivatedRoute) {
>     const dateObj = new Date();
>     this.thisYear = dateObj.getFullYear();
>     this.lastYear = dateObj.getFullYear() - 1;
>     this.sn = this.route.snapshot.params['sn'];
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   ngOnInit() {
>     this.service.getDELevel().then(
>       res => {
>         this.xsELevel = res;
>       }).catch(this.handleError);
>     this.service.getDEType().then(
>       res => {
>         this.xsEType = res;
>       }).catch(this.handleError);
>     this.service.getDEStatus().then(
>       res => {
>         this.xsEStatus = res;
>       }).catch(this.handleError);
>     this.service.getD(this.sn).then(
>       res => {
>         this.xsEnterprise = res;
>         this.CurrentX = this.xsEnterprise[0];
>       }).catch(this.handleError);
>     this.service.getDIndustry(this.sn).then(
>       res => {
>         this.xsIndustry = res;
>       }).catch(this.handleError);
>     this.service.getDScene(this.sn).then(
>       res => {
>         this.xsScene = res;
>       }).catch(this.handleError);
>     this.service.getDIndustryNA(this.sn).then(
>       res => {
>         this.xsIndustryNA = res;
>       }).catch(this.handleError);
>     this.service.getDSceneNA(this.sn).then(
>       res => {
>         this.xsSceneNA = res;
>       }).catch(this.handleError);
>   }
> 
>   onSUserRowSelect(event): void {
>     const r = event.selected.pop();
>     this.xsScene = this.xsScene.filter(x => x.sn !== r.sn);
>     this.service.deleteScene(this.sn, r.sn).then(
>       res => {
>         this.xsSceneNA = res;
>       }).catch(this.handleError);
>   }
> 
>   onSNAUserRowSelect(event): void {
>     const r = event.selected.pop();
>     this.xsSceneNA = this.xsSceneNA.filter(x => x.sn !== r.sn);
>     this.service.addScene(this.sn, r.sn).then(
>       res => {
>         this.xsScene = res;
>       }).catch(this.handleError);
>   }
> 
>   onIUserRowSelect(event): void {
>     const r = event.selected.pop();
>     this.xsIndustry = this.xsIndustry.filter(x => x.sn !== r.sn);
>     this.service.deleteIndustry(this.sn, r.sn).then(
>       res => {
>         this.xsIndustryNA = res;
>       }).catch(this.handleError);
>   }
> 
>   onINAUserRowSelect(event): void {
>     const r = event.selected.pop();
>     this.xsIndustryNA = this.xsIndustryNA.filter(x => x.sn !== r.sn);
>     this.service.addIndustry(this.sn, r.sn).then(
>       res => {
>         this.xsIndustry = res;
>       }).catch(this.handleError);
>   }
> //  this.xsIndustryNA.forEach((val, idx, array) => {
> // val: 当前值
> // idx：当前index
> // array: Array
> 
> 
>   backD() {
>     window.location.href = '#/pages_a/_adamiya/all_enterprise_list';
>   }
> 
>   updateD() {
>     this.service.editD(this.CurrentX);
>   }
> 
> }
diff -r app/pages/_share/enterprise_edit/enterprise_edit.html app_bk/pages/_share/enterprise_edit/enterprise_edit.html
1,348c1,348
< <div class="row">
<   <div class="col-md-8">
<     <nb-card>
<       <nb-card-header>
<         企业详细信息
<       </nb-card-header>
<       <nb-card-body>
<         <nb-tabset fullWidth>
<           <nb-tab tabTitle="基本">
<             <div class="row">
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="label">公司名称</label>
<                   <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_cn_uid">统一信用代码</label>
<                   <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_setup_dt">成立日期</label>
<                   <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_reg_sn">注册号</label>
<                   <input type="text" class="form-control" id="basic_reg_sn" name="basic_reg_sn" [(ngModel)]="this.CurrentX.basic_reg_sn">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_reg_address">总部地点</label>
<                   <input type="text" class="form-control" id="basic_reg_address" name="basic_reg_address" [(ngModel)]="this.CurrentX.basic_reg_address">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="type_sn">公司类型</label>
<                   <select id="type_sn" class="form-control" name="type_sn"  [(ngModel)]="this.CurrentX.type_sn">
<                     <option *ngFor="let item of this.xsEType" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_biz_keywords">主营业务</label>
<                   <input type="text" class="form-control" id="basic_biz_keywords" name="basic_biz_keywords" [(ngModel)]="this.CurrentX.basic_biz_keywords">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_legal_rep">法人代表</label>
<                   <input type="text" class="form-control" id="basic_legal_rep" name="basic_legal_rep" [(ngModel)]="this.CurrentX.basic_legal_rep">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_latest_reg_dt">最新变更日期</label>
<                   <input type="text" class="form-control" id="basic_latest_reg_dt" name="basic_latest_reg_dt" [(ngModel)]="this.CurrentX.basic_latest_reg_dt">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_reg_capital">注册资本</label>
<                   <input type="text" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_biz_dt_range">营业期限</label>
<                   <input type="text" class="form-control" id="basic_biz_dt_range" name="basic_biz_dt_range" [(ngModel)]="this.CurrentX.basic_biz_dt_range">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_charge_office">登记机关</label>
<                   <input type="text" class="form-control" id="basic_charge_office" name="basic_charge_office" [(ngModel)]="this.CurrentX.basic_charge_office">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_biz_tel">办公电话</label>
<                   <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_org_sn">组织机构代码</label>
<                   <input type="text" class="form-control" id="basic_org_sn" name="basic_org_sn" [(ngModel)]="this.CurrentX.basic_org_sn">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_biz_address">企业地址</label>
<                   <input type="text" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="status_sn">经营状态</label>
<                   <select id="status_sn" class="form-control" name="status_sn"  [(ngModel)]="this.CurrentX.status_sn">
<                     <option *ngFor="let item of this.xsEStatus" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-12 col-lg-12">
<                 <div class="form-group">
<                   <label for="basic_biz_range">经营范围</label>
<                   <input type="text" class="form-control" id="basic_biz_range" name="basic_biz_range" [(ngModel)]="this.CurrentX.basic_biz_range">
<                 </div>
<               </div>
<             </div>
<           </nb-tab>
<           <nb-tab tabTitle="干系人">
<             <h5 class="grid-h">联想负责人</h5>
<             <ng2-smart-table [settings]="settingsUserLenovo" [source]="xsUserLenovo">
<             </ng2-smart-table>
<             <hr />
<             <h5 class="grid-h">联系人</h5>
<             <ng2-smart-table [settings]="settingsUserContact" [source]="xsUserContact">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="财务">
<             <div class="row">
<               <div class="col-sm-12 col-lg-12">
<                 <div class="form-group">
<                   <span>上一年度 {{ lastYear }}</span>
<                   <hr />
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_asset_last">资产总额</label>
<                   <input type="text" class="form-control" id="acc_asset_last" name="acc_asset_last" [(ngModel)]="this.CurrentX.acc_asset_last">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_sales_last">销售收入</label>
<                   <input type="text" class="form-control" id="acc_sales_last" name="acc_sales_last" [(ngModel)]="this.CurrentX.acc_sales_last">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_debt_last">负债总额</label>
<                   <input type="text" class="form-control" id="acc_debt_last" name="acc_debt_last" [(ngModel)]="this.CurrentX.acc_debt_last">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_profit_last">净利润</label>
<                   <input type="text" class="form-control" id="acc_profit_last" name="acc_profit_last" [(ngModel)]="this.CurrentX.acc_profit_last">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_debt_rate_last">资产负债率</label>
<                   <input type="text" class="form-control" id="acc_debt_rate_last" name="acc_debt_rate_last" [(ngModel)]="this.CurrentX.acc_debt_rate_last">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
< 
<               </div>
<               <div class="col-sm-12 col-lg-12">
<                 <div class="form-group">
<                   <span>本年度 {{ thisYear }}</span>
<                   <hr />
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_asset">资产总额</label>
<                   <input type="text" class="form-control" id="acc_asset" name="acc_asset" [(ngModel)]="this.CurrentX.acc_asset">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_sales">销售收入</label>
<                   <input type="text" class="form-control" id="acc_sales" name="acc_sales" [(ngModel)]="this.CurrentX.acc_sales">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_debt">负债总额</label>
<                   <input type="text" class="form-control" id="acc_debt" name="acc_debt" [(ngModel)]="this.CurrentX.acc_debt">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_profit">净利润</label>
<                   <input type="text" class="form-control" id="acc_profit" name="acc_profit" [(ngModel)]="this.CurrentX.acc_profit">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_debt_rate">资产负债率</label>
<                   <input type="text" class="form-control" id="acc_debt_rate" name="acc_debt_rate" [(ngModel)]="this.CurrentX.acc_debt_rate">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
< 
<               </div>
<               <div class="col-sm-12 col-lg-12">
<                 <hr />
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_bank">收款银行</label>
<                   <input type="text" class="form-control" id="acc_bank" name="acc_bank" [(ngModel)]="this.CurrentX.acc_bank">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_bank_branch">支行名称</label>
<                   <input type="text" class="form-control" id="acc_bank_branch" name="acc_bank_branch" [(ngModel)]="this.CurrentX.acc_bank_branch">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="acc_bank_sn">账号</label>
<                   <input type="text" class="form-control" id="acc_bank_sn" name="acc_bank_sn" [(ngModel)]="this.CurrentX.acc_bank_sn">
<                 </div>
<               </div>
<             </div>
<           </nb-tab>
<           <nb-tab tabTitle="项目">
<             <span>Content #33</span>
<             <ng2-smart-table [settings]="settingsProject" [source]="xsProject">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="产品">
<             <span>Content #34</span>
<             <ng2-smart-table [settings]="settingsProduct" [source]="xsProduct">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="附件">
<             <span>Content #35</span>
<             <ng2-smart-table [settings]="settingsFile" [source]="xsFile">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="其他">
<             <div class="row">
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_credits">资质认证</label>
<                   <input type="text" class="form-control" id="other_credits" name="other_credits" [(ngModel)]="this.CurrentX.other_credits">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_deliver_address">交货地点</label>
<                   <input type="text" class="form-control" id="other_deliver_address" name="other_deliver_address" [(ngModel)]="this.CurrentX.other_deliver_address">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="level_sn">企业等级</label>
<                   <select id="level_sn" class="form-control" name="level_sn"  [(ngModel)]="this.CurrentX.level_sn">
<                     <option *ngFor="let item of this.xsELevel" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_transport">运输方式</label>
<                   <input type="text" class="form-control" id="other_transport" name="other_transport" [(ngModel)]="this.CurrentX.other_transport">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_website">公司网站</label>
<                   <input type="text" class="form-control" id="other_website" name="other_website" [(ngModel)]="this.CurrentX.other_website">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_deliver_days">最短交货期</label>
<                   <input type="text" class="form-control" id="other_deliver_days" name="other_deliver_days" [(ngModel)]="this.CurrentX.other_deliver_days">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_email">公司邮箱</label>
<                   <input type="text" class="form-control" id="other_email" name="other_email" [(ngModel)]="this.CurrentX.other_email">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="other_size">公司规模</label>
<                   <input type="text" class="form-control" id="other_size" name="other_size" [(ngModel)]="this.CurrentX.other_size">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="seo_tag">企业标签</label>
<                   <input type="text" class="form-control" id="seo_tag" name="seo_tag" [(ngModel)]="this.CurrentX.seo_tag">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="more_info">备注</label>
<                   <input type="text" class="form-control" id="more_info" name="more_info" [(ngModel)]="this.CurrentX.more_info">
<                 </div>
<               </div>
<             </div>
<           </nb-tab>
<         </nb-tabset>
<         <hr />
<         <div class="col-md-12 col-lg-12">
<           <button (click)="backD()" class="btn btn-success">返回列表</button>
<           <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
<         </div>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card><nb-card-header>
<       行业关联
<     </nb-card-header>
<       <nb-card-body>
<         <ng2-smart-table [settings]="settingsIndustry" [source]="xsIndustry" (userRowSelect)="onIUserRowSelect($event)">
<         </ng2-smart-table>
<         <hr />
<         <ng2-smart-table [settings]="settingsIndustryNA" [source]="xsIndustryNA" (userRowSelect)="onINAUserRowSelect($event)">
<         </ng2-smart-table>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card><nb-card-header>
<       场景关联
<     </nb-card-header>
<       <nb-card-body>
<         <ng2-smart-table [settings]="settingsScene" [source]="xsScene" (userRowSelect)="onSUserRowSelect($event)">
<         </ng2-smart-table>
<         <hr />
<         <ng2-smart-table [settings]="settingsSceneNA" [source]="xsSceneNA" (userRowSelect)="onSNAUserRowSelect($event)">
<         </ng2-smart-table>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-8">
>     <nb-card>
>       <nb-card-header>
>         企业详细信息
>       </nb-card-header>
>       <nb-card-body>
>         <nb-tabset fullWidth>
>           <nb-tab tabTitle="基本">
>             <div class="row">
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="label">公司名称</label>
>                   <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_cn_uid">统一信用代码</label>
>                   <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_setup_dt">成立日期</label>
>                   <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_reg_sn">注册号</label>
>                   <input type="text" class="form-control" id="basic_reg_sn" name="basic_reg_sn" [(ngModel)]="this.CurrentX.basic_reg_sn">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_reg_address">总部地点</label>
>                   <input type="text" class="form-control" id="basic_reg_address" name="basic_reg_address" [(ngModel)]="this.CurrentX.basic_reg_address">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="type_sn">公司类型</label>
>                   <select id="type_sn" class="form-control" name="type_sn"  [(ngModel)]="this.CurrentX.type_sn">
>                     <option *ngFor="let item of this.xsEType" [value]='item.sn'>{{item.label}}</option>
>                   </select>
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_biz_keywords">主营业务</label>
>                   <input type="text" class="form-control" id="basic_biz_keywords" name="basic_biz_keywords" [(ngModel)]="this.CurrentX.basic_biz_keywords">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_legal_rep">法人代表</label>
>                   <input type="text" class="form-control" id="basic_legal_rep" name="basic_legal_rep" [(ngModel)]="this.CurrentX.basic_legal_rep">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_latest_reg_dt">最新变更日期</label>
>                   <input type="text" class="form-control" id="basic_latest_reg_dt" name="basic_latest_reg_dt" [(ngModel)]="this.CurrentX.basic_latest_reg_dt">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_reg_capital">注册资本</label>
>                   <input type="text" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_biz_dt_range">营业期限</label>
>                   <input type="text" class="form-control" id="basic_biz_dt_range" name="basic_biz_dt_range" [(ngModel)]="this.CurrentX.basic_biz_dt_range">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_charge_office">登记机关</label>
>                   <input type="text" class="form-control" id="basic_charge_office" name="basic_charge_office" [(ngModel)]="this.CurrentX.basic_charge_office">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_biz_tel">办公电话</label>
>                   <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_org_sn">组织机构代码</label>
>                   <input type="text" class="form-control" id="basic_org_sn" name="basic_org_sn" [(ngModel)]="this.CurrentX.basic_org_sn">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_biz_address">企业地址</label>
>                   <input type="text" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="status_sn">经营状态</label>
>                   <select id="status_sn" class="form-control" name="status_sn"  [(ngModel)]="this.CurrentX.status_sn">
>                     <option *ngFor="let item of this.xsEStatus" [value]='item.sn'>{{item.label}}</option>
>                   </select>
>                 </div>
>               </div>
>               <div class="col-sm-12 col-lg-12">
>                 <div class="form-group">
>                   <label for="basic_biz_range">经营范围</label>
>                   <input type="text" class="form-control" id="basic_biz_range" name="basic_biz_range" [(ngModel)]="this.CurrentX.basic_biz_range">
>                 </div>
>               </div>
>             </div>
>           </nb-tab>
>           <nb-tab tabTitle="干系人">
>             <h5 class="grid-h">联想负责人</h5>
>             <ng2-smart-table [settings]="settingsUserLenovo" [source]="xsUserLenovo">
>             </ng2-smart-table>
>             <hr />
>             <h5 class="grid-h">联系人</h5>
>             <ng2-smart-table [settings]="settingsUserContact" [source]="xsUserContact">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="财务">
>             <div class="row">
>               <div class="col-sm-12 col-lg-12">
>                 <div class="form-group">
>                   <span>上一年度 {{ lastYear }}</span>
>                   <hr />
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_asset_last">资产总额</label>
>                   <input type="text" class="form-control" id="acc_asset_last" name="acc_asset_last" [(ngModel)]="this.CurrentX.acc_asset_last">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_sales_last">销售收入</label>
>                   <input type="text" class="form-control" id="acc_sales_last" name="acc_sales_last" [(ngModel)]="this.CurrentX.acc_sales_last">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_debt_last">负债总额</label>
>                   <input type="text" class="form-control" id="acc_debt_last" name="acc_debt_last" [(ngModel)]="this.CurrentX.acc_debt_last">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_profit_last">净利润</label>
>                   <input type="text" class="form-control" id="acc_profit_last" name="acc_profit_last" [(ngModel)]="this.CurrentX.acc_profit_last">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_debt_rate_last">资产负债率</label>
>                   <input type="text" class="form-control" id="acc_debt_rate_last" name="acc_debt_rate_last" [(ngModel)]="this.CurrentX.acc_debt_rate_last">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
> 
>               </div>
>               <div class="col-sm-12 col-lg-12">
>                 <div class="form-group">
>                   <span>本年度 {{ thisYear }}</span>
>                   <hr />
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_asset">资产总额</label>
>                   <input type="text" class="form-control" id="acc_asset" name="acc_asset" [(ngModel)]="this.CurrentX.acc_asset">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_sales">销售收入</label>
>                   <input type="text" class="form-control" id="acc_sales" name="acc_sales" [(ngModel)]="this.CurrentX.acc_sales">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_debt">负债总额</label>
>                   <input type="text" class="form-control" id="acc_debt" name="acc_debt" [(ngModel)]="this.CurrentX.acc_debt">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_profit">净利润</label>
>                   <input type="text" class="form-control" id="acc_profit" name="acc_profit" [(ngModel)]="this.CurrentX.acc_profit">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_debt_rate">资产负债率</label>
>                   <input type="text" class="form-control" id="acc_debt_rate" name="acc_debt_rate" [(ngModel)]="this.CurrentX.acc_debt_rate">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
> 
>               </div>
>               <div class="col-sm-12 col-lg-12">
>                 <hr />
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_bank">收款银行</label>
>                   <input type="text" class="form-control" id="acc_bank" name="acc_bank" [(ngModel)]="this.CurrentX.acc_bank">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_bank_branch">支行名称</label>
>                   <input type="text" class="form-control" id="acc_bank_branch" name="acc_bank_branch" [(ngModel)]="this.CurrentX.acc_bank_branch">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="acc_bank_sn">账号</label>
>                   <input type="text" class="form-control" id="acc_bank_sn" name="acc_bank_sn" [(ngModel)]="this.CurrentX.acc_bank_sn">
>                 </div>
>               </div>
>             </div>
>           </nb-tab>
>           <nb-tab tabTitle="项目">
>             <span>Content #33</span>
>             <ng2-smart-table [settings]="settingsProject" [source]="xsProject">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="产品">
>             <span>Content #34</span>
>             <ng2-smart-table [settings]="settingsProduct" [source]="xsProduct">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="附件">
>             <span>Content #35</span>
>             <ng2-smart-table [settings]="settingsFile" [source]="xsFile">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="其他">
>             <div class="row">
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_credits">资质认证</label>
>                   <input type="text" class="form-control" id="other_credits" name="other_credits" [(ngModel)]="this.CurrentX.other_credits">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_deliver_address">交货地点</label>
>                   <input type="text" class="form-control" id="other_deliver_address" name="other_deliver_address" [(ngModel)]="this.CurrentX.other_deliver_address">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="level_sn">企业等级</label>
>                   <select id="level_sn" class="form-control" name="level_sn"  [(ngModel)]="this.CurrentX.level_sn">
>                     <option *ngFor="let item of this.xsELevel" [value]='item.sn'>{{item.label}}</option>
>                   </select>
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_transport">运输方式</label>
>                   <input type="text" class="form-control" id="other_transport" name="other_transport" [(ngModel)]="this.CurrentX.other_transport">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_website">公司网站</label>
>                   <input type="text" class="form-control" id="other_website" name="other_website" [(ngModel)]="this.CurrentX.other_website">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_deliver_days">最短交货期</label>
>                   <input type="text" class="form-control" id="other_deliver_days" name="other_deliver_days" [(ngModel)]="this.CurrentX.other_deliver_days">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_email">公司邮箱</label>
>                   <input type="text" class="form-control" id="other_email" name="other_email" [(ngModel)]="this.CurrentX.other_email">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="other_size">公司规模</label>
>                   <input type="text" class="form-control" id="other_size" name="other_size" [(ngModel)]="this.CurrentX.other_size">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="seo_tag">企业标签</label>
>                   <input type="text" class="form-control" id="seo_tag" name="seo_tag" [(ngModel)]="this.CurrentX.seo_tag">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="more_info">备注</label>
>                   <input type="text" class="form-control" id="more_info" name="more_info" [(ngModel)]="this.CurrentX.more_info">
>                 </div>
>               </div>
>             </div>
>           </nb-tab>
>         </nb-tabset>
>         <hr />
>         <div class="col-md-12 col-lg-12">
>           <button (click)="backD()" class="btn btn-success">返回列表</button>
>           <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
>         </div>
>       </nb-card-body>
>     </nb-card>
>   </div>
>   <div class="col-md-2">
>     <nb-card><nb-card-header>
>       行业关联
>     </nb-card-header>
>       <nb-card-body>
>         <ng2-smart-table [settings]="settingsIndustry" [source]="xsIndustry" (userRowSelect)="onIUserRowSelect($event)">
>         </ng2-smart-table>
>         <hr />
>         <ng2-smart-table [settings]="settingsIndustryNA" [source]="xsIndustryNA" (userRowSelect)="onINAUserRowSelect($event)">
>         </ng2-smart-table>
>       </nb-card-body>
>     </nb-card>
>   </div>
>   <div class="col-md-2">
>     <nb-card><nb-card-header>
>       场景关联
>     </nb-card-header>
>       <nb-card-body>
>         <ng2-smart-table [settings]="settingsScene" [source]="xsScene" (userRowSelect)="onSUserRowSelect($event)">
>         </ng2-smart-table>
>         <hr />
>         <ng2-smart-table [settings]="settingsSceneNA" [source]="xsSceneNA" (userRowSelect)="onSNAUserRowSelect($event)">
>         </ng2-smart-table>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
diff -r app/pages/_share/enterprise_edit/enterprise_edit.scss app_bk/pages/_share/enterprise_edit/enterprise_edit.scss
1,45c1,45
< @import '../../../@theme/styles/themes';
< @import '../../../../../node_modules/bootstrap/scss/mixins/breakpoints';
< @import '../../../../../node_modules/@nebular/theme/styles/global/bootstrap/breakpoints';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< 
<   nb-tabset {
<     height: 100%;
<     display: flex;
<     flex-direction: column;
<   }
< 
<   nb-tab {
<     padding: nb-theme(padding);
<   }
< 
<   /deep/ ngx-tab1, /deep/ ngx-tab2 {
<     display: block;
<     padding: nb-theme(padding);
<   }
< 
<   @include media-breakpoint-down(xs) {
<     nb-tabset /deep/ul {
<       font-size: 1rem;
<       padding: 0 0.25rem;
<     }
<   }
< }
---
> @import '../../../@theme/styles/themes';
> @import '../../../../../node_modules/bootstrap/scss/mixins/breakpoints';
> @import '../../../../../node_modules/@nebular/theme/styles/global/bootstrap/breakpoints';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> 
>   nb-tabset {
>     height: 100%;
>     display: flex;
>     flex-direction: column;
>   }
> 
>   nb-tab {
>     padding: nb-theme(padding);
>   }
> 
>   /deep/ ngx-tab1, /deep/ ngx-tab2 {
>     display: block;
>     padding: nb-theme(padding);
>   }
> 
>   @include media-breakpoint-down(xs) {
>     nb-tabset /deep/ul {
>       font-size: 1rem;
>       padding: 0 0.25rem;
>     }
>   }
> }
diff -r app/pages/_share/enterprise_edit/enterprise_edit.service.ts app_bk/pages/_share/enterprise_edit/enterprise_edit.service.ts
1,536c1,536
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< import { XIndustry } from '../../@xmodel/XIndustry';
< import { XScene } from '../../@xmodel/XScene';
< import { XKV } from '../../@xmodel/XKV';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset =utf-8'});
< 
< @Injectable()
< export class EnterpriseEditService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(sn): Promise<XEnterprise[]> {
<     // return this.http.get('/_s_adamiya/get_enterprise_list').map((res) => res.json());
<     const url = '/_s_share/get_enterprise_detail';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustry(sn) {
<     const url = '/_s_share/get_enterprise_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', sn);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setIndustry(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustryNA(sn) {
<     const url = '/_s_share/get_enterprise_industry_na_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', sn);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setIndustry(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   addIndustry(esn, isn) {
<     const url = '/_s_share/add_enterprise_industry';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('isn', isn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setIndustry(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   deleteIndustry(esn, isn) {
<     const url = '/_s_share/delete_enterprise_industry';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('isn', isn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setIndustry(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   setIndustry(data: any): XIndustry {
<     const x = new XIndustry();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.is_checked = data['is_checked'];
<     return x;
<   }
< 
<   getDScene(sn) {
<     const url = '/_s_share/get_enterprise_scene_list';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setScene(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDSceneNA(sn) {
<     const url = '/_s_share/get_enterprise_scene_na_list';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setScene(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   addScene(esn, ssn) {
<     const url = '/_s_share/add_enterprise_scene';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('ssn', ssn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setScene(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   deleteScene(esn, ssn) {
<     const url = '/_s_share/delete_enterprise_scene';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('ssn', ssn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setScene(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   setScene(data: any): XScene {
<     const x = new XScene();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.is_checked = data['is_checked'];
<     return x;
<   }
< 
<   getDUserContact(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_contact_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDUserLenovo(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_lenovo_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProject(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_enterprise_project_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProduct(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_enterprise_product_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDFile(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_enterprise_file_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDEType() {
<     const params = new HttpParams()
<       .set('en', 'enterprise_type');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDEStatus() {
<     const params = new HttpParams()
<       .set('en', 'enterprise_status');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDELevel() {
<     const params = new HttpParams()
<       .set('en', 'enterprise_level');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setKV(data: any): XKV {
<     const x = new XKV();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     return x;
<   }
< 
<   setX(data: any): XEnterprise {
<     const x = new XEnterprise();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.creator_sn = data['creator_sn'];
<     x.create_dt = data['create_dt'];
<     x.custom_code = data['custom_code'];
<     x.last_update_dt = data['last_update_dt'];
<     x.display_code = data['display_code'];
<     x.is_deleted = data['is_deleted'];
<     x.is_na = data['is_na'];
<     x.class_sn = data['class_sn'];
<     x.type_sn = data['type_sn'];
<     x.status_sn = data['status_sn'];
<     x.level_sn = data['level_sn'];
<     x.class_label = data['class_label'];
<     x.type_label = data['type_label'];
<     x.level_label = data['level_label'];
<     x.status_label = data['status_label'];
<     x.more_info = data['more_info'];
<     x.seo_tag = data['seo_tag'];
<     x.current_lenovo_user_sn = data['current_lenovo_user_sn'];
<     x.basic_dic_match_status_sn = data['basic_dic_match_status_sn'];
<     x.basic_is_lenovo = data['basic_is_lenovo'];
<     x.basic_cn_uid = data['basic_cn_uid'];
<     const basic_setup_dt = new Date(data['basic_setup_dt']);
<     x.basic_setup_dt = basic_setup_dt.getFullYear() + '/'
<       + (basic_setup_dt.getMonth() + 1) + '/' + basic_setup_dt.getDate();
<     const basic_latest_reg_dt = new Date(data['basic_latest_reg_dt']);
<     x.basic_latest_reg_dt = basic_latest_reg_dt.getFullYear() + '/'
<       + (basic_latest_reg_dt.getMonth() + 1) + '/' + basic_latest_reg_dt.getDate();
<     x.basic_org_sn = data['basic_org_sn'];
<     x.basic_reg_sn = data['basic_reg_sn'];
<     x.basic_reg_address = data['basic_reg_address'];
<     x.basic_legal_rep = data['basic_legal_rep'];
<     x.basic_reg_capital = data['basic_reg_capital'];
<     x.basic_biz_keywords = data['basic_biz_keywords'];
<     x.basic_biz_range = data['basic_biz_range'];
<     x.basic_biz_dt_range = data['basic_biz_dt_range'];
<     x.basic_biz_address = data['basic_biz_address'];
<     x.basic_biz_tel = data['basic_biz_tel'];
<     x.basic_charge_office = data['basic_charge_office'];
<     x.acc_bank = data['acc_bank'];
<     x.acc_bank_branch = data['acc_bank_branch'];
<     x.acc_bank_sn = data['acc_bank_sn'];
<     x.acc_asset = data['acc_asset'];
<     x.acc_debt = data['acc_debt'];
<     x.acc_sales = data['acc_sales'];
<     x.acc_profit = data['acc_profit'];
<     x.acc_debt_rate = data['acc_debt_rate'];
<     x.acc_asset_last = data['acc_asset_last'];
<     x.acc_debt_last = data['acc_debt_last'];
<     x.acc_sales_last = data['acc_sales_last'];
<     x.acc_profit_last = data['acc_profit_last'];
<     x.acc_debt_rate_last = data['acc_debt_rate_last'];
<     x.other_credits = data['other_credits'];
<     x.other_website = data['other_website'];
<     x.other_email = data['other_email'];
<     x.other_size = data['other_size'];
<     x.other_deliver_days = data['other_deliver_days'];
<     x.other_deliver_address = data['other_deliver_address'];
<     x.other_transport = data['other_transport'];
<     x.default_contact_user_sn = data['default_contact_user_sn'];
<     x.creator_label = data['creator_label'];
<     x.contact_label = data['contact_label'];
<     x.lenovo_label = data['lenovo_label'];
<     return x;
<   }
< 
<   editD(x) {
<     const url = '/_s_share/edit_enterprise_detail';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', x.sn)
<       .set('label', x.label)
<       .set('creator_sn', x.creator_sn)
<       .set('create_dt', x.create_dt)
<       .set('custom_code', x.custom_code)
<       .set('last_update_dt', x.last_update_dt)
<       .set('display_code', x.display_code)
<       .set('is_deleted', x.is_deleted)
<       .set('is_na', x.is_na)
<       .set('class_sn', x.class_sn)
<       .set('type_sn', x.type_sn)
<       .set('status_sn', x.status_sn)
<       .set('level_sn', x.level_sn)
<       .set('class_label', x.class_label)
<       .set('type_label', x.type_label)
<       .set('level_label', x.level_label)
<       .set('status_label', x.status_label)
<       .set('more_info', x.more_info)
<       .set('seo_tag', x.seo_tag)
<       .set('current_lenovo_user_sn', x.current_lenovo_user_sn)
<       .set('basic_dic_match_status_sn', x.basic_dic_match_status_sn)
<       .set('basic_is_lenovo', x.basic_is_lenovo)
<       .set('basic_cn_uid', x.basic_cn_uid)
<       .set('basic_setup_dt', x.basic_setup_dt)
<       .set('basic_latest_reg_dt', x.basic_latest_reg_dt)
<       .set('basic_org_sn', x.basic_org_sn)
<       .set('basic_reg_sn', x.basic_reg_sn)
<       .set('basic_reg_address', x.basic_reg_address)
<       .set('basic_legal_rep', x.basic_legal_rep)
<       .set('basic_reg_capital', x.basic_reg_capital)
<       .set('basic_biz_keywords', x.basic_biz_keywords)
<       .set('basic_biz_range', x.basic_biz_range)
<       .set('basic_biz_dt_range', x.basic_biz_dt_range)
<       .set('basic_biz_address', x.basic_biz_address)
<       .set('basic_biz_tel', x.basic_biz_tel)
<       .set('basic_charge_office', x.basic_charge_office)
<       .set('acc_bank', x.acc_bank)
<       .set('acc_bank_branch', x.acc_bank_branch)
<       .set('acc_bank_sn', x.acc_bank_sn)
<       .set('acc_asset', x.acc_asset)
<       .set('acc_debt', x.acc_debt)
<       .set('acc_sales', x.acc_sales)
<       .set('acc_profit', x.acc_profit)
<       .set('acc_debt_rate', x.acc_debt_rate)
<       .set('acc_asset_last', x.acc_asset_last)
<       .set('acc_debt_last', x.acc_debt_last)
<       .set('acc_sales_last', x.acc_sales_last)
<       .set('acc_profit_last', x.acc_profit_last)
<       .set('acc_debt_rate_last', x.acc_debt_rate_last)
<       .set('other_credits', x.other_credits)
<       .set('other_website', x.other_website)
<       .set('other_email', x.other_email)
<       .set('other_size', x.other_size)
<       .set('other_deliver_days', x.other_deliver_days)
<       .set('other_deliver_address', x.other_deliver_address)
<       .set('other_transport', x.other_transport)
<       .set('default_contact_user_sn', x.default_contact_user_sn)
<       .set('creator_label', x.creator_label)
<       .set('contact_label', x.contact_label)
<       .set('lenovo_label', x.lenovo_label)
<       .set('id', x.id);
< 
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   createContact(newData) {
<     const url = '/_s_share/create_enterprise_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('label', newData['label'])
<       .set('basic_biz_tel', newData['basic_biz_tel'])
<       .set('basic_reg_capital', newData['basic_reg_capital'])
<       .set('basic_setup_dt', newData['basic_setup_dt'])
<       .set('basic_cn_uid', newData['basic_cn_uid']);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> import { XIndustry } from '../../@xmodel/XIndustry';
> import { XScene } from '../../@xmodel/XScene';
> import { XKV } from '../../@xmodel/XKV';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset =utf-8'});
> 
> @Injectable()
> export class EnterpriseEditService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(sn): Promise<XEnterprise[]> {
>     // return this.http.get('/_adamiya/get_enterprise_list').map((res) => res.json());
>     const url = '/_share/get_enterprise_detail';
>     const params = new HttpParams()
>       .set('sn', sn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDIndustry(sn) {
>     const url = '/_share/get_enterprise_industry_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('sn', sn);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setIndustry(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDIndustryNA(sn) {
>     const url = '/_share/get_enterprise_industry_na_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('sn', sn);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setIndustry(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   addIndustry(esn, isn) {
>     const url = '/_share/add_enterprise_industry';
>     const params = new HttpParams()
>       .set('esn', esn)
>       .set('isn', isn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listx.push(this.setIndustry(data[i]));
>         }
>         return listx;
>       },
>     ).catch(this.handleError);
>   }
> 
>   deleteIndustry(esn, isn) {
>     const url = '/_share/delete_enterprise_industry';
>     const params = new HttpParams()
>       .set('esn', esn)
>       .set('isn', isn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listx.push(this.setIndustry(data[i]));
>         }
>         return listx;
>       },
>     ).catch(this.handleError);
>   }
> 
>   setIndustry(data: any): XIndustry {
>     const x = new XIndustry();
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.is_checked = data['is_checked'];
>     return x;
>   }
> 
>   getDScene(sn) {
>     const url = '/_share/get_enterprise_scene_list';
>     const params = new HttpParams()
>       .set('sn', sn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setScene(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDSceneNA(sn) {
>     const url = '/_share/get_enterprise_scene_na_list';
>     const params = new HttpParams()
>       .set('sn', sn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setScene(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   addScene(esn, ssn) {
>     const url = '/_share/add_enterprise_scene';
>     const params = new HttpParams()
>       .set('esn', esn)
>       .set('ssn', ssn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listx.push(this.setScene(data[i]));
>         }
>         return listx;
>       },
>     ).catch(this.handleError);
>   }
> 
>   deleteScene(esn, ssn) {
>     const url = '/_share/delete_enterprise_scene';
>     const params = new HttpParams()
>       .set('esn', esn)
>       .set('ssn', ssn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>         const count = (<Array<string>>data).length;
>         for (let i = 0; i < count; i++) {
>           listx.push(this.setScene(data[i]));
>         }
>         return listx;
>       },
>     ).catch(this.handleError);
>   }
> 
>   setScene(data: any): XScene {
>     const x = new XScene();
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.is_checked = data['is_checked'];
>     return x;
>   }
> 
>   getDUserContact(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_enterprise_user_contact_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDUserLenovo(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_enterprise_user_lenovo_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDProject(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_enterprise_project_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDProduct(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_enterprise_product_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDFile(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_enterprise_file_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDEType() {
>     const params = new HttpParams()
>       .set('et', 'enterprise_type');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDEStatus() {
>     const params = new HttpParams()
>       .set('et', 'enterprise_status');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDELevel() {
>     const params = new HttpParams()
>       .set('et', 'enterprise_level');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setKV(data: any): XKV {
>     const x = new XKV();
>     x.sn = data['sn'];
>     x.label = data['label'];
>     return x;
>   }
> 
>   setX(data: any): XEnterprise {
>     const x = new XEnterprise();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.creator_sn = data['creator_sn'];
>     x.create_dt = data['create_dt'];
>     x.custom_code = data['custom_code'];
>     x.last_update_dt = data['last_update_dt'];
>     x.display_code = data['display_code'];
>     x.is_deleted = data['is_deleted'];
>     x.is_na = data['is_na'];
>     x.class_sn = data['class_sn'];
>     x.type_sn = data['type_sn'];
>     x.status_sn = data['status_sn'];
>     x.level_sn = data['level_sn'];
>     x.class_label = data['class_label'];
>     x.type_label = data['type_label'];
>     x.level_label = data['level_label'];
>     x.status_label = data['status_label'];
>     x.more_info = data['more_info'];
>     x.seo_tag = data['seo_tag'];
>     x.current_lenovo_user_sn = data['current_lenovo_user_sn'];
>     x.basic_dic_match_status_sn = data['basic_dic_match_status_sn'];
>     x.basic_is_lenovo = data['basic_is_lenovo'];
>     x.basic_cn_uid = data['basic_cn_uid'];
>     const basic_setup_dt = new Date(data['basic_setup_dt']);
>     x.basic_setup_dt = basic_setup_dt.getFullYear() + '/'
>       + (basic_setup_dt.getMonth() + 1) + '/' + basic_setup_dt.getDate();
>     const basic_latest_reg_dt = new Date(data['basic_latest_reg_dt']);
>     x.basic_latest_reg_dt = basic_latest_reg_dt.getFullYear() + '/'
>       + (basic_latest_reg_dt.getMonth() + 1) + '/' + basic_latest_reg_dt.getDate();
>     x.basic_org_sn = data['basic_org_sn'];
>     x.basic_reg_sn = data['basic_reg_sn'];
>     x.basic_reg_address = data['basic_reg_address'];
>     x.basic_legal_rep = data['basic_legal_rep'];
>     x.basic_reg_capital = data['basic_reg_capital'];
>     x.basic_biz_keywords = data['basic_biz_keywords'];
>     x.basic_biz_range = data['basic_biz_range'];
>     x.basic_biz_dt_range = data['basic_biz_dt_range'];
>     x.basic_biz_address = data['basic_biz_address'];
>     x.basic_biz_tel = data['basic_biz_tel'];
>     x.basic_charge_office = data['basic_charge_office'];
>     x.acc_bank = data['acc_bank'];
>     x.acc_bank_branch = data['acc_bank_branch'];
>     x.acc_bank_sn = data['acc_bank_sn'];
>     x.acc_asset = data['acc_asset'];
>     x.acc_debt = data['acc_debt'];
>     x.acc_sales = data['acc_sales'];
>     x.acc_profit = data['acc_profit'];
>     x.acc_debt_rate = data['acc_debt_rate'];
>     x.acc_asset_last = data['acc_asset_last'];
>     x.acc_debt_last = data['acc_debt_last'];
>     x.acc_sales_last = data['acc_sales_last'];
>     x.acc_profit_last = data['acc_profit_last'];
>     x.acc_debt_rate_last = data['acc_debt_rate_last'];
>     x.other_credits = data['other_credits'];
>     x.other_website = data['other_website'];
>     x.other_email = data['other_email'];
>     x.other_size = data['other_size'];
>     x.other_deliver_days = data['other_deliver_days'];
>     x.other_deliver_address = data['other_deliver_address'];
>     x.other_transport = data['other_transport'];
>     x.default_contact_user_sn = data['default_contact_user_sn'];
>     x.creator_label = data['creator_label'];
>     x.contact_label = data['contact_label'];
>     x.lenovo_label = data['lenovo_label'];
>     return x;
>   }
> 
>   editD(x) {
>     const url = '/_share/edit_enterprise_detail';
>     const listx = [];
>     const params = new HttpParams()
>       .set('sn', x.sn)
>       .set('label', x.label)
>       .set('creator_sn', x.creator_sn)
>       .set('create_dt', x.create_dt)
>       .set('custom_code', x.custom_code)
>       .set('last_update_dt', x.last_update_dt)
>       .set('display_code', x.display_code)
>       .set('is_deleted', x.is_deleted)
>       .set('is_na', x.is_na)
>       .set('class_sn', x.class_sn)
>       .set('type_sn', x.type_sn)
>       .set('status_sn', x.status_sn)
>       .set('level_sn', x.level_sn)
>       .set('class_label', x.class_label)
>       .set('type_label', x.type_label)
>       .set('level_label', x.level_label)
>       .set('status_label', x.status_label)
>       .set('more_info', x.more_info)
>       .set('seo_tag', x.seo_tag)
>       .set('current_lenovo_user_sn', x.current_lenovo_user_sn)
>       .set('basic_dic_match_status_sn', x.basic_dic_match_status_sn)
>       .set('basic_is_lenovo', x.basic_is_lenovo)
>       .set('basic_cn_uid', x.basic_cn_uid)
>       .set('basic_setup_dt', x.basic_setup_dt)
>       .set('basic_latest_reg_dt', x.basic_latest_reg_dt)
>       .set('basic_org_sn', x.basic_org_sn)
>       .set('basic_reg_sn', x.basic_reg_sn)
>       .set('basic_reg_address', x.basic_reg_address)
>       .set('basic_legal_rep', x.basic_legal_rep)
>       .set('basic_reg_capital', x.basic_reg_capital)
>       .set('basic_biz_keywords', x.basic_biz_keywords)
>       .set('basic_biz_range', x.basic_biz_range)
>       .set('basic_biz_dt_range', x.basic_biz_dt_range)
>       .set('basic_biz_address', x.basic_biz_address)
>       .set('basic_biz_tel', x.basic_biz_tel)
>       .set('basic_charge_office', x.basic_charge_office)
>       .set('acc_bank', x.acc_bank)
>       .set('acc_bank_branch', x.acc_bank_branch)
>       .set('acc_bank_sn', x.acc_bank_sn)
>       .set('acc_asset', x.acc_asset)
>       .set('acc_debt', x.acc_debt)
>       .set('acc_sales', x.acc_sales)
>       .set('acc_profit', x.acc_profit)
>       .set('acc_debt_rate', x.acc_debt_rate)
>       .set('acc_asset_last', x.acc_asset_last)
>       .set('acc_debt_last', x.acc_debt_last)
>       .set('acc_sales_last', x.acc_sales_last)
>       .set('acc_profit_last', x.acc_profit_last)
>       .set('acc_debt_rate_last', x.acc_debt_rate_last)
>       .set('other_credits', x.other_credits)
>       .set('other_website', x.other_website)
>       .set('other_email', x.other_email)
>       .set('other_size', x.other_size)
>       .set('other_deliver_days', x.other_deliver_days)
>       .set('other_deliver_address', x.other_deliver_address)
>       .set('other_transport', x.other_transport)
>       .set('default_contact_user_sn', x.default_contact_user_sn)
>       .set('creator_label', x.creator_label)
>       .set('contact_label', x.contact_label)
>       .set('lenovo_label', x.lenovo_label)
>       .set('id', x.id);
> 
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   createContact(newData) {
>     const url = '/_share/create_enterprise_list';
>     const listx = [];
>     const params = new HttpParams()
>       .set('label', newData['label'])
>       .set('basic_biz_tel', newData['basic_biz_tel'])
>       .set('basic_reg_capital', newData['basic_reg_capital'])
>       .set('basic_setup_dt', newData['basic_setup_dt'])
>       .set('basic_cn_uid', newData['basic_cn_uid']);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> }
diff -r app/pages/_share/enterprise_edit/index.ts app_bk/pages/_share/enterprise_edit/index.ts
1c1
< export * from './enterprise_edit.component';
---
> export * from './enterprise_edit.component';
diff -r app/pages/_share/enterprise_list/enterprise_list.component.ts app_bk/pages/_share/enterprise_list/enterprise_list.component.ts
1,88c1,88
< import {Component, OnInit} from '@angular/core';
< import {EnterpriseListService} from './enterprise_list.service';
< import {XEnterprise} from '../../@xmodel/XEnterprise';
< 
< @Component({
<   selector: 'ngx-share-enterprise-list',
<   templateUrl: './enterprise_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class EnterpriseListComponent implements OnInit {
< 
<   settings = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/enterprise_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   xs: XEnterprise[];
< 
<   constructor(private service: EnterpriseListService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<       res => {
<         this.xs = res;
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< }
< 
---
> import {Component, OnInit} from '@angular/core';
> import {EnterpriseListService} from './enterprise_list.service';
> import {XEnterprise} from '../../@xmodel/XEnterprise';
> 
> @Component({
>   selector: 'ngx-share-enterprise-list',
>   templateUrl: './enterprise_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class EnterpriseListComponent implements OnInit {
> 
>   settings = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   xs: XEnterprise[];
> 
>   constructor(private service: EnterpriseListService) {
>   }
> 
>   ngOnInit() {
>     this.service.getD().then(
>       res => {
>         this.xs = res;
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     console.error('对不起' + error);
>   }
> }
> 
diff -r app/pages/_share/enterprise_list/enterprise_list.html app_bk/pages/_share/enterprise_list/enterprise_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     平台企业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     平台企业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="xs">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/enterprise_list/enterprise_list.scss app_bk/pages/_share/enterprise_list/enterprise_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/enterprise_list/enterprise_list.service.ts app_bk/pages/_share/enterprise_list/enterprise_list.service.ts
1,51c1,51
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class EnterpriseListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XEnterprise[]> {
<     // return this.http.get('/_s_adamiya/get_enterprise_list').map((res) => res.json());
<     const url = '/_s_share/get_enterprise_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XEnterprise {
<     const x = new XEnterprise();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.basic_biz_tel = data['basic_biz_tel'];
<     x.basic_reg_capital = data['basic_reg_capital'];
<     x.level_label = data['level_label'];
<     x.type_label = data['type_label'];
<     x.basic_cn_uid = data['basic_cn_uid'];
<     x.basic_setup_dt = data['basic_setup_dt'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class EnterpriseListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(): Promise<XEnterprise[]> {
>     // return this.http.get('/_adamiya/get_enterprise_list').map((res) => res.json());
>     const url = '/_share/get_enterprise_list';
>     const params = new HttpParams()
>       .set('ln', '');
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XEnterprise {
>     const x = new XEnterprise();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.basic_biz_tel = data['basic_biz_tel'];
>     x.basic_reg_capital = data['basic_reg_capital'];
>     x.level_label = data['level_label'];
>     x.type_label = data['type_label'];
>     x.basic_cn_uid = data['basic_cn_uid'];
>     x.basic_setup_dt = data['basic_setup_dt'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> }
diff -r app/pages/_share/enterprise_list/index.ts app_bk/pages/_share/enterprise_list/index.ts
1c1
< export * from './enterprise_list.component';
---
> export * from './enterprise_list.component';
diff -r app/pages/_share/product_compare/index.ts app_bk/pages/_share/product_compare/index.ts
1c1
< export * from './product_compare.component';
---
> export * from './product_compare.component';
diff -r app/pages/_share/product_compare/product_compare.component.ts app_bk/pages/_share/product_compare/product_compare.component.ts
1,130c1,393
< import {Component, OnInit} from '@angular/core';
< import {ProductCompareService} from './product_compare.service';
< import {XProductCompare} from '../../@xmodel/XProductCompare';
< 
< @Component({
<   selector: 'ngx-share-product-compare',
<   templateUrl: './product_compare.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class ProductCompareComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<         editable: false,
<         filter: {
<           type: 'list',
<           config: {
<             selectText: '全部...',
<             list: [
<               { value: '默认内置', title: '默认内置' },
<               { value: '已上市', title: '已上市' },
<               { value: '未计划上市', title: '未计划上市' },
<               { value: '预备上市', title: '预备上市' },
<             ],
<           },
<         },
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<         filter: {
<           type: 'list',
<           config: {
<             selectText: '全部...',
<             list: [
<               { value: '默认内置', title: '默认内置' },
<             ],
<           },
<         },
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_nda: {
<         title: 'NDA签证',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_s_share/enterprise_edit/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<         editable: false,
<       },
<     },
<   };
< 
<   xs: XProductCompare[];
< 
<   constructor(private service: ProductCompareService) {
<   }
< 
<   ngOnInit() {
<     this.service.getD().then(
<       res => {
<         this.xs = res;
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     console.error('对不起' + error);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要移出对比吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {ProductCompareService} from './product_compare.service'
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> import {ActivatedRoute} from '@angular/router';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-product-compare',
>   styleUrls: ['product_compare.scss'],
>   templateUrl: 'product_compare.html',
>   providers: [ProductCompareService],
> 
> })
> export class ProductCompareComponent implements OnInit {
>   private sn: string;
>   public xes: XEnterprise;
>   public CurrentX: XEnterprise;
>   settingsProject = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsProduct = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsUserContact = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsUserLenovo = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsFile = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsScene = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择场景',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsIndustry = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择行业',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSourceFile: Observable<any>;
>   dataSetFile: Array<any> = [];
>   dataSourceProject: Observable<any>;
>   dataSetProject: Array<any> = [];
>   dataSourceProduct: Observable<any>;
>   dataSetProduct: Array<any> = [];
>   dataSourceUserLenovo: Observable<any>;
>   dataSetUserLenovo: Array<any> = [];
>   dataSourceUserContact: Observable<any>;
>   dataSetUserContact: Array<any> = [];
>   dataSourceIndustry: Observable<any>;
>   dataSetIndustry: Array<any> = [];
>   dataSourceScene: Observable<any>;
>   dataSetScene: Array<any> = [];
> 
>   constructor(private service: ProductCompareService, public route: ActivatedRoute) {
>     this.sn = this.route.snapshot.params['sn'];
>     this.getD();
>     this.dataSourceIndustry = this.service.getDIndustry(this.sn);
>     this.dataSourceScene = this.service.getDScene(this.sn);
>     this.dataSourceFile = this.service.getDFile(this.sn);
>     this.dataSourceProject = this.service.getDProject(this.sn);
>     this.dataSourceProduct = this.service.getDProduct(this.sn);
>     this.dataSourceUserContact = this.service.getDUserContact(this.sn);
>     this.dataSourceUserLenovo = this.service.getDUserLenovo(this.sn);
>   }
> 
>   getD() {
>     this.service.getD(this.sn).then(
>       res => {
>         this.xes = res;
>         this.CurrentX = this.xes[0];
>         if (this.CurrentX && this.CurrentX.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   ngOnInit() {
>     this.dataSourceIndustry.subscribe(
>       (data) => this.dataSetIndustry = data,
>     );
>     this.dataSourceScene.subscribe(
>       (data) => this.dataSetScene = data,
>     );
>     this.dataSourceFile.subscribe(
>       (data) => this.dataSetFile = data,
>     );
>     this.dataSourceUserLenovo.subscribe(
>       (data) => this.dataSetUserLenovo = data,
>     );
>     this.dataSourceUserContact.subscribe(
>       (data) => this.dataSetUserContact = data,
>     );
>     this.dataSourceProduct.subscribe(
>       (data) => this.dataSetProduct = data,
>     );
>     this.dataSourceProject.subscribe(
>       (data) => this.dataSetProject = data,
>     );
>   }
> 
>   backD() {
>     window.location.href = '#/pages_a/_adamiya/all_enterprise_list';
>   }
> 
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentX.label.trim() !== '') {
>       this.service.updateD(this.CurrentX);
>       window.alert('已修改成功！');
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> 
> }
diff -r app/pages/_share/product_compare/product_compare.html app_bk/pages/_share/product_compare/product_compare.html
1,10c1,75
< <nb-card>
<   <nb-card-header>
<     产品对比
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="xs" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <div class="row">
>   <div class="col-md-10">
>     <nb-tabset fullWidth>
>       <nb-tab tabTitle="企业基本信息">
>         <div class="row">
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="label">名称</label>
>               <input type="text" readonly="readonly" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_cn_uid">统一信用代码</label>
>               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_reg_capital">注册资本</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_setup_dt">设立日期</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_address">地址</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_tel">电话</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
>             </div>
>           </div>
>         </div>
>       </nb-tab>
>       <nb-tab tabTitle="联系人">
>         <span>Content #2</span>
>       </nb-tab>
>       <nb-tab tabTitle="财务信息">
>         <span>Content #13</span>
>       </nb-tab>
>       <nb-tab tabTitle="项目信息">
>         <span>Content #33</span>
>       </nb-tab>
>       <nb-tab tabTitle="产品信息">
>         <span>Content #34</span>
>       </nb-tab>
>       <nb-tab tabTitle="附件信息">
>         <span>Content #35</span>
>       </nb-tab>
>       <nb-tab tabTitle="其他信息">
>         <span>Content #35</span>
>       </nb-tab>
>     </nb-tabset>
> 
>     <div class="col-md-12 col-lg-12">
>       <button class="btn btn-success">返回列表</button>
>     </div>
> 
>   </div>
> 
>   <div class="col-md-2">aa
>   </div>
> 
> 
> </div>
> 
diff -r app/pages/_share/product_compare/product_compare.scss app_bk/pages/_share/product_compare/product_compare.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/product_compare/product_compare.service.ts app_bk/pages/_share/product_compare/product_compare.service.ts
1,59c1,77
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XProductCompare } from '../../@xmodel/XProductCompare';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class ProductCompareService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(): Promise<XProductCompare[]> {
<     // return this.http.get('/_s_adamiya/get_enterprise_list').map((res) => res.json());
<     const url = '/_s_share/get_enterprise_list';
<     const params = new HttpParams()
<       .set('ln', '');
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XProductCompare {
<     const x = new XProductCompare();
<     x.p1 = data['p1'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   deleteD(newData) {
<     const url = '/_s_share/delete_to_recycle';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', 'enterprise_info');
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsE = new URLSearchParams();
> 
> @Injectable()
> export class ProductCompareService {
>   constructor(private http: Http) {
>   };
> 
>   getD(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_detail';
>     return this.http.post(url, paramsE, options).toPromise().then(
>       res => res.json() as XEnterprise).catch(this.handleError);
>   }
> 
>   getDIndustry(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_industry_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDScene(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_scene_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserContact(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_contact_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserLenovo(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_lenovo_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProject(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_project_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProduct(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_product_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDFile(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_file_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('对不起，' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   updateD(xdata) {
>     const url = '/_share/edit_enterprise_detail';
>     this.http.post(url, xdata, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/product_detail/index.ts app_bk/pages/_share/product_detail/index.ts
1c1
< export * from './product_detail.component';
---
> export * from './product_detail.component';
diff -r app/pages/_share/product_detail/product_detail.component.ts app_bk/pages/_share/product_detail/product_detail.component.ts
1,395c1,395
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {ProductDetailService} from './product_detail.service'
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< import {ActivatedRoute} from '@angular/router';
< import {Observable} from 'rxjs/Observable';
< import './ckeditor.loader';
< import 'ckeditor';
< 
< @Component({
<   selector: 'ngx-share-product-detail',
<   styleUrls: ['product_detail.scss'],
<   templateUrl: 'product_detail.html',
<   providers: [ProductDetailService],
< 
< })
< export class ProductDetailComponent implements OnInit {
<   private sn: string;
<   public xes: XEnterprise;
<   public CurrentX: XEnterprise;
<   settingsProject = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/enterprise_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsProduct = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/enterprise_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsUserContact = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsUserLenovo = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsFile = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   settingsScene = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       Actions: {
<         title: '选择场景',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsIndustry = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       Actions: {
<         title: '选择行业',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSourceFile: Observable<any>;
<   dataSetFile: Array<any> = [];
<   dataSourceProject: Observable<any>;
<   dataSetProject: Array<any> = [];
<   dataSourceProduct: Observable<any>;
<   dataSetProduct: Array<any> = [];
<   dataSourceUserLenovo: Observable<any>;
<   dataSetUserLenovo: Array<any> = [];
<   dataSourceUserContact: Observable<any>;
<   dataSetUserContact: Array<any> = [];
<   dataSourceIndustry: Observable<any>;
<   dataSetIndustry: Array<any> = [];
<   dataSourceScene: Observable<any>;
<   dataSetScene: Array<any> = [];
< 
<   constructor(private service: ProductDetailService, public route: ActivatedRoute) {
<     this.sn = this.route.snapshot.params['sn'];
<     this.getD();
<     this.dataSourceIndustry = this.service.getDIndustry(this.sn);
<     this.dataSourceScene = this.service.getDScene(this.sn);
<     this.dataSourceFile = this.service.getDFile(this.sn);
<     this.dataSourceProject = this.service.getDProject(this.sn);
<     this.dataSourceProduct = this.service.getDProduct(this.sn);
<     this.dataSourceUserContact = this.service.getDUserContact(this.sn);
<     this.dataSourceUserLenovo = this.service.getDUserLenovo(this.sn);
<   }
< 
<   getD() {
<     this.service.getD(this.sn).then(
<       res => {
<         this.xes = res;
<         this.CurrentX = this.xes[0];
<         if (this.CurrentX && this.CurrentX.sn !== '') {
<         }else {
<           window.alert('对不起，您查找的信息不存在！');
<         }
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   ngOnInit() {
<     this.dataSourceIndustry.subscribe(
<       (data) => this.dataSetIndustry = data,
<     );
<     this.dataSourceScene.subscribe(
<       (data) => this.dataSetScene = data,
<     );
<     this.dataSourceFile.subscribe(
<       (data) => this.dataSetFile = data,
<     );
<     this.dataSourceUserLenovo.subscribe(
<       (data) => this.dataSetUserLenovo = data,
<     );
<     this.dataSourceUserContact.subscribe(
<       (data) => this.dataSetUserContact = data,
<     );
<     this.dataSourceProduct.subscribe(
<       (data) => this.dataSetProduct = data,
<     );
<     this.dataSourceProject.subscribe(
<       (data) => this.dataSetProject = data,
<     );
<   }
< 
<   backD() {
<     window.location.href = '#/pages_a/_s_adamiya/all_enterprise_list';
<   }
< 
<   updateD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (this.CurrentX.label.trim() !== '') {
<       this.service.updateD(this.CurrentX);
<       window.alert('已修改成功！');
<     }else {
<       window.alert('对不起，请输入正确的信息！')
<     }
<   }
< 
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {ProductDetailService} from './product_detail.service'
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> import {ActivatedRoute} from '@angular/router';
> import {Observable} from 'rxjs/Observable';
> import './ckeditor.loader';
> import 'ckeditor';
> 
> @Component({
>   selector: 'ngx-share-product-detail',
>   styleUrls: ['product_detail.scss'],
>   templateUrl: 'product_detail.html',
>   providers: [ProductDetailService],
> 
> })
> export class ProductDetailComponent implements OnInit {
>   private sn: string;
>   public xes: XEnterprise;
>   public CurrentX: XEnterprise;
>   settingsProject = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsProduct = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/enterprise_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsUserContact = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsUserLenovo = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsFile = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   settingsScene = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择场景',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsIndustry = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       Actions: {
>         title: '选择行业',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<nb-checkbox [(ngModel)]="isNewestOnTop">row.label</nb-checkbox>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSourceFile: Observable<any>;
>   dataSetFile: Array<any> = [];
>   dataSourceProject: Observable<any>;
>   dataSetProject: Array<any> = [];
>   dataSourceProduct: Observable<any>;
>   dataSetProduct: Array<any> = [];
>   dataSourceUserLenovo: Observable<any>;
>   dataSetUserLenovo: Array<any> = [];
>   dataSourceUserContact: Observable<any>;
>   dataSetUserContact: Array<any> = [];
>   dataSourceIndustry: Observable<any>;
>   dataSetIndustry: Array<any> = [];
>   dataSourceScene: Observable<any>;
>   dataSetScene: Array<any> = [];
> 
>   constructor(private service: ProductDetailService, public route: ActivatedRoute) {
>     this.sn = this.route.snapshot.params['sn'];
>     this.getD();
>     this.dataSourceIndustry = this.service.getDIndustry(this.sn);
>     this.dataSourceScene = this.service.getDScene(this.sn);
>     this.dataSourceFile = this.service.getDFile(this.sn);
>     this.dataSourceProject = this.service.getDProject(this.sn);
>     this.dataSourceProduct = this.service.getDProduct(this.sn);
>     this.dataSourceUserContact = this.service.getDUserContact(this.sn);
>     this.dataSourceUserLenovo = this.service.getDUserLenovo(this.sn);
>   }
> 
>   getD() {
>     this.service.getD(this.sn).then(
>       res => {
>         this.xes = res;
>         this.CurrentX = this.xes[0];
>         if (this.CurrentX && this.CurrentX.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   ngOnInit() {
>     this.dataSourceIndustry.subscribe(
>       (data) => this.dataSetIndustry = data,
>     );
>     this.dataSourceScene.subscribe(
>       (data) => this.dataSetScene = data,
>     );
>     this.dataSourceFile.subscribe(
>       (data) => this.dataSetFile = data,
>     );
>     this.dataSourceUserLenovo.subscribe(
>       (data) => this.dataSetUserLenovo = data,
>     );
>     this.dataSourceUserContact.subscribe(
>       (data) => this.dataSetUserContact = data,
>     );
>     this.dataSourceProduct.subscribe(
>       (data) => this.dataSetProduct = data,
>     );
>     this.dataSourceProject.subscribe(
>       (data) => this.dataSetProject = data,
>     );
>   }
> 
>   backD() {
>     window.location.href = '#/pages_a/_adamiya/all_enterprise_list';
>   }
> 
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentX.label.trim() !== '') {
>       this.service.updateD(this.CurrentX);
>       window.alert('已修改成功！');
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> 
> }
diff -r app/pages/_share/product_detail/product_detail.html app_bk/pages/_share/product_detail/product_detail.html
1,76c1,76
< <div class="row">
<   <div class="col-md-10">
<     <nb-tabset fullWidth>
<       <nb-tab tabTitle="企业基本信息">
<         <div class="row">
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="label">名称</label>
<               <input type="text" readonly="readonly" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_cn_uid">统一信用代码</label>
<               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_reg_capital">注册资本</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_setup_dt">设立日期</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_address">地址</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_tel">电话</label>
<               <input type="text" readonly="readonly" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
<             </div>
<           </div>
<         </div>
<       </nb-tab>
<       <nb-tab tabTitle="联系人">
<         <span>Content #2</span>
<       </nb-tab>
<       <nb-tab tabTitle="财务信息">
<         <span>Content #13</span>
<       </nb-tab>
<       <nb-tab tabTitle="项目信息">
<         <span>Content #33</span>
<       </nb-tab>
<       <nb-tab tabTitle="产品信息">
<         <span>Content #34</span>
<       </nb-tab>
<       <nb-tab tabTitle="附件信息">
<         <span>Content #35</span>
<       </nb-tab>
<       <nb-tab tabTitle="其他信息">
<         <span>Content #35</span>
<       </nb-tab>
<     </nb-tabset>
< 
<     <div class="col-md-12 col-lg-12">
<       <button class="btn btn-success">返回列表</button>
<     </div>
< 
<   </div>
< 
<   <div class="col-md-2">
<     <ckeditor [config]="{ extraPlugins: 'divarea', height: '320' }"></ckeditor>
<   </div>
< 
< 
< </div>
< 
---
> <div class="row">
>   <div class="col-md-10">
>     <nb-tabset fullWidth>
>       <nb-tab tabTitle="企业基本信息">
>         <div class="row">
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="label">名称</label>
>               <input type="text" readonly="readonly" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_cn_uid">统一信用代码</label>
>               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_reg_capital">注册资本</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentX.basic_reg_capital">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_setup_dt">设立日期</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_address">地址</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentX.basic_biz_address">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_tel">电话</label>
>               <input type="text" readonly="readonly" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
>             </div>
>           </div>
>         </div>
>       </nb-tab>
>       <nb-tab tabTitle="联系人">
>         <span>Content #2</span>
>       </nb-tab>
>       <nb-tab tabTitle="财务信息">
>         <span>Content #13</span>
>       </nb-tab>
>       <nb-tab tabTitle="项目信息">
>         <span>Content #33</span>
>       </nb-tab>
>       <nb-tab tabTitle="产品信息">
>         <span>Content #34</span>
>       </nb-tab>
>       <nb-tab tabTitle="附件信息">
>         <span>Content #35</span>
>       </nb-tab>
>       <nb-tab tabTitle="其他信息">
>         <span>Content #35</span>
>       </nb-tab>
>     </nb-tabset>
> 
>     <div class="col-md-12 col-lg-12">
>       <button class="btn btn-success">返回列表</button>
>     </div>
> 
>   </div>
> 
>   <div class="col-md-2">
>     <ckeditor [config]="{ extraPlugins: 'divarea', height: '320' }"></ckeditor>
>   </div>
> 
> 
> </div>
> 
diff -r app/pages/_share/product_detail/product_detail.scss app_bk/pages/_share/product_detail/product_detail.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/product_detail/product_detail.service.ts app_bk/pages/_share/product_detail/product_detail.service.ts
1,77c1,77
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import { XEnterprise } from '../../@xmodel/XEnterprise';
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsE = new URLSearchParams();
< 
< @Injectable()
< export class ProductDetailService {
<   constructor(private http: Http) {
<   };
< 
<   getD(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_detail';
<     return this.http.post(url, paramsE, options).toPromise().then(
<       res => res.json() as XEnterprise).catch(this.handleError);
<   }
< 
<   getDIndustry(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_industry_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDScene(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_scene_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDUserContact(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_contact_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDUserLenovo(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_user_lenovo_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDProject(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_project_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDProduct(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_product_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   getDFile(sn) {
<     paramsE.set('sn', sn);
<     const url = '/_s_share/get_enterprise_file_list';
<     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
<   }
< 
<   private handleError(error: any): Promise<any> {
<     window.alert('对不起，' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   updateD(xdata) {
<     const url = '/_s_share/edit_enterprise_detail';
<     this.http.post(url, xdata, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsE = new URLSearchParams();
> 
> @Injectable()
> export class ProductDetailService {
>   constructor(private http: Http) {
>   };
> 
>   getD(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_detail';
>     return this.http.post(url, paramsE, options).toPromise().then(
>       res => res.json() as XEnterprise).catch(this.handleError);
>   }
> 
>   getDIndustry(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_industry_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDScene(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_scene_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserContact(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_contact_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDUserLenovo(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_user_lenovo_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProject(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_project_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDProduct(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_product_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   getDFile(sn) {
>     paramsE.set('sn', sn);
>     const url = '/_share/get_enterprise_file_list';
>     return this.http.post(url, paramsE, options).map((res) => res.json()).catch(this.handleError);
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('对不起，' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   updateD(xdata) {
>     const url = '/_share/edit_enterprise_detail';
>     this.http.post(url, xdata, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/product_edit/index.ts app_bk/pages/_share/product_edit/index.ts
1c1
< export * from './product_edit.component';
---
> export * from './product_edit.component';
diff -r app/pages/_share/product_edit/product_edit.component.ts app_bk/pages/_share/product_edit/product_edit.component.ts
1,241c1,83
< import {Component, OnInit} from '@angular/core';
< import {ProductEditService} from './product_edit.service';
< import {ActivatedRoute} from '@angular/router';
< import { XProduct } from '../../@xmodel/XProduct';
< import { XKV } from '../../@xmodel/XKV';
< import { XIndustry } from '../../@xmodel/XIndustry';
< import { XScene } from '../../@xmodel/XScene';
< 
< @Component({
<   selector: 'ngx-share-product-edit',
<   styleUrls: ['product_edit.scss'],
<   templateUrl: 'product_edit.html',
<   providers: [ProductEditService],
< 
< })
< export class ProductEditComponent implements OnInit {
<   private sn: string;
<   public lastYear: number;
<   public thisYear: number;
<   public CurrentX: XProduct;
<   settingsFile = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   xsProduct: XProduct[];
<   xsELevel: XKV[];
<   xsEType: XKV[];
<   xsEStatus: XKV[];
<   xsEClass: XKV[];
< 
<   xsScene: XScene[];
<   xsSceneNA: XScene[];
<   settingsScene = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '已选场景',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
<   settingsSceneNA = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '待选场景',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
< 
<   xsIndustry: XIndustry[];
<   xsIndustryNA: XIndustry[];
<   settingsIndustry = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '已选行业',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
<   settingsIndustryNA = {
<     selectMode: 'multi',
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       label: {
<         editable: false,
<         title: '待选行业',
<         type: 'string',
<         filter: false,
<       },
<     },
<   };
< 
<   constructor(private service: ProductEditService, public route: ActivatedRoute) {
<     const dateObj = new Date();
<     this.thisYear = dateObj.getFullYear();
<     this.lastYear = dateObj.getFullYear() - 1;
<     this.sn = this.route.snapshot.params['sn'];
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   ngOnInit() {
<     this.service.getDELevel().then(
<       res => {
<         this.xsELevel = res;
<       }).catch(this.handleError);
<     this.service.getDEType().then(
<       res => {
<         this.xsEType = res;
<       }).catch(this.handleError);
<     this.service.getDEStatus().then(
<       res => {
<         this.xsEStatus = res;
<       }).catch(this.handleError);
<     this.service.getD(this.sn).then(
<       res => {
<         this.xsProduct = res;
<         this.CurrentX = this.xsProduct[0];
<       }).catch(this.handleError);
<     this.service.getDIndustry(this.sn).then(
<       res => {
<         this.xsIndustry = res;
<       }).catch(this.handleError);
<     this.service.getDScene(this.sn).then(
<       res => {
<         this.xsScene = res;
<       }).catch(this.handleError);
<     this.service.getDIndustryNA(this.sn).then(
<       res => {
<         this.xsIndustryNA = res;
<       }).catch(this.handleError);
<     this.service.getDSceneNA(this.sn).then(
<       res => {
<         this.xsSceneNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onSUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsScene = this.xsScene.filter(x => x.sn !== r.sn);
<     this.service.deleteScene(this.sn, r.sn).then(
<       res => {
<         this.xsSceneNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onSNAUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsSceneNA = this.xsSceneNA.filter(x => x.sn !== r.sn);
<     this.service.addScene(this.sn, r.sn).then(
<       res => {
<         this.xsScene = res;
<       }).catch(this.handleError);
<   }
< 
<   onIUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsIndustry = this.xsIndustry.filter(x => x.sn !== r.sn);
<     this.service.deleteIndustry(this.sn, r.sn).then(
<       res => {
<         this.xsIndustryNA = res;
<       }).catch(this.handleError);
<   }
< 
<   onINAUserRowSelect(event): void {
<     const r = event.selected.pop();
<     this.xsIndustryNA = this.xsIndustryNA.filter(x => x.sn !== r.sn);
<     this.service.addIndustry(this.sn, r.sn).then(
<       res => {
<         this.xsIndustry = res;
<       }).catch(this.handleError);
<   }
< //  this.xsIndustryNA.forEach((val, idx, array) => {
< // val: 当前值
< // idx：当前index
< // array: Array
< 
< 
<   backD() {
<     window.location.href = '#/pages_a/_s_adamiya/all_product_list';
<   }
< 
<   updateD() {
<     this.service.editD(this.CurrentX);
<   }
< 
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {ProductEditService} from './product_edit.service'
>  
> import 'rxjs/Rx';
>  
> import {XEnterprise} from '../../@xmodel/XEnterprise';
> import {ActivatedRoute} from '@angular/router';
> 
> @Component({
>   selector: 'ngx-share-product-edit',
>   styleUrls: ['product_edit.scss'],
>   templateUrl: 'product_edit.html',
>   providers: [ProductEditService],
> 
> })
> export class ProductEditComponent implements OnInit {
>   productImg:string ="assets/images/camera1.jpg";
>   products: any[] = [{
>  
>     source: 'assets/images/camera1.jpg',
>   }, {
>      
>     source: 'assets/images/camera2.jpg',
>   }, {
>    
>     source: 'assets/images/camera3.jpg',
>   }, {
>   
>     source: 'assets/images/camera4.jpg',
>   }]; 
> 
>   private id: string;
>   public xenterprises: XEnterprise;
>   public CurrentXEnterprise: XEnterprise;
>   constructor(private service: ProductEditService, public route: ActivatedRoute) {
>     this.id = this.route.snapshot.params['id'];
>     this.getD();
>   }
> 
>   getD() {
>     this.service.getD(this.id).then(
>       res => {
>         this.xenterprises = res;
>         this.CurrentXEnterprise = this.xenterprises[0];
>         if (this.CurrentXEnterprise && this.CurrentXEnterprise.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   count(obj) {
>     const objType = typeof obj;
>     if (objType === 'string') {
>       return obj.length;
>     }else {
>       let objLen = 0;
>       obj.forEach(objLen++);
>       return objLen;
>     }
>   }
>   
> 
>   ngOnInit() {
>      
>   }
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentXEnterprise.label.trim() !== '') {
>       this.service.updateD(this.CurrentXEnterprise);
>       window.alert('已修改成功！');
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> }
diff -r app/pages/_share/product_edit/product_edit.html app_bk/pages/_share/product_edit/product_edit.html
1,83c1,130
< <div class="row">
<   <div class="col-md-8">
<     <nb-card>
<       <nb-card-header>
<         产品详细信息
<       </nb-card-header>
<       <nb-card-body>
<         <nb-tabset fullWidth>
<           <nb-tab tabTitle="基本">
<             <div class="row">
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="label">产品名称</label>
<                   <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="type_sn">产品类型</label>
<                   <select id="type_sn" class="form-control" name="type_sn"  [(ngModel)]="this.CurrentX.type_sn">
<                     <option *ngFor="let item of this.xsEType" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="status_sn">产品状态</label>
<                   <select id="status_sn" class="form-control" name="status_sn"  [(ngModel)]="this.CurrentX.status_sn">
<                     <option *ngFor="let item of this.xsEStatus" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-12 col-lg-12">
<                 <div class="form-group">
<                   <label for="more_info">产品备注</label>
<                   <input type="text" class="form-control" id="more_info" name="more_info" [(ngModel)]="this.CurrentX.more_info">
<                 </div>
<               </div>
<             </div>
<           </nb-tab>
< 
<           <nb-tab tabTitle="附件">
<             <span>Content #35</span>
<             <ng2-smart-table [settings]="settingsFile" [source]="xsFile">
<             </ng2-smart-table>
<           </nb-tab>
<         </nb-tabset>
<         <hr />
<         <div class="col-md-12 col-lg-12">
<           <button (click)="backD()" class="btn btn-success">返回列表</button>
<           <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
<         </div>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card><nb-card-header>
<       行业关联
<     </nb-card-header>
<       <nb-card-body>
<         <ng2-smart-table [settings]="settingsIndustry" [source]="xsIndustry" (userRowSelect)="onIUserRowSelect($event)">
<         </ng2-smart-table>
<         <hr />
<         <ng2-smart-table [settings]="settingsIndustryNA" [source]="xsIndustryNA" (userRowSelect)="onINAUserRowSelect($event)">
<         </ng2-smart-table>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card><nb-card-header>
<       场景关联
<     </nb-card-header>
<       <nb-card-body>
<         <ng2-smart-table [settings]="settingsScene" [source]="xsScene" (userRowSelect)="onSUserRowSelect($event)">
<         </ng2-smart-table>
<         <hr />
<         <ng2-smart-table [settings]="settingsSceneNA" [source]="xsSceneNA" (userRowSelect)="onSNAUserRowSelect($event)">
<         </ng2-smart-table>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
---
>  
>  <nb-card size="xlarge">
>     <nb-card-header>
>       <div class="cameras-card-header">
>         <span class="cameras-card-title">产品详情</span> 
>       </div>
>     </nb-card-header>
>     <nb-card-body>
>       <div style="float: left; text-align: center"  > 
>           
>               <img src="{{productImg}}"width="750px" height="500px"> 
>           
>           
>       </div>
>       <div style="margin-left: 800px">
>         <div class="row">
>        
>             <div style="margin-left: 50px; margin-top: 15px; "> 
>               <label style=" width:100%"><h5>立式插排插座带usb充电智能家用创意多功能多用排插插线板接线板</h5></label>
>             </div>
>                
>         </div> 
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >产品SKU</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control"  id="sku" name="sku" [(ngModel)]="this.CurrentXEnterprise.sku" >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >使用场景</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >行业类别</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >零售价</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control"   id="price_sale" name="price_sale" [(ngModel)]="this.CurrentXEnterprise.price_sale"  >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >出货价</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" id="price_out" name="price_out" [(ngModel)]="this.CurrentXEnterprise.price_out"  >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >MOQ</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control"  id="moq" name="moq" [(ngModel)]="this.CurrentXEnterprise.moq">
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >产品特性关键字</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >公司</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" >
>             </div>
>       </div>
>       <div class="row" style="margin-top: 5px">
>        
>           <div style="margin-left: 50px; margin-top: 15px; "> 
>             <label >产品成熟度</label>
>           </div>
>             <div class="col-sm-6" style="margin-left: 50px"> 
>               <input type="text" class="form-control" >
>             </div>
>       </div>
>     </div>
>     <div class="col-md-12 col-lg-12">
>         <button class="btn btn-success">返回列表</button>
>         <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
>       </div>
>      
>     </nb-card-body>
>      
>     
>   </nb-card>
> 
> <nb-card size="xlarge">
>     <nb-card-header>
>       <div class="cameras-card-header">
>         <span class="cameras-card-title">产品图文详情</span> 
>       </div>
>     </nb-card-header>
>     <nb-card-body>
>       <div class="thumbnail" *ngFor="let product of products"> 
>           <img src="{{product.source}}" style="margin-top: 50px">  
>       </div>
>  
>     </nb-card-body>
>      
>     
>   </nb-card>
>   
\ 文件尾没有 newline 字符
diff -r app/pages/_share/product_edit/product_edit.scss app_bk/pages/_share/product_edit/product_edit.scss
1,45c1,159
< @import '../../../@theme/styles/themes';
< @import '../../../../../node_modules/bootstrap/scss/mixins/breakpoints';
< @import '../../../../../node_modules/@nebular/theme/styles/global/bootstrap/breakpoints';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< 
<   nb-tabset {
<     height: 100%;
<     display: flex;
<     flex-direction: column;
<   }
< 
<   nb-tab {
<     padding: nb-theme(padding);
<   }
< 
<   /deep/ ngx-tab1, /deep/ ngx-tab2 {
<     display: block;
<     padding: nb-theme(padding);
<   }
< 
<   @include media-breakpoint-down(xs) {
<     nb-tabset /deep/ul {
<       font-size: 1rem;
<       padding: 0 0.25rem;
<     }
<   }
< }
---
> @import '../../../@theme/styles/themes';
> @import '~@nebular/theme/styles/global/bootstrap/breakpoints';
> @import '~bootstrap/scss/mixins/breakpoints';
> 
> @include nb-install-component() {
>   nb-card-header {
>     padding: 0;
>     border: none;
>   }
> 
>   nb-card-body {
>     padding: 0;
>     position: relative;
>   }
> 
>   nb-card-footer {
>     padding: 1rem 0;
>     border: none;
>   }
> 
>   .cameras-card-header {
>     display: flex;
> 
>     .cameras-card-title {
>       flex: 1;
>       padding: 1.25rem;
>     }
>   }
>   label {display:block; width:120px; text-align:right;}
>   .cameras-filter {
>     display: flex;
> 
>     a {
>       font-size: 2.5rem;
>       padding: 0 0.75rem;
>       display: flex;
>       flex-direction: column;
>       justify-content: center;
>       color: nb-theme(color-fg);
>     }
> 
>     a:first-child {
>       @include nb-ltr(border-left, 1px solid nb-theme(separator));
>       @include nb-rtl(border-right, 1px solid nb-theme(separator));
>     }
> 
>     a:last-child {
>       @include nb-ltr(border-top-right-radius, nb-theme(card-border-radius));
>       @include nb-rtl(border-top-left-radius, nb-theme(card-border-radius));
>     }
> 
>     a.active {
>       background-color: nb-theme(color-bg-active);
>       color: nb-theme(color-fg-heading);
>       border: none;
>     }
>   }
> 
>   .cameras {
>     position: absolute;
>     display: flex;
>     flex-wrap: wrap;
>     width: 100%;
>     height: 100%;
>   }
> 
>   .cameras.single-view {
>     .camera {
>       height: 100%;
>       width: 100%;
> 
>       &::before {
>         height: 100%;
>       }
>     }
>   }
> 
>   .camera {
>     position: relative;
>     background-position: center;
>     background-size: cover;
>     height: 50%;
>     padding: 0;
> 
>     span {
>       position: absolute;
>       bottom: 0;
>       width: 100%;
>       color: white;
>       background: rgba(0, 0, 0, 0.4);
>       font-family: nb-theme(font-secondary);
>       font-weight: nb-theme(font-weight-bolder);
>       font-size: 1.25rem;
>       padding: 0.5rem 1rem;
>     }
> 
>     &::before {
>       background-color: rgba(255, 255, 255, 0.1);
>       content: '';
>       position: absolute;
>       width: 100%;
>       height: 100%;
>       opacity: 1;
>     }
> 
>     &:hover::before {
>       opacity: 0;
>     }
>   }
> 
>   nb-action {
>     padding: 0 0.5rem 0 0;
> 
>     i {
>       color: nb-theme(color-fg);
>       font-size: 3rem;
>       margin-right: 0.5rem;
>     }
> 
>     span {
>       font-family: nb-theme(font-secondary);
>       font-weight: nb-theme(font-weight-bold);
>       color: nb-theme(color-fg-heading);
>       text-transform: uppercase;
>     }
>   }
> 
>   @include nb-for-theme(cosmic) {
>     .cameras-filter a.active {
>       color: nb-theme(color-fg-highlight);
>     }
> 
>     .camera {
>       span {
>         background: rgba(88, 73, 184, 0.5);
>       }
> 
>       &::before {
>         background-color: rgba(0, 0, 0, 0.2);
>       }
>     }
> 
>     nb-action span {
>       font-weight: nb-theme(font-weight-bolder);
>     }
>   }
> 
>   @include media-breakpoint-down(lg) {
>     nb-action {
>       padding: 0;
>       i {
>         margin: 0;
>       }
>       span {
>         display: none;
>       }
>     }
>   }
> }
diff -r app/pages/_share/product_edit/product_edit.service.ts app_bk/pages/_share/product_edit/product_edit.service.ts
1,425c1,35
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XProduct } from '../../@xmodel/XProduct';
< import { XIndustry } from '../../@xmodel/XIndustry';
< import { XScene } from '../../@xmodel/XScene';
< import { XKV } from '../../@xmodel/XKV';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset =utf-8'});
< 
< @Injectable()
< export class ProductEditService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(sn): Promise<XProduct[]> {
<     const url = '/_s_share/get_product_detail';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustry(sn) {
<     const url = '/_s_share/get_product_industry_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', sn);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setIndustry(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDIndustryNA(sn) {
<     const url = '/_s_share/get_product_industry_na_list';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', sn);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setIndustry(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   addIndustry(esn, isn) {
<     const url = '/_s_share/add_product_industry';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('isn', isn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setIndustry(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   deleteIndustry(esn, isn) {
<     const url = '/_s_share/delete_product_industry';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('isn', isn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setIndustry(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   setIndustry(data: any): XIndustry {
<     const x = new XIndustry();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.is_checked = data['is_checked'];
<     return x;
<   }
< 
<   getDScene(sn) {
<     const url = '/_s_share/get_product_scene_list';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setScene(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDSceneNA(sn) {
<     const url = '/_s_share/get_product_scene_na_list';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setScene(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   addScene(esn, ssn) {
<     const url = '/_s_share/add_product_scene';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('ssn', ssn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setScene(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   deleteScene(esn, ssn) {
<     const url = '/_s_share/delete_product_scene';
<     const params = new HttpParams()
<       .set('esn', esn)
<       .set('ssn', ssn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         const count = (<Array<string>>data).length;
<         for (let i = 0; i < count; i++) {
<           listx.push(this.setScene(data[i]));
<         }
<         return listx;
<       },
<     ).catch(this.handleError);
<   }
< 
<   setScene(data: any): XScene {
<     const x = new XScene();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.is_checked = data['is_checked'];
<     return x;
<   }
< 
<   getDUserContact(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_product_user_contact_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDUserLenovo(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_product_user_lenovo_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProject(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_product_project_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProduct(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_product_product_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDFile(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_product_file_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDEType() {
<     const params = new HttpParams()
<       .set('en', 'product_type');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDEStatus() {
<     const params = new HttpParams()
<       .set('en', 'product_status');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDELevel() {
<     const params = new HttpParams()
<       .set('en', 'product_level');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setKV(data: any): XKV {
<     const x = new XKV();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     return x;
<   }
< 
<   setX(data: any): XProduct {
<     const x = new XProduct();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.creator_sn = data['creator_sn'];
<     x.create_dt = data['create_dt'];
<     x.custom_code = data['custom_code'];
<     x.last_update_dt = data['last_update_dt'];
<     x.display_code = data['display_code'];
<     x.is_deleted = data['is_deleted'];
<     x.is_na = data['is_na'];
<     x.class_sn = data['class_sn'];
<     x.type_sn = data['type_sn'];
<     x.status_sn = data['status_sn'];
<     x.level_sn = data['level_sn'];
<     x.class_label = data['class_label'];
<     x.type_label = data['type_label'];
<     x.level_label = data['level_label'];
<     x.status_label = data['status_label'];
<     x.more_info = data['more_info'];
<     x.seo_tag = data['seo_tag'];
<     return x;
<   }
< 
<   editD(x) {
<     const url = '/_s_share/edit_product_detail';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', x.sn)
<       .set('label', x.label)
<       .set('creator_sn', x.creator_sn)
<       .set('create_dt', x.create_dt)
<       .set('custom_code', x.custom_code)
<       .set('last_update_dt', x.last_update_dt)
<       .set('display_code', x.display_code)
<       .set('is_deleted', x.is_deleted)
<       .set('is_na', x.is_na)
<       .set('class_sn', x.class_sn)
<       .set('type_sn', x.type_sn)
<       .set('status_sn', x.status_sn)
<       .set('level_sn', x.level_sn)
<       .set('class_label', x.class_label)
<       .set('type_label', x.type_label)
<       .set('level_label', x.level_label)
<       .set('status_label', x.status_label)
<       .set('more_info', x.more_info)
<       .set('seo_tag', x.seo_tag)
<       .set('id', x.id);
< 
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<         window.alert(data);
<       },
<     ).catch(this.handleError);
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XEnterprise } from '../../@xmodel/XEnterprise';
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsE = new URLSearchParams();
> 
> 
> @Injectable()
> export class ProductEditService {
>     constructor(private http: Http) {};
>     getD(id) {
>       paramsE.set('id', id);
>       const url = '/_share/get_product_detail';
>       return this.http.post(url, paramsE, options).toPromise().then(
>         res => res.json() as XEnterprise).catch(this.handleError);
>     }
>   
>     private handleError(error: any): Promise<any> {
>       window.alert('对不起，' + error);
>       return Promise.reject(error.message || error);
>     }
>   
>     updateD(xdata) {
>       const url = '/_share/edit_product_detail';
>       this.http.post(url, xdata, options).toPromise().then((response) => {
>         response.json();
>       });
>       return 'OK';
>     }
>   }
>   
\ 文件尾没有 newline 字符
diff -r app/pages/_share/product_list/index.ts app_bk/pages/_share/product_list/index.ts
1c1
< export * from './product_list.component';
---
> export * from './product_list.component';
diff -r app/pages/_share/product_list/product_list.component.ts app_bk/pages/_share/product_list/product_list.component.ts
1,82c1,82
< import {Component, OnInit} from '@angular/core';
< import {ProductListService} from './product_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-share-product-list',
<   templateUrl: './product_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class ProductListComponent implements OnInit {
< 
<   settings = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         readonly: true,
<         title: 'ID',
<         type: 'number',
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_sn: {
<         title: '类型',
<         type: 'string',
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/product_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: ProductListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {ProductListService} from './product_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-product-list',
>   templateUrl: './product_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class ProductListComponent implements OnInit {
> 
>   settings = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         readonly: true,
>         title: 'ID',
>         type: 'number',
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_sn: {
>         title: '类型',
>         type: 'string',
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/product_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: ProductListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_share/product_list/product_list.html app_bk/pages/_share/product_list/product_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     平台产品列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     平台产品列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/product_list/product_list.scss app_bk/pages/_share/product_list/product_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/product_list/product_list.service.ts app_bk/pages/_share/product_list/product_list.service.ts
1,19c1,19
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const params = new URLSearchParams();
< 
< @Injectable()
< export class ProductListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_product_list').map((res) => res.json());
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const params = new URLSearchParams();
> 
> @Injectable()
> export class ProductListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_product_list').map((res) => res.json());
>   }
> }
diff -r app/pages/_share/project_detail/index.ts app_bk/pages/_share/project_detail/index.ts
1c1
< export * from './project_detail.component';
---
> export * from './project_detail.component';
diff -r app/pages/_share/project_detail/project_detail.component.ts app_bk/pages/_share/project_detail/project_detail.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {ProjectDetailService} from './project_detail.service'
< 
< @Component({
<   selector: 'ngx-share-project-detail',
<   styleUrls: ['project_detail.scss'],
<   templateUrl: 'project_detail.html',
<   providers: [ProjectDetailService],
< 
< })
< export class ProjectDetailComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: ProjectDetailService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {ProjectDetailService} from './project_detail.service'
> 
> @Component({
>   selector: 'ngx-share-project-detail',
>   styleUrls: ['project_detail.scss'],
>   templateUrl: 'project_detail.html',
>   providers: [ProjectDetailService],
> 
> })
> export class ProjectDetailComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: ProjectDetailService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_share/project_detail/project_detail.html app_bk/pages/_share/project_detail/project_detail.html
1,187c1,187
< <ul>
<   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
< </ul>
< <div class="row">
<   <div class="col-md-12">
<     <nb-card class="inline-form-card">
<       <nb-card-header>Inline form</nb-card-header>
<       <nb-card-body>
<         <form class="form-inline">
<           <input type="text" class="form-control full-width" placeholder="Jane Doe">
<           <div *ngFor="let item of dataSet" class="input-group full-width">
<             <div class="input-group-addon">@</div>
<             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
<           </div>
<           <nb-checkbox>Remember me</nb-checkbox>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>User Login</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group row">
<             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label class="col-sm-3">Radios</label>
<             <div class="col-sm-9">
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                 </label>
<               </div>
<               <div class="form-check">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios">
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                 </label>
<               </div>
<               <div class="form-check disabled">
<                 <label class="custom-control custom-radio">
<                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                   <span class="custom-control-indicator"></span>
<                   <span class="custom-control-description">Option three is disabled</span>
<                 </label>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-primary">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Form without labels</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Recipients">
<           </div>
<           <div class="form-group">
<             <input type="text" class="form-control" placeholder="Subject">
<           </div>
<           <div class="form-group">
<             <textarea class="form-control" placeholder="Message"></textarea>
<           </div>
<           <button type="submit" class="btn btn-success">Send</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Basic form</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="exampleInputEmail1">Email address</label>
<             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<           </div>
<           <div class="form-group">
<             <label for="exampleInputPassword1">Password</label>
<             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<           </div>
<           <div class="form-group">
<             <nb-checkbox>Check me out</nb-checkbox>
<           </div>
<           <button type="submit" class="btn btn-danger">Submit</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
< 
<     <nb-card>
<       <nb-card-header>Block form</nb-card-header>
<       <nb-card-body>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputFirstName">First Name</label>
<               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputLastName">Last Name</label>
<               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<             </div>
<           </div>
<         </div>
<         <div class="row">
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputEmail">Email</label>
<               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<             </div>
<           </div>
<           <div class="col-sm-6">
<             <div class="form-group">
<               <label for="inputWebsite">Website</label>
<               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<             </div>
<           </div>
<         </div>
<         <button type="submit" class="btn btn-primary">Submit</button>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
< <div class="row">
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>Horizontal form</nb-card-header>
<       <nb-card-body>
<         <form class="form-horizontal">
<           <div class="form-group row">
<             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<             <div class="col-sm-9">
<               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<             </div>
<           </div>
<           <div class="form-group row">
<             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<             <div class="col-sm-9">
<               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <div class="checkbox">
<                 <nb-checkbox>Remember me</nb-checkbox>
<               </div>
<             </div>
<           </div>
<           <div class="form-group row">
<             <div class="offset-sm-3 col-sm-9">
<               <button type="submit" class="btn btn-warning">Sign in</button>
<             </div>
<           </div>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
---
> <ul>
>   <li *ngFor="let item of dataSet">{{item.name}}--{{item.pwd}}</li>
> </ul>
> <div class="row">
>   <div class="col-md-12">
>     <nb-card class="inline-form-card">
>       <nb-card-header>Inline form</nb-card-header>
>       <nb-card-body>
>         <form class="form-inline">
>           <input type="text" class="form-control full-width" placeholder="Jane Doe">
>           <div *ngFor="let item of dataSet" class="input-group full-width">
>             <div class="input-group-addon">@</div>
>             <input  type="text" value="{{item.label}}" class="form-control" placeholder="Email">
>           </div>
>           <nb-checkbox>Remember me</nb-checkbox>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>User Login</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group row">
>             <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label class="col-sm-3">Radios</label>
>             <div class="col-sm-9">
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                 </label>
>               </div>
>               <div class="form-check">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios">
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                 </label>
>               </div>
>               <div class="form-check disabled">
>                 <label class="custom-control custom-radio">
>                   <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                   <span class="custom-control-indicator"></span>
>                   <span class="custom-control-description">Option three is disabled</span>
>                 </label>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-primary">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Form without labels</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Recipients">
>           </div>
>           <div class="form-group">
>             <input type="text" class="form-control" placeholder="Subject">
>           </div>
>           <div class="form-group">
>             <textarea class="form-control" placeholder="Message"></textarea>
>           </div>
>           <button type="submit" class="btn btn-success">Send</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Basic form</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="exampleInputEmail1">Email address</label>
>             <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>           </div>
>           <div class="form-group">
>             <label for="exampleInputPassword1">Password</label>
>             <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>           </div>
>           <div class="form-group">
>             <nb-checkbox>Check me out</nb-checkbox>
>           </div>
>           <button type="submit" class="btn btn-danger">Submit</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
> 
>     <nb-card>
>       <nb-card-header>Block form</nb-card-header>
>       <nb-card-body>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputFirstName">First Name</label>
>               <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputLastName">Last Name</label>
>               <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>             </div>
>           </div>
>         </div>
>         <div class="row">
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputEmail">Email</label>
>               <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>             </div>
>           </div>
>           <div class="col-sm-6">
>             <div class="form-group">
>               <label for="inputWebsite">Website</label>
>               <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>             </div>
>           </div>
>         </div>
>         <button type="submit" class="btn btn-primary">Submit</button>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
> <div class="row">
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>Horizontal form</nb-card-header>
>       <nb-card-body>
>         <form class="form-horizontal">
>           <div class="form-group row">
>             <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>             <div class="col-sm-9">
>               <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>             </div>
>           </div>
>           <div class="form-group row">
>             <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>             <div class="col-sm-9">
>               <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <div class="checkbox">
>                 <nb-checkbox>Remember me</nb-checkbox>
>               </div>
>             </div>
>           </div>
>           <div class="form-group row">
>             <div class="offset-sm-3 col-sm-9">
>               <button type="submit" class="btn btn-warning">Sign in</button>
>             </div>
>           </div>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
diff -r app/pages/_share/project_detail/project_detail.scss app_bk/pages/_share/project_detail/project_detail.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/project_detail/project_detail.service.ts app_bk/pages/_share/project_detail/project_detail.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class ProjectDetailService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class ProjectDetailService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_share/project_edit/index.ts app_bk/pages/_share/project_edit/index.ts
1c1
< export * from './project_edit.component';
---
> export * from './project_edit.component';
diff -r app/pages/_share/project_edit/project_edit.component.ts app_bk/pages/_share/project_edit/project_edit.component.ts
1,62c1,62
< import {Component, OnInit} from '@angular/core';
< import 'rxjs/Rx';
< import {ProjectEditService} from './project_edit.service'
< import {XProject} from '../../@xmodel/XProject';
< import {ActivatedRoute} from '@angular/router';
< 
< @Component({
<   selector: 'ngx-share-project-edit',
<   styleUrls: ['project_edit.scss'],
<   templateUrl: 'project_edit.html',
<   providers: [ProjectEditService],
< 
< })
< export class ProjectEditComponent implements OnInit {
<   private id: string;
<   public xes: XProject;
<   public CurrentX: XProject;
<   constructor(private service: ProjectEditService, public route: ActivatedRoute) {
<     this.id = this.route.snapshot.params['id'];
<     this.getD();
<   }
< 
<   getD() {
<     this.service.getD(this.id).then(
<       res => {
<         this.xes = res;
<         this.CurrentX = this.xes[0];
<         if (this.CurrentX && this.CurrentX.sn !== '') {
<         }else {
<           window.alert('对不起，您查找的信息不存在！');
<         }
<       }).catch(this.handleError);
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   count(obj) {
<     const objType = typeof obj;
<     if (objType === 'string') {
<       return obj.length;
<     }else {
<       let objLen = 0;
<       obj.forEach(objLen++);
<       return objLen;
<     }
<   }
< 
<   ngOnInit() {
<   }
< 
<   updateD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (this.CurrentX.label.trim() !== '') {
<       this.service.updateD(this.CurrentX);
<       window.alert('已修改成功！');
<     }else {
<       window.alert('对不起，请输入正确的信息！')
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import 'rxjs/Rx';
> import {ProjectEditService} from './project_edit.service'
> import {XProject} from '../../@xmodel/XProject';
> import {ActivatedRoute} from '@angular/router';
> 
> @Component({
>   selector: 'ngx-share-project-edit',
>   styleUrls: ['project_edit.scss'],
>   templateUrl: 'project_edit.html',
>   providers: [ProjectEditService],
> 
> })
> export class ProjectEditComponent implements OnInit {
>   private id: string;
>   public xes: XProject;
>   public CurrentX: XProject;
>   constructor(private service: ProjectEditService, public route: ActivatedRoute) {
>     this.id = this.route.snapshot.params['id'];
>     this.getD();
>   }
> 
>   getD() {
>     this.service.getD(this.id).then(
>       res => {
>         this.xes = res;
>         this.CurrentX = this.xes[0];
>         if (this.CurrentX && this.CurrentX.sn !== '') {
>         }else {
>           window.alert('对不起，您查找的信息不存在！');
>         }
>       }).catch(this.handleError);
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   count(obj) {
>     const objType = typeof obj;
>     if (objType === 'string') {
>       return obj.length;
>     }else {
>       let objLen = 0;
>       obj.forEach(objLen++);
>       return objLen;
>     }
>   }
> 
>   ngOnInit() {
>   }
> 
>   updateD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (this.CurrentX.label.trim() !== '') {
>       this.service.updateD(this.CurrentX);
>       window.alert('已修改成功！');
>     }else {
>       window.alert('对不起，请输入正确的信息！')
>     }
>   }
> }
diff -r app/pages/_share/project_edit/project_edit.html app_bk/pages/_share/project_edit/project_edit.html
1,67c1,67
< <div class="row">
<   <div class="col-md-10">
<     <nb-tabset fullWidth>
<       <nb-tab tabTitle="项目基本信息">
<         <div class="row">
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="label">名称</label>
<               <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentXEnterprise.label">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_cn_uid">统一信用代码</label>
<               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentXEnterprise.basic_cn_uid">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_reg_capital">注册资本</label>
<               <input type="text" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentXEnterprise.basic_reg_capital">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_setup_dt">设立日期</label>
<               <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentXEnterprise.basic_setup_dt">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_address">地址</label>
<               <input type="text" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentXEnterprise.basic_biz_address">
<             </div>
<           </div>
<           <div class="col-sm-6 col-lg-6">
<             <div class="form-group">
<               <label for="basic_biz_tel">电话</label>
<               <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentXEnterprise.basic_biz_tel">
<             </div>
<           </div>
<         </div>
<       </nb-tab>
<       <nb-tab tabTitle="关联产品信息">
<         <span>Content #34</span>
<       </nb-tab>
<       <nb-tab tabTitle="附件信息">
<         <span>Content #35</span>
<       </nb-tab>
<       <nb-tab tabTitle="其他信息">
<         <span>Content #35</span>
<       </nb-tab>
<     </nb-tabset>
< 
<     <div class="col-md-12 col-lg-12">
<       <button class="btn btn-success">返回列表</button>
<       <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
<     </div>
< 
<   </div>
< 
<   <div class="col-md-2">aa
<   </div>
< 
< 
< </div>
< 
---
> <div class="row">
>   <div class="col-md-10">
>     <nb-tabset fullWidth>
>       <nb-tab tabTitle="项目基本信息">
>         <div class="row">
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="label">名称</label>
>               <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentXEnterprise.label">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_cn_uid">统一信用代码</label>
>               <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentXEnterprise.basic_cn_uid">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_reg_capital">注册资本</label>
>               <input type="text" class="form-control" id="basic_reg_capital" name="basic_reg_capital" [(ngModel)]="this.CurrentXEnterprise.basic_reg_capital">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_setup_dt">设立日期</label>
>               <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentXEnterprise.basic_setup_dt">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_address">地址</label>
>               <input type="text" class="form-control" id="basic_biz_address" name="basic_biz_address" [(ngModel)]="this.CurrentXEnterprise.basic_biz_address">
>             </div>
>           </div>
>           <div class="col-sm-6 col-lg-6">
>             <div class="form-group">
>               <label for="basic_biz_tel">电话</label>
>               <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentXEnterprise.basic_biz_tel">
>             </div>
>           </div>
>         </div>
>       </nb-tab>
>       <nb-tab tabTitle="关联产品信息">
>         <span>Content #34</span>
>       </nb-tab>
>       <nb-tab tabTitle="附件信息">
>         <span>Content #35</span>
>       </nb-tab>
>       <nb-tab tabTitle="其他信息">
>         <span>Content #35</span>
>       </nb-tab>
>     </nb-tabset>
> 
>     <div class="col-md-12 col-lg-12">
>       <button class="btn btn-success">返回列表</button>
>       <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
>     </div>
> 
>   </div>
> 
>   <div class="col-md-2">aa
>   </div>
> 
> 
> </div>
> 
diff -r app/pages/_share/project_edit/project_edit.scss app_bk/pages/_share/project_edit/project_edit.scss
1,45c1,45
< @import '../../../@theme/styles/themes';
< @import '~bootstrap/scss/mixins/breakpoints';
< @import '~@nebular/theme/styles/global/bootstrap/breakpoints';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< 
<   nb-tabset {
<     height: 100%;
<     display: flex;
<     flex-direction: column;
<   }
< 
<   nb-tab {
<     padding: nb-theme(padding);
<   }
< 
<   /deep/ ngx-tab1, /deep/ ngx-tab2 {
<     display: block;
<     padding: nb-theme(padding);
<   }
< 
<   @include media-breakpoint-down(xs) {
<     nb-tabset /deep/ul {
<       font-size: 1rem;
<       padding: 0 0.25rem;
<     }
<   }
< }
---
> @import '../../../@theme/styles/themes';
> @import '~bootstrap/scss/mixins/breakpoints';
> @import '~@nebular/theme/styles/global/bootstrap/breakpoints';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> 
>   nb-tabset {
>     height: 100%;
>     display: flex;
>     flex-direction: column;
>   }
> 
>   nb-tab {
>     padding: nb-theme(padding);
>   }
> 
>   /deep/ ngx-tab1, /deep/ ngx-tab2 {
>     display: block;
>     padding: nb-theme(padding);
>   }
> 
>   @include media-breakpoint-down(xs) {
>     nb-tabset /deep/ul {
>       font-size: 1rem;
>       padding: 0 0.25rem;
>     }
>   }
> }
diff -r app/pages/_share/project_edit/project_edit.service.ts app_bk/pages/_share/project_edit/project_edit.service.ts
1,35c1,35
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import { XProject } from '../../@xmodel/XProject';
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsE = new URLSearchParams();
< 
< @Injectable()
< export class ProjectEditService {
<   constructor(private http: Http) {
<   };
< 
<   getD(id) {
<     paramsE.set('id', id);
<     const url = '/_s_share/get_project_detail';
<     return this.http.post(url, paramsE, options).toPromise().then(
<       res => res.json() as XProject).catch(this.handleError);
<   }
< 
<   private handleError(error: any): Promise<any> {
<     window.alert('对不起，' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   updateD(xdata) {
<     const url = '/_s_share/edit_project_detail';
<     this.http.post(url, xdata, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import { XProject } from '../../@xmodel/XProject';
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsE = new URLSearchParams();
> 
> @Injectable()
> export class ProjectEditService {
>   constructor(private http: Http) {
>   };
> 
>   getD(id) {
>     paramsE.set('id', id);
>     const url = '/_share/get_project_detail';
>     return this.http.post(url, paramsE, options).toPromise().then(
>       res => res.json() as XProject).catch(this.handleError);
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('对不起，' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   updateD(xdata) {
>     const url = '/_share/edit_project_detail';
>     this.http.post(url, xdata, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/project_list/index.ts app_bk/pages/_share/project_list/index.ts
1c1
< export * from './project_list.component';
---
> export * from './project_list.component';
diff -r app/pages/_share/project_list/project_list.component.ts app_bk/pages/_share/project_list/project_list.component.ts
1,83c1,83
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {ProjectListService} from './project_list.service';
< 
< @Component({
<   selector: 'ngx-share-project-list',
<   templateUrl: './project_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class ProjectListComponent implements OnInit {
< 
<   settings = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_sn: {
<         title: '类型',
<         type: 'string',
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/project_detail/' +
<             row.id +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: ProjectListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {ProjectListService} from './project_list.service';
> 
> @Component({
>   selector: 'ngx-share-project-list',
>   templateUrl: './project_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class ProjectListComponent implements OnInit {
> 
>   settings = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_sn: {
>         title: '类型',
>         type: 'string',
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/project_detail/' +
>             row.id +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: ProjectListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_share/project_list/project_list.html app_bk/pages/_share/project_list/project_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     平台项目列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     平台项目列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/project_list/project_list.scss app_bk/pages/_share/project_list/project_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/project_list/project_list.service.ts app_bk/pages/_share/project_list/project_list.service.ts
1,18c1,18
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< 
< @Injectable()
< export class ProjectListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_project_list').map((res) => res.json());
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> 
> @Injectable()
> export class ProjectListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_project_list').map((res) => res.json());
>   }
> }
diff -r app/pages/_share/recycle_list/index.ts app_bk/pages/_share/recycle_list/index.ts
1c1
< export * from './recycle_list.component';
---
> export * from './recycle_list.component';
diff -r app/pages/_share/recycle_list/recycle_list.component.ts app_bk/pages/_share/recycle_list/recycle_list.component.ts
1,108c1,108
< import {Component, DoCheck} from '@angular/core';
< import {RecycleListService} from './recycle_list.service';
< import {XKV} from '../../@xmodel/XKV';
< import {ActivatedRoute, Params} from '@angular/router';
< 
< @Component({
<   selector: 'ngx-share-recycle-list',
<   templateUrl: './recycle_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class RecycleListComponent implements DoCheck {
< 
<   settings = {
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     actions: {
<       add: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       sn: {
<         editable: false,
<         title: '系统编号',
<         type: 'string',
<       },
<       label: {
<         title: '名称',
<         type: 'string',
<       },
<       custom_code: {
<         title: '自定义编码',
<         type: 'string',
<       },
<       display_code: {
<         title: '排序码',
<         type: 'number',
<       },
<       last_update_dt: {
<         editable: false,
<         title: '最后更新时间',
<         type: 'string',
<       },
<     },
<   };
< 
<   xs: XKV[];
<   en;
<   ennew;
< 
<   constructor(private service: RecycleListService, public route: ActivatedRoute) {
<     this.ennew = '0';
<     this.en = '0';
<   }
< 
<   private handleError(error: any): Promise<any> {
<     window.alert('An error occurred' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   ngDoCheck() {
<     this.ennew = this.route.snapshot.params['en'];
<     if (this.ennew !== this.en) {
<       this.en = this.ennew;
<       this.service.getD(this.en).then(
<         res => {
<           this.xs = res;
<         }).catch(this.handleError);
<     }
<   }
< 
<   onDeleteConfirm(event): void {
<     // window.alert(this.en);
<     if (window.confirm('确定要永久删除吗？永久删除不能恢复数据！')) {
<       this.service.deleteD(event.data, this.en);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< 
<   onEditConfirm(event): void {
<     if (window.confirm('确定要恢复该数据吗？')) {
<       this.service.editD(event.newData, this.en);
<       event.confirm.resolve();
<       this.en = '0'; // 引发表格更新
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, DoCheck} from '@angular/core';
> import {RecycleListService} from './recycle_list.service';
> import {XKV} from '../../@xmodel/XKV';
> import {ActivatedRoute, Params} from '@angular/router';
> 
> @Component({
>   selector: 'ngx-share-recycle-list',
>   templateUrl: './recycle_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class RecycleListComponent implements DoCheck {
> 
>   settings = {
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     actions: {
>       add: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       sn: {
>         editable: false,
>         title: '系统编号',
>         type: 'string',
>       },
>       label: {
>         title: '名称',
>         type: 'string',
>       },
>       custom_code: {
>         title: '自定义编码',
>         type: 'string',
>       },
>       display_code: {
>         title: '排序码',
>         type: 'number',
>       },
>       last_update_dt: {
>         editable: false,
>         title: '最后更新时间',
>         type: 'string',
>       },
>     },
>   };
> 
>   xs: XKV[];
>   en;
>   ennew;
> 
>   constructor(private service: RecycleListService, public route: ActivatedRoute) {
>     this.ennew = '0';
>     this.en = '0';
>   }
> 
>   private handleError(error: any): Promise<any> {
>     window.alert('An error occurred' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   ngDoCheck() {
>     this.ennew = this.route.snapshot.params['en'];
>     if (this.ennew !== this.en) {
>       this.en = this.ennew;
>       this.service.getD(this.en).then(
>         res => {
>           this.xs = res;
>         }).catch(this.handleError);
>     }
>   }
> 
>   onDeleteConfirm(event): void {
>     // window.alert(this.en);
>     if (window.confirm('确定要永久删除吗？永久删除不能恢复数据！')) {
>       this.service.deleteD(event.data, this.en);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> 
>   onEditConfirm(event): void {
>     if (window.confirm('确定要恢复该数据吗？')) {
>       this.service.editD(event.newData, this.en);
>       event.confirm.resolve();
>       this.en = '0'; // 引发表格更新
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_share/recycle_list/recycle_list.html app_bk/pages/_share/recycle_list/recycle_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     回收站列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" (editConfirm)="onEditConfirm($event)" [source]="xs" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     回收站列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" (editConfirm)="onEditConfirm($event)" [source]="xs" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/recycle_list/recycle_list.scss app_bk/pages/_share/recycle_list/recycle_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/recycle_list/recycle_list.service.ts app_bk/pages/_share/recycle_list/recycle_list.service.ts
1,84c1,84
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XKV } from '../../@xmodel/XKV';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
< 
< @Injectable()
< export class RecycleListService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(en): Promise<XKV[]> {
<     const url = '/_s_share/get_recycle_list';
<     const params = new HttpParams()
<       .set('en', en);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setX(data: any): XKV {
<     const x = new XKV();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.creator_sn = data['creator_sn'];
<     x.create_dt = data['create_dt'];
<     const last_update_dt = new Date(data['last_update_dt']);
<     x.last_update_dt = last_update_dt.toLocaleString();
<     x.custom_code = data['custom_code'];
<     x.display_code = data['display_code'];
<     x.is_deleted = data['is_deleted'];
<     x.is_na = data['is_na'];
<     return x;
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< 
<   deleteD(newData, en) {
<     const url = '/_s_share/delete_forever';
<     const listx = [];
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('en', en);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then((response) => {
<         },
<       ).catch(this.handleError);
<   }
< 
<   editD(newData, en) {
<     const url = '/_s_share/recycle_restore';
<     const params = new HttpParams()
<       .set('id', newData['id'])
<       .set('custom_code', newData['custom_code'])
<       .set('label', newData['label'])
<       .set('display_code', newData['display_code'])
<       .set('en', en);
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then((response) => {
<         },
<       ).catch(this.handleError);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XKV } from '../../@xmodel/XKV';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'});
> 
> @Injectable()
> export class RecycleListService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(en): Promise<XKV[]> {
>     const url = '/_share/get_recycle_list';
>     const params = new HttpParams()
>       .set('en', en);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setX(data: any): XKV {
>     const x = new XKV();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.creator_sn = data['creator_sn'];
>     x.create_dt = data['create_dt'];
>     const last_update_dt = new Date(data['last_update_dt']);
>     x.last_update_dt = last_update_dt.toLocaleString();
>     x.custom_code = data['custom_code'];
>     x.display_code = data['display_code'];
>     x.is_deleted = data['is_deleted'];
>     x.is_na = data['is_na'];
>     return x;
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> 
>   deleteD(newData, en) {
>     const url = '/_share/delete_forever';
>     const listx = [];
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('en', en);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then((response) => {
>         },
>       ).catch(this.handleError);
>   }
> 
>   editD(newData, en) {
>     const url = '/_share/recycle_restore';
>     const params = new HttpParams()
>       .set('id', newData['id'])
>       .set('custom_code', newData['custom_code'])
>       .set('label', newData['label'])
>       .set('display_code', newData['display_code'])
>       .set('en', en);
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then((response) => {
>         },
>       ).catch(this.handleError);
>   }
> }
diff -r app/pages/_share/set_password/index.ts app_bk/pages/_share/set_password/index.ts
1c1
< export * from './set_password.component';
---
> export * from './set_password.component';
diff -r app/pages/_share/set_password/set_password.component.ts app_bk/pages/_share/set_password/set_password.component.ts
1,35c1,35
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {SetPasswordService} from './set_password.service'
< 
< @Component({
<   selector: 'ngx-share-set-password',
<   styleUrls: ['set_password.scss'],
<   templateUrl: 'set_password.html',
<   providers: [SetPasswordService],
< 
< })
< export class SetPasswordComponent implements OnInit {
<   public ln: string;
<   public oldP: string;
<   public newP: string;
<   public newPC: string;
<   constructor(private service: SetPasswordService) {
<     this.ln = localStorage.getItem('cu_ln');
<   }
< 
<   ngOnInit() {
<   }
< 
<   setPWD() {
<     const cuid = localStorage.getItem('cu_id');
<     if (cuid !== '' && this.oldP !== '' && this.newP !== '' && this.newPC !== '' && this.newP === this.newPC) {
<       this.service.setP(cuid, this.oldP, this.newP);
<       window.alert('已修改成功，重新登录将使用新密码！')
<     }else {
<       window.alert('对不起，请输入正确的密码！')
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {SetPasswordService} from './set_password.service'
> 
> @Component({
>   selector: 'ngx-share-set-password',
>   styleUrls: ['set_password.scss'],
>   templateUrl: 'set_password.html',
>   providers: [SetPasswordService],
> 
> })
> export class SetPasswordComponent implements OnInit {
>   public ln: string;
>   public oldP: string;
>   public newP: string;
>   public newPC: string;
>   constructor(private service: SetPasswordService) {
>     this.ln = localStorage.getItem('cu_ln');
>   }
> 
>   ngOnInit() {
>   }
> 
>   setPWD() {
>     const cuid = localStorage.getItem('cu_id');
>     if (cuid !== '' && this.oldP !== '' && this.newP !== '' && this.newPC !== '' && this.newP === this.newPC) {
>       this.service.setP(cuid, this.oldP, this.newP);
>       window.alert('已修改成功，重新登录将使用新密码！')
>     }else {
>       window.alert('对不起，请输入正确的密码！')
>     }
>   }
> }
diff -r app/pages/_share/set_password/set_password.html app_bk/pages/_share/set_password/set_password.html
1,35c1,35
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>密码修改</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="ln">账号</label>
<             <input type="text" readonly="readonly" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
<           </div>
<           <div class="form-group">
<             <label for="oldP">旧密码</label>
<             <input type="password" class="form-control" id="oldP" name="oldP" [(ngModel)]="oldP" placeholder="旧密码">
<           </div>
<           <div class="form-group">
<             <label for="newP">新密码</label>
<             <input type="password" class="form-control" id="newP" name="newP" [(ngModel)]="newP" placeholder="新密码">
<           </div>
<           <div class="form-group">
<             <label for="newPC">新密码确认</label>
<             <input type="password" class="form-control" id="newPC" name="newPC" [(ngModel)]="newPC" placeholder="新密码确认">
<           </div>
<           <button type="submit" (click)="setPWD()" class="btn btn-danger">确认修改</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>密码修改</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="ln">账号</label>
>             <input type="text" readonly="readonly" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
>           </div>
>           <div class="form-group">
>             <label for="oldP">旧密码</label>
>             <input type="password" class="form-control" id="oldP" name="oldP" [(ngModel)]="oldP" placeholder="旧密码">
>           </div>
>           <div class="form-group">
>             <label for="newP">新密码</label>
>             <input type="password" class="form-control" id="newP" name="newP" [(ngModel)]="newP" placeholder="新密码">
>           </div>
>           <div class="form-group">
>             <label for="newPC">新密码确认</label>
>             <input type="password" class="form-control" id="newPC" name="newPC" [(ngModel)]="newPC" placeholder="新密码确认">
>           </div>
>           <button type="submit" (click)="setPWD()" class="btn btn-danger">确认修改</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
> 
diff -r app/pages/_share/set_password/set_password.scss app_bk/pages/_share/set_password/set_password.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/set_password/set_password.service.ts app_bk/pages/_share/set_password/set_password.service.ts
1,26c1,26
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< import 'rxjs/add/operator/toPromise';
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsL = new URLSearchParams();
< 
< @Injectable()
< export class SetPasswordService {
<   constructor(private http: Http) {
<   };
< 
<   setP(id, oldp, newp) {
<     paramsL.set('id', id);
<     paramsL.set('oldp', oldp);
<     paramsL.set('newp', newp);
<     const url = '/_s_share/set_password';
<     this.http.post(url, paramsL, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> import 'rxjs/add/operator/toPromise';
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsL = new URLSearchParams();
> 
> @Injectable()
> export class SetPasswordService {
>   constructor(private http: Http) {
>   };
> 
>   setP(id, oldp, newp) {
>     paramsL.set('id', id);
>     paramsL.set('oldp', oldp);
>     paramsL.set('newp', newp);
>     const url = '/_share/set_password';
>     this.http.post(url, paramsL, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/share.component.ts app_bk/pages/_share/share.component.ts
1,10c1,10
< import { Component } from '@angular/core';  // 导入angular核心模块
< 
< @Component({    // Component directive 声明组件属于 Component
<   selector: 'ngx-share', // 定义组件在HTML代码中匹配的标签
<   template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
< })
< 
< export class ShareComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
<   constructor() { }
< };
---
> import { Component } from '@angular/core';  // 导入angular核心模块
> 
> @Component({    // Component directive 声明组件属于 Component
>   selector: 'ngx-share', // 定义组件在HTML代码中匹配的标签
>   template: `<router-outlet></router-outlet>`, // 指定组件关联的内联模板，这里直接使用一个路由插座
> })
> 
> export class ShareComponent {    // 导出模块，注意命名以 Component 结尾，方便区分
>   constructor() { }
> };
diff -r app/pages/_share/share.module.ts app_bk/pages/_share/share.module.ts
1,100c1,100
< import { CommonModule } from '@angular/common';
< import { NgModule } from '@angular/core';
< import { Ng2SmartTableModule } from 'ng2-smart-table';
< import { ThemeModule } from '../../@theme/theme.module';
< import { CKEditorModule } from 'ng2-ckeditor';
< 
< import { ShareComponent } from './share.component'; // 导入刚才新建的模块
< 
< import { EnterpriseListService } from './enterprise_list/enterprise_list.service';
< import { UserEnterpriseListService } from './user_enterprise_list/user_enterprise_list.service';
< import { RecycleListService } from './recycle_list/recycle_list.service';
< import { EnterpriseDetailService } from './enterprise_detail/enterprise_detail.service';
< import { ProductCompareService } from './product_compare/product_compare.service';
< import { ProductListService } from './product_list/product_list.service';
< import { UserProductListService } from './user_product_list/user_product_list.service';
< import { ProductDetailService } from './product_detail/product_detail.service';
< import { UserDetailService } from './user_detail/user_detail.service';
< import { SetPasswordService } from './set_password/set_password.service';
< import { UserFavorListService } from './user_favor_list/user_favor_list.service';
< import { ProjectListService } from './project_list/project_list.service';
< import { UserProjectListService } from './user_project_list/user_project_list.service';
< import { ProjectDetailService } from './project_detail/project_detail.service';
< import { ProductEditService } from './product_edit/product_edit.service';
< import { EnterpriseEditService } from './enterprise_edit/enterprise_edit.service';
< import { ProjectEditService } from './project_edit/project_edit.service';
< import { UserEditService } from './user_edit/user_edit.service';
< 
< import { EnterpriseListComponent } from './enterprise_list';
< import { UserEnterpriseListComponent } from './user_enterprise_list';
< import { RecycleListComponent } from './recycle_list';
< import { EnterpriseDetailComponent } from './enterprise_detail';
< import { ProductListComponent } from './product_list';
< import { UserProductListComponent } from './user_product_list';
< import { ProductCompareComponent } from './product_compare';
< import { ProductDetailComponent } from './product_detail';
< import { ProjectDetailComponent } from './project_detail';
< import { UserDetailComponent } from './user_detail';
< import { SetPasswordComponent } from './set_password';
< import { UserFavorListComponent } from './user_favor_list';
< import { ProjectListComponent } from './project_list';
< import { UserProjectListComponent } from './user_project_list';
< import { ProductEditComponent } from './product_edit';
< import { EnterpriseEditComponent } from './enterprise_edit';
< import { ProjectEditComponent } from './project_edit';
< import { UserEditComponent } from './user_edit';
< 
< import { RoutingShare } from './share.routing'; // 导入路由文件
< 
< @NgModule({
<   imports: [
<     CommonModule,
<     RoutingShare,
<     Ng2SmartTableModule,
<     ThemeModule,
<     CKEditorModule,
<   ],
<   declarations: [
<     ShareComponent,
<     UserEditComponent,
<     UserDetailComponent,
<     UserProductListComponent,
<     UserProjectListComponent,
<     UserFavorListComponent,
<     UserEnterpriseListComponent,
<     ProductCompareComponent,
<     ProductEditComponent,
<     ProductListComponent,
<     ProductDetailComponent,
<     ProjectEditComponent,
<     ProjectDetailComponent,
<     ProjectListComponent,
<     EnterpriseListComponent,
<     EnterpriseEditComponent,
<     EnterpriseDetailComponent,
<     RecycleListComponent,
<     SetPasswordComponent,
<   ],
<   providers: [
<     ProductCompareService,
<     ProductEditService,
<     EnterpriseEditService,
<     ProjectEditService,
<     UserEditService,
<     RecycleListService,
<     SetPasswordService,
<     UserFavorListService,
<     ProjectListService,
<     UserProjectListService,
<     EnterpriseListService,
<     UserEnterpriseListService,
<     EnterpriseDetailService,
<     ProductListService,
<     UserProductListService,
<     ProductDetailService,
<     UserDetailService,
<     ProjectDetailService,
<   ],
< })
< 
< export class ShareModule {}
---
> import { CommonModule } from '@angular/common';
> import { NgModule } from '@angular/core';
> import { Ng2SmartTableModule } from 'ng2-smart-table';
> import { ThemeModule } from '../../@theme/theme.module';
> import { CKEditorModule } from 'ng2-ckeditor';
> 
> import { ShareComponent } from './share.component'; // 导入刚才新建的模块
> 
> import { EnterpriseListService } from './enterprise_list/enterprise_list.service';
> import { UserEnterpriseListService } from './user_enterprise_list/user_enterprise_list.service';
> import { RecycleListService } from './recycle_list/recycle_list.service';
> import { EnterpriseDetailService } from './enterprise_detail/enterprise_detail.service';
> import { ProductCompareService } from './product_compare/product_compare.service';
> import { ProductListService } from './product_list/product_list.service';
> import { UserProductListService } from './user_product_list/user_product_list.service';
> import { ProductDetailService } from './product_detail/product_detail.service';
> import { UserDetailService } from './user_detail/user_detail.service';
> import { SetPasswordService } from './set_password/set_password.service';
> import { UserFavorListService } from './user_favor_list/user_favor_list.service';
> import { ProjectListService } from './project_list/project_list.service';
> import { UserProjectListService } from './user_project_list/user_project_list.service';
> import { ProjectDetailService } from './project_detail/project_detail.service';
> import { ProductEditService } from './product_edit/product_edit.service';
> import { EnterpriseEditService } from './enterprise_edit/enterprise_edit.service';
> import { ProjectEditService } from './project_edit/project_edit.service';
> import { UserEditService } from './user_edit/user_edit.service';
> 
> import { EnterpriseListComponent } from './enterprise_list';
> import { UserEnterpriseListComponent } from './user_enterprise_list';
> import { RecycleListComponent } from './recycle_list';
> import { EnterpriseDetailComponent } from './enterprise_detail';
> import { ProductListComponent } from './product_list';
> import { UserProductListComponent } from './user_product_list';
> import { ProductCompareComponent } from './product_compare';
> import { ProductDetailComponent } from './product_detail';
> import { ProjectDetailComponent } from './project_detail';
> import { UserDetailComponent } from './user_detail';
> import { SetPasswordComponent } from './set_password';
> import { UserFavorListComponent } from './user_favor_list';
> import { ProjectListComponent } from './project_list';
> import { UserProjectListComponent } from './user_project_list';
> import { ProductEditComponent } from './product_edit';
> import { EnterpriseEditComponent } from './enterprise_edit';
> import { ProjectEditComponent } from './project_edit';
> import { UserEditComponent } from './user_edit';
> 
> import { RoutingShare } from './share.routing'; // 导入路由文件
> 
> @NgModule({
>   imports: [
>     CommonModule,
>     RoutingShare,
>     Ng2SmartTableModule,
>     ThemeModule,
>     CKEditorModule,
>   ],
>   declarations: [
>     ShareComponent,
>     UserEditComponent,
>     UserDetailComponent,
>     UserProductListComponent,
>     UserProjectListComponent,
>     UserFavorListComponent,
>     UserEnterpriseListComponent,
>     ProductCompareComponent,
>     ProductEditComponent,
>     ProductListComponent,
>     ProductDetailComponent,
>     ProjectEditComponent,
>     ProjectDetailComponent,
>     ProjectListComponent,
>     EnterpriseListComponent,
>     EnterpriseEditComponent,
>     EnterpriseDetailComponent,
>     RecycleListComponent,
>     SetPasswordComponent,
>   ],
>   providers: [
>     ProductCompareService,
>     ProductEditService,
>     EnterpriseEditService,
>     ProjectEditService,
>     UserEditService,
>     RecycleListService,
>     SetPasswordService,
>     UserFavorListService,
>     ProjectListService,
>     UserProjectListService,
>     EnterpriseListService,
>     UserEnterpriseListService,
>     EnterpriseDetailService,
>     ProductListService,
>     UserProductListService,
>     ProductDetailService,
>     UserDetailService,
>     ProjectDetailService,
>   ],
> })
> 
> export class ShareModule {}
diff -r app/pages/_share/share.routing.ts app_bk/pages/_share/share.routing.ts
1,104c1,104
< import { Routes, RouterModule } from '@angular/router';
< 
< import { ShareComponent } from './share.component'; // 导入刚才新建的模块
< 
< import { EnterpriseListComponent } from './enterprise_list'
< import { EnterpriseDetailComponent } from './enterprise_detail'
< import { EnterpriseEditComponent } from './enterprise_edit'
< import { UserEnterpriseListComponent } from './user_enterprise_list'
< import { ProductCompareComponent } from './product_compare'
< import { ProductListComponent } from './product_list'
< import { ProductDetailComponent } from './product_detail'
< import { ProductEditComponent } from './product_edit'
< import { UserProductListComponent } from './user_product_list'
< import { ProjectListComponent } from './project_list'
< import { ProjectDetailComponent } from './project_detail'
< import { ProjectEditComponent } from './project_edit'
< import { UserProjectListComponent } from './user_project_list'
< import { UserDetailComponent } from './user_detail'
< import { UserEditComponent } from './user_edit'
< import { UserFavorListComponent } from './user_favor_list'
< import { SetPasswordComponent } from './set_password'
< import { RecycleListComponent } from './recycle_list';
< 
< const routes: Routes = [
<     {
<         path: '',
<         component: ShareComponent,
<         children: [
<           {
<             path: 'recycle_list/:en',
<             component: RecycleListComponent,
<           },
<           {
<             path: 'enterprise_list',
<             component: EnterpriseListComponent,
<           },
<           {
<             path: 'enterprise_detail/:sn',
<             component: EnterpriseDetailComponent,
<           },
<           {
<             path: 'enterprise_edit/:sn',
<             component: EnterpriseEditComponent,
<           },
<           {
<             path: 'product_list',
<             component: ProductListComponent,
<           },
<           {
<             path: 'project_list',
<             component: ProjectListComponent,
<           },
<           {
<             path: 'user_enterprise_list',
<             component: UserEnterpriseListComponent,
<           },
<           {
<             path: 'user_product_list',
<             component: UserProductListComponent,
<           },
<           {
<             path: 'user_project_list',
<             component: UserProjectListComponent,
<           },
<           {
<             path: 'product_detail/:sn',
<             component: ProductDetailComponent,
<           },
<           {
<             path: 'product_edit/:sn',
<             component: ProductEditComponent,
<           },
<           {
<             path: 'project_detail/:sn',
<             component: ProjectDetailComponent,
<           },
<           {
<             path: 'product_compare',
<             component: ProductCompareComponent,
<           },
<           {
<             path: 'project_edit/:sn',
<             component: ProjectEditComponent,
<           },
<           {
<             path: 'user_detail/:sn',
<             component: UserDetailComponent,
<           },
<           {
<             path: 'user_edit/:sn',
<             component: UserEditComponent,
<           },
<           {
<             path: 'set_password',
<             component: SetPasswordComponent,
<           },
<           {
<             path: 'user_favor_list',
<             component: UserFavorListComponent,
<           },
<         ],
<     },
< ];
< export const RoutingShare = RouterModule.forChild(routes);
---
> import { Routes, RouterModule } from '@angular/router';
> 
> import { ShareComponent } from './share.component'; // 导入刚才新建的模块
> 
> import { EnterpriseListComponent } from './enterprise_list'
> import { EnterpriseDetailComponent } from './enterprise_detail'
> import { EnterpriseEditComponent } from './enterprise_edit'
> import { UserEnterpriseListComponent } from './user_enterprise_list'
> import { ProductCompareComponent } from './product_compare'
> import { ProductListComponent } from './product_list'
> import { ProductDetailComponent } from './product_detail'
> import { ProductEditComponent } from './product_edit'
> import { UserProductListComponent } from './user_product_list'
> import { ProjectListComponent } from './project_list'
> import { ProjectDetailComponent } from './project_detail'
> import { ProjectEditComponent } from './project_edit'
> import { UserProjectListComponent } from './user_project_list'
> import { UserDetailComponent } from './user_detail'
> import { UserEditComponent } from './user_edit'
> import { UserFavorListComponent } from './user_favor_list'
> import { SetPasswordComponent } from './set_password'
> import { RecycleListComponent } from './recycle_list';
> 
> const routes: Routes = [
>     {
>         path: '',
>         component: ShareComponent,
>         children: [
>           {
>             path: 'recycle_list/:en',
>             component: RecycleListComponent,
>           },
>           {
>             path: 'enterprise_list',
>             component: EnterpriseListComponent,
>           },
>           {
>             path: 'enterprise_detail/:sn',
>             component: EnterpriseDetailComponent,
>           },
>           {
>             path: 'enterprise_edit/:sn',
>             component: EnterpriseEditComponent,
>           },
>           {
>             path: 'product_list',
>             component: ProductListComponent,
>           },
>           {
>             path: 'project_list',
>             component: ProjectListComponent,
>           },
>           {
>             path: 'user_enterprise_list',
>             component: UserEnterpriseListComponent,
>           },
>           {
>             path: 'user_product_list',
>             component: UserProductListComponent,
>           },
>           {
>             path: 'user_project_list',
>             component: UserProjectListComponent,
>           },
>           {
>             path: 'product_detail/:sn',
>             component: ProductDetailComponent,
>           },
>           {
>             path: 'product_edit/:sn',
>             component: ProductEditComponent,
>           },
>           {
>             path: 'project_detail/:sn',
>             component: ProjectDetailComponent,
>           },
>           {
>             path: 'product_compare',
>             component: ProductCompareComponent,
>           },
>           {
>             path: 'project_edit/:sn',
>             component: ProjectEditComponent,
>           },
>           {
>             path: 'user_detail/:sn',
>             component: UserDetailComponent,
>           },
>           {
>             path: 'user_edit/:sn',
>             component: UserEditComponent,
>           },
>           {
>             path: 'set_password',
>             component: SetPasswordComponent,
>           },
>           {
>             path: 'user_favor_list',
>             component: UserFavorListComponent,
>           },
>         ],
>     },
> ];
> export const RoutingShare = RouterModule.forChild(routes);
diff -r app/pages/_share/user_detail/index.ts app_bk/pages/_share/user_detail/index.ts
1c1
< export * from './user_detail.component';
---
> export * from './user_detail.component';
diff -r app/pages/_share/user_detail/user_detail.component.ts app_bk/pages/_share/user_detail/user_detail.component.ts
1,27c1,27
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {Http} from '@angular/http';
< import 'rxjs/Rx';
< import {UserDetailService} from './user_detail.service'
< 
< @Component({
<   selector: 'ngx-user-detail',
<   styleUrls: ['user_detail.scss'],
<   templateUrl: 'user_detail.html',
<   providers: [UserDetailService],
< 
< })
< export class UserDetailComponent implements OnInit {
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: UserDetailService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {Http} from '@angular/http';
> import 'rxjs/Rx';
> import {UserDetailService} from './user_detail.service'
> 
> @Component({
>   selector: 'ngx-user-detail',
>   styleUrls: ['user_detail.scss'],
>   templateUrl: 'user_detail.html',
>   providers: [UserDetailService],
> 
> })
> export class UserDetailComponent implements OnInit {
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: UserDetailService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> }
diff -r app/pages/_share/user_detail/user_detail.html app_bk/pages/_share/user_detail/user_detail.html
1,26c1,26
< <div class="row">
<   <div class="col-md-3">
<   </div>
< 
<   <div class="col-md-6">
<     <nb-card>
<       <nb-card-header>管理员登录</nb-card-header>
<       <nb-card-body>
<         <form>
<           <div class="form-group">
<             <label for="ln">账号</label>
<             <input type="text" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
<           </div>
<           <div class="form-group">
<             <label for="pd">密码</label>
<             <input type="password" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
<           </div>
<           <button type="submit" (click)="goBack()" class="btn btn-danger">返回列表</button>
<         </form>
<       </nb-card-body>
<     </nb-card>
<   </div>
< 
<   <div class="col-md-3">
<   </div>
< </div>
---
> <div class="row">
>   <div class="col-md-3">
>   </div>
> 
>   <div class="col-md-6">
>     <nb-card>
>       <nb-card-header>管理员登录</nb-card-header>
>       <nb-card-body>
>         <form>
>           <div class="form-group">
>             <label for="ln">账号</label>
>             <input type="text" class="form-control" id="ln" name="ln" [(ngModel)]="ln" placeholder="账号">
>           </div>
>           <div class="form-group">
>             <label for="pd">密码</label>
>             <input type="password" class="form-control" id="pd" [(ngModel)]="pd" name="pd" placeholder="密码">
>           </div>
>           <button type="submit" (click)="goBack()" class="btn btn-danger">返回列表</button>
>         </form>
>       </nb-card-body>
>     </nb-card>
>   </div>
> 
>   <div class="col-md-3">
>   </div>
> </div>
diff -r app/pages/_share/user_detail/user_detail.scss app_bk/pages/_share/user_detail/user_detail.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/user_detail/user_detail.service.ts app_bk/pages/_share/user_detail/user_detail.service.ts
1,11c1,11
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class UserDetailService {
<     constructor(private http: Http) {};
<     getD() {
<       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class UserDetailService {
>     constructor(private http: Http) {};
>     getD() {
>       return this.http.get('/_accesses/get_user_login').map((res) => res.json());
>     }
> }
diff -r app/pages/_share/user_edit/index.ts app_bk/pages/_share/user_edit/index.ts
1c1
< export * from './user_edit.component';
---
> export * from './user_edit.component';
diff -r app/pages/_share/user_edit/user_edit.component.ts app_bk/pages/_share/user_edit/user_edit.component.ts
1,222c1,222
< import {Component, OnInit} from '@angular/core';
< import {UserEditService} from './user_edit.service';
< import {ActivatedRoute} from '@angular/router';
< import { XUser } from '../../@xmodel/XUser';
< import { XKV } from '../../@xmodel/XKV';
< 
< @Component({
<   selector: 'ngx-share-user-edit',
<   styleUrls: ['user_edit.scss'],
<   templateUrl: 'user_edit.html',
<   providers: [UserEditService],
< 
< })
< export class UserEditComponent implements OnInit {
<   private sn: string;
<   public CurrentX: XUser;
<   settingsProject = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: false,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_a/_s_share/user_detail/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsProduct = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages_u/_s_share/user_detail/' +
<             row.sn +
<             '"><i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   settingsFile = {
<     actions: {
<       add: false,
<       edit: false,
<       delete: {
<         deleteButtonContent: '<i class="nb-trash"></i>',
<         confirmDelete: true,
<       },
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '企业名称',
<         type: 'string',
<       },
<       level_label: {
<         title: '成熟等级',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   xsUser: XUser[];
<   xsELevel: XKV[];
<   xsEType: XKV[];
<   xsEStatus: XKV[];
<   xsEClass: XKV[];
< 
<   constructor(private service: UserEditService, public route: ActivatedRoute) {
<     const dateObj = new Date();
<     this.sn = this.route.snapshot.params['sn'];
<   }
< 
<   private handleError(error: any) {
<     window.alert('对不起，' + error);
<   }
< 
<   ngOnInit() {
<     this.service.getDULevel().then(
<       res => {
<         this.xsELevel = res;
<       }).catch(this.handleError);
<     this.service.getDUType().then(
<       res => {
<         this.xsEType = res;
<       }).catch(this.handleError);
<     this.service.getDUStatus().then(
<       res => {
<         this.xsEStatus = res;
<       }).catch(this.handleError);
<     this.service.getD(this.sn).then(
<       res => {
<         this.xsUser = res;
<         this.CurrentX = this.xsUser[0];
<       }).catch(this.handleError);
<   }
< 
< 
<   backD() {
<     window.location.href = '#/pages_a/_s_adamiya/all_user_list';
<   }
< 
<   updateD() {
<     this.service.editD(this.CurrentX);
<   }
< 
< }
---
> import {Component, OnInit} from '@angular/core';
> import {UserEditService} from './user_edit.service';
> import {ActivatedRoute} from '@angular/router';
> import { XUser } from '../../@xmodel/XUser';
> import { XKV } from '../../@xmodel/XKV';
> 
> @Component({
>   selector: 'ngx-share-user-edit',
>   styleUrls: ['user_edit.scss'],
>   templateUrl: 'user_edit.html',
>   providers: [UserEditService],
> 
> })
> export class UserEditComponent implements OnInit {
>   private sn: string;
>   public CurrentX: XUser;
>   settingsProject = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: false,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_a/_share/user_detail/' +
>             row.sn +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsProduct = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages_u/_share/user_detail/' +
>             row.sn +
>             '"><i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   settingsFile = {
>     actions: {
>       add: false,
>       edit: false,
>       delete: {
>         deleteButtonContent: '<i class="nb-trash"></i>',
>         confirmDelete: true,
>       },
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '企业名称',
>         type: 'string',
>       },
>       level_label: {
>         title: '成熟等级',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   xsUser: XUser[];
>   xsELevel: XKV[];
>   xsEType: XKV[];
>   xsEStatus: XKV[];
>   xsEClass: XKV[];
> 
>   constructor(private service: UserEditService, public route: ActivatedRoute) {
>     const dateObj = new Date();
>     this.sn = this.route.snapshot.params['sn'];
>   }
> 
>   private handleError(error: any) {
>     window.alert('对不起，' + error);
>   }
> 
>   ngOnInit() {
>     this.service.getDULevel().then(
>       res => {
>         this.xsELevel = res;
>       }).catch(this.handleError);
>     this.service.getDUType().then(
>       res => {
>         this.xsEType = res;
>       }).catch(this.handleError);
>     this.service.getDUStatus().then(
>       res => {
>         this.xsEStatus = res;
>       }).catch(this.handleError);
>     this.service.getD(this.sn).then(
>       res => {
>         this.xsUser = res;
>         this.CurrentX = this.xsUser[0];
>       }).catch(this.handleError);
>   }
> 
> 
>   backD() {
>     window.location.href = '#/pages_a/_adamiya/all_user_list';
>   }
> 
>   updateD() {
>     this.service.editD(this.CurrentX);
>   }
> 
> }
diff -r app/pages/_share/user_edit/user_edit.html app_bk/pages/_share/user_edit/user_edit.html
1,108c1,108
< <div class="row">
<   <div class="col-md-8">
<     <nb-card>
<       <nb-card-header>
<         用户详细信息
<       </nb-card-header>
<       <nb-card-body>
<         <nb-tabset fullWidth>
<           <nb-tab tabTitle="基本">
<             <div class="row">
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="label">真实姓名</label>
<                   <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_cn_uid">身份证号</label>
<                   <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_setup_dt">出生日期</label>
<                   <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_reg_sn">登录账号</label>
<                   <input type="text" class="form-control" id="basic_reg_sn" name="basic_reg_sn" [(ngModel)]="this.CurrentX.basic_reg_sn">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_reg_address">常用住址</label>
<                   <input type="text" class="form-control" id="basic_reg_address" name="basic_reg_address" [(ngModel)]="this.CurrentX.basic_reg_address">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="type_sn">用户类型</label>
<                   <select id="type_sn" class="form-control" name="type_sn"  [(ngModel)]="this.CurrentX.type_sn">
<                     <option *ngFor="let item of this.xsEType" [value]='item.sn'>{{item.label}}</option>
<                   </select>
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_biz_tel">办公电话</label>
<                   <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
<                 </div>
<               </div>
<               <div class="col-sm-6 col-lg-6">
<                 <div class="form-group">
<                   <label for="basic_org_sn">手机号码</label>
<                   <input type="text" class="form-control" id="basic_org_sn" name="basic_org_sn" [(ngModel)]="this.CurrentX.basic_org_sn">
<                 </div>
<               </div>
<             </div>
<           </nb-tab>
<           <nb-tab tabTitle="项目">
<             <span>Content #33</span>
<             <ng2-smart-table [settings]="settingsProject" [source]="xsProject">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="产品">
<             <span>Content #34</span>
<             <ng2-smart-table [settings]="settingsProduct" [source]="xsProduct">
<             </ng2-smart-table>
<           </nb-tab>
<           <nb-tab tabTitle="附件">
<             <span>Content #35</span>
<             <ng2-smart-table [settings]="settingsFile" [source]="xsFile">
<             </ng2-smart-table>
<           </nb-tab>
<         </nb-tabset>
<         <hr />
<         <div class="col-md-12 col-lg-12">
<           <button (click)="backD()" class="btn btn-success">返回列表</button>
<           <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
<         </div>
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card>
<       <nb-card-header>
< 
<       </nb-card-header>
<       <nb-card-body>
< 
<       </nb-card-body>
<     </nb-card>
<   </div>
<   <div class="col-md-2">
<     <nb-card>
<       <nb-card-header>
< 
<       </nb-card-header>
<       <nb-card-body>
< 
<       </nb-card-body>
<     </nb-card>
<   </div>
< </div>
< 
---
> <div class="row">
>   <div class="col-md-8">
>     <nb-card>
>       <nb-card-header>
>         用户详细信息
>       </nb-card-header>
>       <nb-card-body>
>         <nb-tabset fullWidth>
>           <nb-tab tabTitle="基本">
>             <div class="row">
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="label">真实姓名</label>
>                   <input type="text" class="form-control" id="label" name="label" [(ngModel)]="this.CurrentX.label">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_cn_uid">身份证号</label>
>                   <input type="text" class="form-control" id="basic_cn_uid" name="basic_cn_uid" [(ngModel)]="this.CurrentX.basic_cn_uid">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_setup_dt">出生日期</label>
>                   <input type="text" class="form-control" id="basic_setup_dt" name="basic_setup_dt" [(ngModel)]="this.CurrentX.basic_setup_dt">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_reg_sn">登录账号</label>
>                   <input type="text" class="form-control" id="basic_reg_sn" name="basic_reg_sn" [(ngModel)]="this.CurrentX.basic_reg_sn">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_reg_address">常用住址</label>
>                   <input type="text" class="form-control" id="basic_reg_address" name="basic_reg_address" [(ngModel)]="this.CurrentX.basic_reg_address">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="type_sn">用户类型</label>
>                   <select id="type_sn" class="form-control" name="type_sn"  [(ngModel)]="this.CurrentX.type_sn">
>                     <option *ngFor="let item of this.xsEType" [value]='item.sn'>{{item.label}}</option>
>                   </select>
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_biz_tel">办公电话</label>
>                   <input type="text" class="form-control" id="basic_biz_tel" name="basic_biz_tel" [(ngModel)]="this.CurrentX.basic_biz_tel">
>                 </div>
>               </div>
>               <div class="col-sm-6 col-lg-6">
>                 <div class="form-group">
>                   <label for="basic_org_sn">手机号码</label>
>                   <input type="text" class="form-control" id="basic_org_sn" name="basic_org_sn" [(ngModel)]="this.CurrentX.basic_org_sn">
>                 </div>
>               </div>
>             </div>
>           </nb-tab>
>           <nb-tab tabTitle="项目">
>             <span>Content #33</span>
>             <ng2-smart-table [settings]="settingsProject" [source]="xsProject">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="产品">
>             <span>Content #34</span>
>             <ng2-smart-table [settings]="settingsProduct" [source]="xsProduct">
>             </ng2-smart-table>
>           </nb-tab>
>           <nb-tab tabTitle="附件">
>             <span>Content #35</span>
>             <ng2-smart-table [settings]="settingsFile" [source]="xsFile">
>             </ng2-smart-table>
>           </nb-tab>
>         </nb-tabset>
>         <hr />
>         <div class="col-md-12 col-lg-12">
>           <button (click)="backD()" class="btn btn-success">返回列表</button>
>           <button type="submit" (click)="updateD()" class="btn btn-info pull-right">确认修改</button>
>         </div>
>       </nb-card-body>
>     </nb-card>
>   </div>
>   <div class="col-md-2">
>     <nb-card>
>       <nb-card-header>
> 
>       </nb-card-header>
>       <nb-card-body>
> 
>       </nb-card-body>
>     </nb-card>
>   </div>
>   <div class="col-md-2">
>     <nb-card>
>       <nb-card-header>
> 
>       </nb-card-header>
>       <nb-card-body>
> 
>       </nb-card-body>
>     </nb-card>
>   </div>
> </div>
> 
diff -r app/pages/_share/user_edit/user_edit.scss app_bk/pages/_share/user_edit/user_edit.scss
1,45c1,45
< @import '../../../@theme/styles/themes';
< @import '../../../../../node_modules/bootstrap/scss/mixins/breakpoints';
< @import '../../../../../node_modules/@nebular/theme/styles/global/bootstrap/breakpoints';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< 
<   nb-tabset {
<     height: 100%;
<     display: flex;
<     flex-direction: column;
<   }
< 
<   nb-tab {
<     padding: nb-theme(padding);
<   }
< 
<   /deep/ ngx-tab1, /deep/ ngx-tab2 {
<     display: block;
<     padding: nb-theme(padding);
<   }
< 
<   @include media-breakpoint-down(xs) {
<     nb-tabset /deep/ul {
<       font-size: 1rem;
<       padding: 0 0.25rem;
<     }
<   }
< }
---
> @import '../../../@theme/styles/themes';
> @import '../../../../../node_modules/bootstrap/scss/mixins/breakpoints';
> @import '../../../../../node_modules/@nebular/theme/styles/global/bootstrap/breakpoints';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> 
>   nb-tabset {
>     height: 100%;
>     display: flex;
>     flex-direction: column;
>   }
> 
>   nb-tab {
>     padding: nb-theme(padding);
>   }
> 
>   /deep/ ngx-tab1, /deep/ ngx-tab2 {
>     display: block;
>     padding: nb-theme(padding);
>   }
> 
>   @include media-breakpoint-down(xs) {
>     nb-tabset /deep/ul {
>       font-size: 1rem;
>       padding: 0 0.25rem;
>     }
>   }
> }
diff -r app/pages/_share/user_edit/user_edit.service.ts app_bk/pages/_share/user_edit/user_edit.service.ts
1,218c1,218
< import { Injectable } from '@angular/core';
< import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
< import 'rxjs/add/operator/toPromise';
< import { XUser } from '../../@xmodel/XUser';
< import { XKV } from '../../@xmodel/XKV';
< 
< const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset =utf-8'});
< 
< @Injectable()
< export class UserEditService {
<   constructor(private httpClient: HttpClient) {
<   };
< 
<   getD(sn): Promise<XUser[]> {
<     // return this.http.get('/_s_adamiya/get_user_list').map((res) => res.json());
<     const url = '/_s_share/get_user_detail';
<     const params = new HttpParams()
<       .set('sn', sn);
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProject(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_user_project_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDProduct(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_user_product_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDFile(sn) {
<     const params = new HttpParams()
<       .set('sn', sn);
<     const url = '/_s_share/get_user_file_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setX(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDUType() {
<     const params = new HttpParams()
<       .set('en', 'user_type');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDUStatus() {
<     const params = new HttpParams()
<       .set('en', 'user_status');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   getDULevel() {
<     const params = new HttpParams()
<       .set('en', 'user_level');
<     const url = '/_s_share/get_kv_list';
<     const listx = [];
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       })
<       .toPromise().then(data => {
<           const count = (<Array<string>>data).length;
<           for (let i = 0; i < count; i++) {
<             listx.push(this.setKV(data[i]));
<           }
<           return listx;
<         },
<       ).catch(this.handleError);
<   }
< 
<   setKV(data: any): XKV {
<     const x = new XKV();
<     x.sn = data['sn'];
<     x.label = data['label'];
<     return x;
<   }
< 
<   setX(data: any): XUser {
<     const x = new XUser();
<     x.id = data['id'];
<     x.sn = data['sn'];
<     x.label = data['label'];
<     x.creator_sn = data['creator_sn'];
<     x.create_dt = data['create_dt'];
<     x.custom_code = data['custom_code'];
<     x.last_update_dt = data['last_update_dt'];
<     x.display_code = data['display_code'];
<     x.is_deleted = data['is_deleted'];
<     x.is_na = data['is_na'];
<     x.class_sn = data['class_sn'];
<     x.type_sn = data['type_sn'];
<     x.status_sn = data['status_sn'];
<     x.level_sn = data['level_sn'];
<     x.class_label = data['class_label'];
<     x.type_label = data['type_label'];
<     x.level_label = data['level_label'];
<     x.status_label = data['status_label'];
<     x.more_info = data['more_info'];
<     x.seo_tag = data['seo_tag'];
<     return x;
<   }
< 
<   editD(x) {
<     const url = '/_s_share/edit_user_detail';
<     const listx = [];
<     const params = new HttpParams()
<       .set('sn', x.sn)
<       .set('label', x.label)
<       .set('creator_sn', x.creator_sn)
<       .set('create_dt', x.create_dt)
<       .set('custom_code', x.custom_code)
<       .set('last_update_dt', x.last_update_dt)
<       .set('display_code', x.display_code)
<       .set('is_deleted', x.is_deleted)
<       .set('is_na', x.is_na)
<       .set('class_sn', x.class_sn)
<       .set('type_sn', x.type_sn)
<       .set('status_sn', x.status_sn)
<       .set('level_sn', x.level_sn)
<       .set('class_label', x.class_label)
<       .set('type_label', x.type_label)
<       .set('level_label', x.level_label)
<       .set('status_label', x.status_label)
<       .set('more_info', x.more_info)
<       .set('seo_tag', x.seo_tag)
<       .set('id', x.id);
< 
<     return this.httpClient.post(url, params,
<       {
<         headers,
<       }).toPromise().then(data => {
<           window.alert(data);
<         },
<       ).catch(this.handleError);
<   }
< 
<   handleError(error: any): Promise<any> {
<     console.error('对不起' + error);
<     return Promise.reject(error.message || error);
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
> import 'rxjs/add/operator/toPromise';
> import { XUser } from '../../@xmodel/XUser';
> import { XKV } from '../../@xmodel/XKV';
> 
> const headers = new HttpHeaders({ 'Content-Type': 'application/x-www-form-urlencoded;charset =utf-8'});
> 
> @Injectable()
> export class UserEditService {
>   constructor(private httpClient: HttpClient) {
>   };
> 
>   getD(sn): Promise<XUser[]> {
>     // return this.http.get('/_adamiya/get_user_list').map((res) => res.json());
>     const url = '/_share/get_user_detail';
>     const params = new HttpParams()
>       .set('sn', sn);
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDProject(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_user_project_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDProduct(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_user_product_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDFile(sn) {
>     const params = new HttpParams()
>       .set('sn', sn);
>     const url = '/_share/get_user_file_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setX(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDUType() {
>     const params = new HttpParams()
>       .set('en', 'user_type');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDUStatus() {
>     const params = new HttpParams()
>       .set('en', 'user_status');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   getDULevel() {
>     const params = new HttpParams()
>       .set('en', 'user_level');
>     const url = '/_share/get_kv_list';
>     const listx = [];
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       })
>       .toPromise().then(data => {
>           const count = (<Array<string>>data).length;
>           for (let i = 0; i < count; i++) {
>             listx.push(this.setKV(data[i]));
>           }
>           return listx;
>         },
>       ).catch(this.handleError);
>   }
> 
>   setKV(data: any): XKV {
>     const x = new XKV();
>     x.sn = data['sn'];
>     x.label = data['label'];
>     return x;
>   }
> 
>   setX(data: any): XUser {
>     const x = new XUser();
>     x.id = data['id'];
>     x.sn = data['sn'];
>     x.label = data['label'];
>     x.creator_sn = data['creator_sn'];
>     x.create_dt = data['create_dt'];
>     x.custom_code = data['custom_code'];
>     x.last_update_dt = data['last_update_dt'];
>     x.display_code = data['display_code'];
>     x.is_deleted = data['is_deleted'];
>     x.is_na = data['is_na'];
>     x.class_sn = data['class_sn'];
>     x.type_sn = data['type_sn'];
>     x.status_sn = data['status_sn'];
>     x.level_sn = data['level_sn'];
>     x.class_label = data['class_label'];
>     x.type_label = data['type_label'];
>     x.level_label = data['level_label'];
>     x.status_label = data['status_label'];
>     x.more_info = data['more_info'];
>     x.seo_tag = data['seo_tag'];
>     return x;
>   }
> 
>   editD(x) {
>     const url = '/_share/edit_user_detail';
>     const listx = [];
>     const params = new HttpParams()
>       .set('sn', x.sn)
>       .set('label', x.label)
>       .set('creator_sn', x.creator_sn)
>       .set('create_dt', x.create_dt)
>       .set('custom_code', x.custom_code)
>       .set('last_update_dt', x.last_update_dt)
>       .set('display_code', x.display_code)
>       .set('is_deleted', x.is_deleted)
>       .set('is_na', x.is_na)
>       .set('class_sn', x.class_sn)
>       .set('type_sn', x.type_sn)
>       .set('status_sn', x.status_sn)
>       .set('level_sn', x.level_sn)
>       .set('class_label', x.class_label)
>       .set('type_label', x.type_label)
>       .set('level_label', x.level_label)
>       .set('status_label', x.status_label)
>       .set('more_info', x.more_info)
>       .set('seo_tag', x.seo_tag)
>       .set('id', x.id);
> 
>     return this.httpClient.post(url, params,
>       {
>         headers,
>       }).toPromise().then(data => {
>           window.alert(data);
>         },
>       ).catch(this.handleError);
>   }
> 
>   handleError(error: any): Promise<any> {
>     console.error('对不起' + error);
>     return Promise.reject(error.message || error);
>   }
> }
diff -r app/pages/_share/user_enterprise_list/index.ts app_bk/pages/_share/user_enterprise_list/index.ts
1c1
< export * from './user_enterprise_list.component';
---
> export * from './user_enterprise_list.component';
diff -r app/pages/_share/user_enterprise_list/user_enterprise_list.component.ts app_bk/pages/_share/user_enterprise_list/user_enterprise_list.component.ts
1,113c1,113
< import {Component, OnInit} from '@angular/core';
< import {UserEnterpriseListService} from './user_enterprise_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-share-user-enterprise-list',
<   templateUrl: './user_enterprise_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class UserEnterpriseListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/enterprise_detail/[row.id]">' +
<             '<i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: UserEnterpriseListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {UserEnterpriseListService} from './user_enterprise_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-user-enterprise-list',
>   templateUrl: './user_enterprise_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class UserEnterpriseListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/enterprise_detail/[row.id]">' +
>             '<i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: UserEnterpriseListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_share/user_enterprise_list/user_enterprise_list.html app_bk/pages/_share/user_enterprise_list/user_enterprise_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     企业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     企业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/user_enterprise_list/user_enterprise_list.scss app_bk/pages/_share/user_enterprise_list/user_enterprise_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/user_enterprise_list/user_enterprise_list.service.ts app_bk/pages/_share/user_enterprise_list/user_enterprise_list.service.ts
1,55c1,55
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class UserEnterpriseListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_user_enterprise_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC.set('label', newData['label']);
<     paramsC.set('position', newData['position']);
<     paramsC.set('mobile', newData['mobile']);
<     paramsC.set('email', newData['email']);
<     paramsC.set('tel', newData['tel']);
<     this.http.post('/_s_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE.set('label', newData['label']);
<     paramsE.set('position', newData['position']);
<     paramsE.set('mobile', newData['mobile']);
<     paramsE.set('email', newData['email']);
<     paramsE.set('tel', newData['tel']);
<     paramsE.set('id', newData['id']);
<     this.http.post('/_s_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'user_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class UserEnterpriseListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_user_enterprise_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC.set('label', newData['label']);
>     paramsC.set('position', newData['position']);
>     paramsC.set('mobile', newData['mobile']);
>     paramsC.set('email', newData['email']);
>     paramsC.set('tel', newData['tel']);
>     this.http.post('/_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE.set('label', newData['label']);
>     paramsE.set('position', newData['position']);
>     paramsE.set('mobile', newData['mobile']);
>     paramsE.set('email', newData['email']);
>     paramsE.set('tel', newData['tel']);
>     paramsE.set('id', newData['id']);
>     this.http.post('/_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'user_info');
>     this.http.post('/_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/user_favor_list/index.ts app_bk/pages/_share/user_favor_list/index.ts
1c1
< export * from './user_favor_list.component';
---
> export * from './user_favor_list.component';
diff -r app/pages/_share/user_favor_list/user_favor_list.component.ts app_bk/pages/_share/user_favor_list/user_favor_list.component.ts
1,112c1,112
< import {Component, OnInit} from '@angular/core';
< import {Observable} from 'rxjs/Observable';
< import {UserFavorListService} from './user_favor_list.service';
< 
< @Component({
<   selector: 'ngx-share-user-favor-list',
<   templateUrl: './user_favor_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class UserFavorListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_sn: {
<         title: '类型',
<         type: 'string',
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_master/user_add/[row.id]">' +
<             '<i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: UserFavorListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {Observable} from 'rxjs/Observable';
> import {UserFavorListService} from './user_favor_list.service';
> 
> @Component({
>   selector: 'ngx-share-user-favor-list',
>   templateUrl: './user_favor_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class UserFavorListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_sn: {
>         title: '类型',
>         type: 'string',
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_master/user_add/[row.id]">' +
>             '<i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: UserFavorListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_share/user_favor_list/user_favor_list.html app_bk/pages/_share/user_favor_list/user_favor_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     收藏夹
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     收藏夹
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/user_favor_list/user_favor_list.scss app_bk/pages/_share/user_favor_list/user_favor_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/user_favor_list/user_favor_list.service.ts app_bk/pages/_share/user_favor_list/user_favor_list.service.ts
1,55c1,55
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class UserFavorListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_master/get_user_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC.set('label', newData['label']);
<     paramsC.set('position', newData['position']);
<     paramsC.set('mobile', newData['mobile']);
<     paramsC.set('email', newData['email']);
<     paramsC.set('tel', newData['tel']);
<     this.http.post('/_master/create_user_list', paramsC, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE.set('label', newData['label']);
<     paramsE.set('position', newData['position']);
<     paramsE.set('mobile', newData['mobile']);
<     paramsE.set('email', newData['email']);
<     paramsE.set('tel', newData['tel']);
<     paramsE.set('id', newData['id']);
<     this.http.post('/_master/edit_user_list', paramsE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'user_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class UserFavorListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_master/get_user_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC.set('label', newData['label']);
>     paramsC.set('position', newData['position']);
>     paramsC.set('mobile', newData['mobile']);
>     paramsC.set('email', newData['email']);
>     paramsC.set('tel', newData['tel']);
>     this.http.post('/_master/create_user_list', paramsC, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE.set('label', newData['label']);
>     paramsE.set('position', newData['position']);
>     paramsE.set('mobile', newData['mobile']);
>     paramsE.set('email', newData['email']);
>     paramsE.set('tel', newData['tel']);
>     paramsE.set('id', newData['id']);
>     this.http.post('/_master/edit_user_list', paramsE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'user_info');
>     this.http.post('/_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/user_product_list/index.ts app_bk/pages/_share/user_product_list/index.ts
1c1
< export * from './user_product_list.component';
---
> export * from './user_product_list.component';
diff -r app/pages/_share/user_product_list/user_product_list.component.ts app_bk/pages/_share/user_product_list/user_product_list.component.ts
1,113c1,113
< import {Component, OnInit} from '@angular/core';
< import {UserProductListService} from './user_product_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-share-user-product-list',
<   templateUrl: './user_product_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class UserProductListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/enterprise_detail/[row.id]">' +
<             '<i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: UserProductListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {UserProductListService} from './user_product_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-user-product-list',
>   templateUrl: './user_product_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class UserProductListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/enterprise_detail/[row.id]">' +
>             '<i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: UserProductListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_share/user_product_list/user_product_list.html app_bk/pages/_share/user_product_list/user_product_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     企业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     企业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/user_product_list/user_product_list.scss app_bk/pages/_share/user_product_list/user_product_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/user_product_list/user_product_list.service.ts app_bk/pages/_share/user_product_list/user_product_list.service.ts
1,55c1,55
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class UserProductListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_enterprise_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC.set('label', newData['label']);
<     paramsC.set('position', newData['position']);
<     paramsC.set('mobile', newData['mobile']);
<     paramsC.set('email', newData['email']);
<     paramsC.set('tel', newData['tel']);
<     this.http.post('/_s_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE.set('label', newData['label']);
<     paramsE.set('position', newData['position']);
<     paramsE.set('mobile', newData['mobile']);
<     paramsE.set('email', newData['email']);
<     paramsE.set('tel', newData['tel']);
<     paramsE.set('id', newData['id']);
<     this.http.post('/_s_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'user_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class UserProductListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_enterprise_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC.set('label', newData['label']);
>     paramsC.set('position', newData['position']);
>     paramsC.set('mobile', newData['mobile']);
>     paramsC.set('email', newData['email']);
>     paramsC.set('tel', newData['tel']);
>     this.http.post('/_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE.set('label', newData['label']);
>     paramsE.set('position', newData['position']);
>     paramsE.set('mobile', newData['mobile']);
>     paramsE.set('email', newData['email']);
>     paramsE.set('tel', newData['tel']);
>     paramsE.set('id', newData['id']);
>     this.http.post('/_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'user_info');
>     this.http.post('/_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/_share/user_project_list/index.ts app_bk/pages/_share/user_project_list/index.ts
1c1
< export * from './user_project_list.component';
---
> export * from './user_project_list.component';
diff -r app/pages/_share/user_project_list/user_project_list.component.ts app_bk/pages/_share/user_project_list/user_project_list.component.ts
1,113c1,113
< import {Component, OnInit} from '@angular/core';
< import {UserProjectListService} from './user_project_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-share-user-project-list',
<   templateUrl: './user_project_list.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class UserProjectListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmSave: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       id: {
<         editable: false,
<         title: 'ID',
<         type: 'number',
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_label: {
<         title: '类型',
<         type: 'string',
<         editable: false,
<       },
<       basic_cn_uid: {
<         title: '统一信用代码',
<         type: 'string',
<       },
<       basic_setup_dt: {
<         title: '设立日期',
<         type: 'string',
<       },
<       basic_reg_capital: {
<         title: '注册资本',
<         type: 'string',
<       },
<       basic_biz_tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<       Actions: {
<         title: '详细',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a class="text-white" title="详细" href="#/pages/_s_share/enterprise_detail/[row.id]">' +
<             '<i class="nb-list"></i></a>'
<         },
<         filter: false,
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: UserProjectListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     this.service.createD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onEditConfirm(event): void {
<     this.service.editD(event.newData);
<     event.confirm.resolve(event.newData);
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       this.service.deleteD(event.data);
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {UserProjectListService} from './user_project_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-share-user-project-list',
>   templateUrl: './user_project_list.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class UserProjectListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmSave: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       id: {
>         editable: false,
>         title: 'ID',
>         type: 'number',
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_label: {
>         title: '类型',
>         type: 'string',
>         editable: false,
>       },
>       basic_cn_uid: {
>         title: '统一信用代码',
>         type: 'string',
>       },
>       basic_setup_dt: {
>         title: '设立日期',
>         type: 'string',
>       },
>       basic_reg_capital: {
>         title: '注册资本',
>         type: 'string',
>       },
>       basic_biz_tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>       Actions: {
>         title: '详细',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a class="text-white" title="详细" href="#/pages/_share/enterprise_detail/[row.id]">' +
>             '<i class="nb-list"></i></a>'
>         },
>         filter: false,
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: UserProjectListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     this.service.createD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onEditConfirm(event): void {
>     this.service.editD(event.newData);
>     event.confirm.resolve(event.newData);
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       this.service.deleteD(event.data);
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/_share/user_project_list/user_project_list.html app_bk/pages/_share/user_project_list/user_project_list.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     企业列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     企业列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/_share/user_project_list/user_project_list.scss app_bk/pages/_share/user_project_list/user_project_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/_share/user_project_list/user_project_list.service.ts app_bk/pages/_share/user_project_list/user_project_list.service.ts
1,55c1,55
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< 
< const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
< const options = new RequestOptions({ headers: headers });
< const paramsC = new URLSearchParams();
< const paramsE = new URLSearchParams();
< const paramsD = new URLSearchParams();
< 
< @Injectable()
< export class UserProjectListService {
<   constructor(private http: Http) {
<   };
<   getD() {
<     return this.http.get('/_s_share/get_enterprise_list').map((res) => res.json());
<   }
< 
<   createD(newData) {
<     paramsC.set('label', newData['label']);
<     paramsC.set('position', newData['position']);
<     paramsC.set('mobile', newData['mobile']);
<     paramsC.set('email', newData['email']);
<     paramsC.set('tel', newData['tel']);
<     this.http.post('/_s_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD(newData) {
<     paramsE.set('label', newData['label']);
<     paramsE.set('position', newData['position']);
<     paramsE.set('mobile', newData['mobile']);
<     paramsE.set('email', newData['email']);
<     paramsE.set('tel', newData['tel']);
<     paramsE.set('id', newData['id']);
<     this.http.post('/_s_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   deleteD(newData) {
<     paramsD.set('id', newData['id']);
<     paramsD.set('en', 'user_info');
<     this.http.post('/_s_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> import { Headers, RequestOptions, URLSearchParams } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> 
> const headers = new Headers({ 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' });
> const options = new RequestOptions({ headers: headers });
> const paramsC = new URLSearchParams();
> const paramsE = new URLSearchParams();
> const paramsD = new URLSearchParams();
> 
> @Injectable()
> export class UserProjectListService {
>   constructor(private http: Http) {
>   };
>   getD() {
>     return this.http.get('/_share/get_enterprise_list').map((res) => res.json());
>   }
> 
>   createD(newData) {
>     paramsC.set('label', newData['label']);
>     paramsC.set('position', newData['position']);
>     paramsC.set('mobile', newData['mobile']);
>     paramsC.set('email', newData['email']);
>     paramsC.set('tel', newData['tel']);
>     this.http.post('/_share/create_enterprise_list', paramsC, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD(newData) {
>     paramsE.set('label', newData['label']);
>     paramsE.set('position', newData['position']);
>     paramsE.set('mobile', newData['mobile']);
>     paramsE.set('email', newData['email']);
>     paramsE.set('tel', newData['tel']);
>     paramsE.set('id', newData['id']);
>     this.http.post('/_share/edit_enterprise_list', paramsE, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   deleteD(newData) {
>     paramsD.set('id', newData['id']);
>     paramsD.set('en', 'user_info');
>     this.http.post('/_share/delete_to_recycle', paramsD, options).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> }
diff -r app/pages/@test/test_user_list/index.ts app_bk/pages/@test/test_user_list/index.ts
1c1
< export * from './test_user_list.component';
---
> export * from './test_user_list.component';
diff -r app/pages/@test/test_user_list/test_user_list.component.html app_bk/pages/@test/test_user_list/test_user_list.component.html
1,10c1,10
< <nb-card>
<   <nb-card-header>
<     用户列表
<   </nb-card-header>
< 
<   <nb-card-body>
<     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
<     </ng2-smart-table>
<   </nb-card-body>
< </nb-card>
---
> <nb-card>
>   <nb-card-header>
>     用户列表
>   </nb-card-header>
> 
>   <nb-card-body>
>     <ng2-smart-table [settings]="settings" [source]="dataSet" (createConfirm)="onCreateConfirm($event)" (editConfirm)="onEditConfirm($event)" (deleteConfirm)="onDeleteConfirm($event)">
>     </ng2-smart-table>
>   </nb-card-body>
> </nb-card>
diff -r app/pages/@test/test_user_list/test_user_list.component.ts app_bk/pages/@test/test_user_list/test_user_list.component.ts
1,112c1,112
< import {Component, OnInit} from '@angular/core';
< import {TestUserListService} from './test_user_list.service';
< import {Observable} from 'rxjs/Observable';
< 
< @Component({
<   selector: 'ngx-accesses-test-user-list',
<   templateUrl: './test_user_list.component.html',
<   styles: [`
<     nb-card {
<       transform: translate3d(0, 0, 0);
<     }
<   `],
< })
< 
< export class TestUserListComponent implements OnInit {
< 
<   settings = {
<     add: {
<       addButtonContent: '<i class="nb-plus"></i>',
<       createButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmCreate: true,
<     },
<     edit: {
<       editButtonContent: '<i class="nb-edit"></i>',
<       saveButtonContent: '<i class="nb-checkmark"></i>',
<       cancelButtonContent: '<i class="nb-close"></i>',
<       confirmEdit: true,
<     },
<     delete: {
<       deleteButtonContent: '<i class="nb-trash"></i>',
<       confirmDelete: true,
<     },
<     columns: {
<       Actions: {
<         title: 'Detail',
<         type: 'html',
<         valuePrepareFunction: (cell, row) => {
<           return '<a title="Detail" href="#/pages/_s_share/product_list"> <i class="nb-edit"></i></a>'
<         },
<         filter: false,
<       },
<       label: {
<         title: '姓名',
<         type: 'string',
<       },
<       login_name: {
<         title: '登录名',
<         type: 'string',
<       },
<       type_sn: {
<         title: '类型',
<         type: 'string',
<       },
<       position: {
<         title: '职位',
<         type: 'string',
<       },
<       mobile: {
<         title: '手机',
<         type: 'string',
<       },
<       email: {
<         title: '邮箱',
<         type: 'string',
<       },
<       tel: {
<         title: '办公电话',
<         type: 'string',
<       },
<     },
<   };
< 
<   dataSource: Observable<any>;
<   dataSet: Array<any> = [];
< 
<   constructor(private service: TestUserListService) {
<     this.dataSource = this.service.getD();
<   }
< 
<   ngOnInit() {
<     this.dataSource.subscribe(
<       (data) => this.dataSet = data,
<     )
<   }
< 
<   onCreateConfirm(event): void {
<     if (window.confirm(event.data['label'])) {
<       window.alert(event.newdata['tel']);
<       event.confirm.resolve(event.newData);
<       this.service.createD(event.newData);
<     } else {
<       event.confirm.reject();
<     }
<   }
< 
<   onEditConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< 
<   onDeleteConfirm(event): void {
<     if (window.confirm('确定要删除吗？')) {
<       event.confirm.resolve();
<     } else {
<       event.confirm.reject();
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> import {TestUserListService} from './test_user_list.service';
> import {Observable} from 'rxjs/Observable';
> 
> @Component({
>   selector: 'ngx-accesses-test-user-list',
>   templateUrl: './test_user_list.component.html',
>   styles: [`
>     nb-card {
>       transform: translate3d(0, 0, 0);
>     }
>   `],
> })
> 
> export class TestUserListComponent implements OnInit {
> 
>   settings = {
>     add: {
>       addButtonContent: '<i class="nb-plus"></i>',
>       createButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmCreate: true,
>     },
>     edit: {
>       editButtonContent: '<i class="nb-edit"></i>',
>       saveButtonContent: '<i class="nb-checkmark"></i>',
>       cancelButtonContent: '<i class="nb-close"></i>',
>       confirmEdit: true,
>     },
>     delete: {
>       deleteButtonContent: '<i class="nb-trash"></i>',
>       confirmDelete: true,
>     },
>     columns: {
>       Actions: {
>         title: 'Detail',
>         type: 'html',
>         valuePrepareFunction: (cell, row) => {
>           return '<a title="Detail" href="#/pages/_share/product_list"> <i class="nb-edit"></i></a>'
>         },
>         filter: false,
>       },
>       label: {
>         title: '姓名',
>         type: 'string',
>       },
>       login_name: {
>         title: '登录名',
>         type: 'string',
>       },
>       type_sn: {
>         title: '类型',
>         type: 'string',
>       },
>       position: {
>         title: '职位',
>         type: 'string',
>       },
>       mobile: {
>         title: '手机',
>         type: 'string',
>       },
>       email: {
>         title: '邮箱',
>         type: 'string',
>       },
>       tel: {
>         title: '办公电话',
>         type: 'string',
>       },
>     },
>   };
> 
>   dataSource: Observable<any>;
>   dataSet: Array<any> = [];
> 
>   constructor(private service: TestUserListService) {
>     this.dataSource = this.service.getD();
>   }
> 
>   ngOnInit() {
>     this.dataSource.subscribe(
>       (data) => this.dataSet = data,
>     )
>   }
> 
>   onCreateConfirm(event): void {
>     if (window.confirm(event.data['label'])) {
>       window.alert(event.newdata['tel']);
>       event.confirm.resolve(event.newData);
>       this.service.createD(event.newData);
>     } else {
>       event.confirm.reject();
>     }
>   }
> 
>   onEditConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> 
>   onDeleteConfirm(event): void {
>     if (window.confirm('确定要删除吗？')) {
>       event.confirm.resolve();
>     } else {
>       event.confirm.reject();
>     }
>   }
> }
diff -r app/pages/@test/test_user_list/test_user_list.scss app_bk/pages/@test/test_user_list/test_user_list.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/@test/test_user_list/test_user_list.service.ts app_bk/pages/@test/test_user_list/test_user_list.service.ts
1,33c1,33
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import { Observable, of } from 'rxjs';
< 
< @Injectable()
< export class TestUserListService {
<   constructor(private http: Http) {};
<   getD() {
<     return this.http.get('/_master/get_user_list').map((res) => res.json());
<   }
< 
<   createD(newdata) {
<     window.alert(newdata['label']);
<     const params = new URLSearchParams();
<     params.set('label', newdata['label']);
<     params.set('position', newdata['position']);
<     params.set('mobile', newdata['mobile']);
<     params.set('email', newdata['email']);
<     params.set('tel', newdata['tel']);
<     this.http.post('/_master/create_user_list', params).toPromise().then((response) => {
<       response.json();
<     });
<     return 'OK';
<   }
< 
<   editD() {
<     return this.http.get('/_master/edit_user_list').map((res) => res.json());
<   }
< 
<   deleteD() {
<     return this.http.get('/_master/delete_user_list').map((res) => res.json());
<   }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import { Observable, of } from 'rxjs';
> 
> @Injectable()
> export class TestUserListService {
>   constructor(private http: Http) {};
>   getD() {
>     return this.http.get('/_master/get_user_list').map((res) => res.json());
>   }
> 
>   createD(newdata) {
>     window.alert(newdata['label']);
>     const params = new URLSearchParams();
>     params.set('label', newdata['label']);
>     params.set('position', newdata['position']);
>     params.set('mobile', newdata['mobile']);
>     params.set('email', newdata['email']);
>     params.set('tel', newdata['tel']);
>     this.http.post('/_master/create_user_list', params).toPromise().then((response) => {
>       response.json();
>     });
>     return 'OK';
>   }
> 
>   editD() {
>     return this.http.get('/_master/edit_user_list').map((res) => res.json());
>   }
> 
>   deleteD() {
>     return this.http.get('/_master/delete_user_list').map((res) => res.json());
>   }
> }
diff -r app/pages/@test/user-add/hero.ts app_bk/pages/@test/user-add/hero.ts
1,5c1,5
< export class Hero {
<   label: string;
<   sn: string;
<   id: number;
<   }
---
> export class Hero {
>   label: string;
>   sn: string;
>   id: number;
>   }
diff -r app/pages/@test/user-add/index.ts app_bk/pages/@test/user-add/index.ts
1c1
< export * from './user-add.component';
---
> export * from './user-add.component';
diff -r app/pages/@test/user-add/user-add.component.html app_bk/pages/@test/user-add/user-add.component.html
1,206c1,206
< 
< 
< <div *ngFor="let aa of heros">
< 
< <span>
<     姓名：{{aa.label}}
< 
< </span>
< <span>
< 
<     序号：{{aa.id}}
< 
< </span>
< <span>
< 
<     密码：{{aa.sn}}
< </span>
< 
< </div>
< <div class="row">
<     <div class="col-md-12">
<       <nb-card class="inline-form-card">
<         <nb-card-header>User Reg</nb-card-header>
<         <nb-card-body>
<           <form class="form-inline">
<             <input type="text" class="form-control full-width" placeholder="Jane Doe">
<             <div class="input-group full-width">
<               <div class="input-group-addon">@</div>
<               <input type="text" class="form-control" placeholder="Email">
<             </div>
<             <nb-checkbox>Remember me</nb-checkbox>
<             <button type="submit" class="btn btn-primary">Submit</button>
<           </form>
<         </nb-card-body>
<       </nb-card>
<     </div>
<   </div>
< 
<   <div class="row">
<     <div class="col-md-6">
<       <nb-card>
<         <nb-card-header>Using the Grid</nb-card-header>
<         <nb-card-body>
<           <form>
<             <div class="form-group row">
<               <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
<               <div class="col-sm-9">
<                 <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
<               </div>
<             </div>
<             <div class="form-group row">
<               <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
<               <div class="col-sm-9">
<                 <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
<               </div>
<             </div>
<             <div class="form-group row">
<               <label class="col-sm-3">Radios</label>
<               <div class="col-sm-9">
<                 <div class="form-check">
<                   <label class="custom-control custom-radio">
<                     <input type="radio" class="custom-control-input" name="gridRadios" checked>
<                     <span class="custom-control-indicator"></span>
<                     <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
<                   </label>
<                 </div>
<                 <div class="form-check">
<                   <label class="custom-control custom-radio">
<                     <input type="radio" class="custom-control-input" name="gridRadios">
<                     <span class="custom-control-indicator"></span>
<                     <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
<                   </label>
<                 </div>
<                 <div class="form-check disabled">
<                   <label class="custom-control custom-radio">
<                     <input type="radio" class="custom-control-input" name="gridRadios" disabled>
<                     <span class="custom-control-indicator"></span>
<                     <span class="custom-control-description">Option three is disabled</span>
<                   </label>
<                 </div>
<               </div>
<             </div>
<             <div class="form-group row">
<               <div class="offset-sm-3 col-sm-9">
<                 <button type="submit" class="btn btn-primary">Sign in</button>
<               </div>
<             </div>
<           </form>
<         </nb-card-body>
<       </nb-card>
< 
<       <nb-card>
<         <nb-card-header>Form without labels</nb-card-header>
<         <nb-card-body>
<           <form>
<             <div class="form-group">
<               <input type="text" class="form-control" placeholder="Recipients">
<             </div>
<             <div class="form-group">
<               <input type="text" class="form-control" placeholder="Subject">
<             </div>
<             <div class="form-group">
<               <textarea class="form-control" placeholder="Message"></textarea>
<             </div>
<             <button type="submit" class="btn btn-success">Send</button>
<           </form>
<         </nb-card-body>
<       </nb-card>
<     </div>
< 
<     <div class="col-md-6">
<       <nb-card>
<         <nb-card-header>Basic form</nb-card-header>
<         <nb-card-body>
<           <form>
<             <div class="form-group">
<               <label for="exampleInputEmail1">Email address</label>
<               <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
<             </div>
<             <div class="form-group">
<               <label for="exampleInputPassword1">Password</label>
<               <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
<             </div>
<             <div class="form-group">
<               <nb-checkbox>Check me out</nb-checkbox>
<             </div>
<             <button type="submit" class="btn btn-danger">Submit</button>
<           </form>
<         </nb-card-body>
<       </nb-card>
< 
<       <nb-card>
<         <nb-card-header>Block form</nb-card-header>
<         <nb-card-body>
<           <div class="row">
<             <div class="col-sm-6">
<               <div class="form-group">
<                 <label for="inputFirstName">First Name</label>
<                 <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
<               </div>
<             </div>
<             <div class="col-sm-6">
<               <div class="form-group">
<                 <label for="inputLastName">Last Name</label>
<                 <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
<               </div>
<             </div>
<           </div>
<           <div class="row">
<             <div class="col-sm-6">
<               <div class="form-group">
<                 <label for="inputEmail">Email</label>
<                 <input type="email" class="form-control" id="inputEmail" placeholder="Email">
<               </div>
<             </div>
<             <div class="col-sm-6">
<               <div class="form-group">
<                 <label for="inputWebsite">Website</label>
<                 <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
<               </div>
<             </div>
<           </div>
<           <button type="submit" class="btn btn-primary">Submit</button>
<         </nb-card-body>
<       </nb-card>
<     </div>
<   </div>
< 
<   <div class="row">
<     <div class="col-md-6">
<       <nb-card>
<         <nb-card-header>Horizontal form</nb-card-header>
<         <nb-card-body>
<           <form class="form-horizontal">
<             <div class="form-group row">
<               <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
<               <div class="col-sm-9">
<                 <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
<               </div>
<             </div>
<             <div class="form-group row">
<               <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
<               <div class="col-sm-9">
<                 <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
<               </div>
<             </div>
<             <div class="form-group row">
<               <div class="offset-sm-3 col-sm-9">
<                 <div class="checkbox">
<                   <nb-checkbox>Remember me</nb-checkbox>
<                 </div>
<               </div>
<             </div>
<             <div class="form-group row">
<               <div class="offset-sm-3 col-sm-9">
<                 <button type="submit" class="btn btn-warning">Sign in</button>
<               </div>
<             </div>
<           </form>
<         </nb-card-body>
<       </nb-card>
<     </div>
<   </div>
< 
< 
< 
---
> 
> 
> <div *ngFor="let aa of heros">
> 
> <span>
>     姓名：{{aa.label}}
> 
> </span>
> <span>
> 
>     序号：{{aa.id}}
> 
> </span>
> <span>
> 
>     密码：{{aa.sn}}
> </span>
> 
> </div>
> <div class="row">
>     <div class="col-md-12">
>       <nb-card class="inline-form-card">
>         <nb-card-header>User Reg</nb-card-header>
>         <nb-card-body>
>           <form class="form-inline">
>             <input type="text" class="form-control full-width" placeholder="Jane Doe">
>             <div class="input-group full-width">
>               <div class="input-group-addon">@</div>
>               <input type="text" class="form-control" placeholder="Email">
>             </div>
>             <nb-checkbox>Remember me</nb-checkbox>
>             <button type="submit" class="btn btn-primary">Submit</button>
>           </form>
>         </nb-card-body>
>       </nb-card>
>     </div>
>   </div>
> 
>   <div class="row">
>     <div class="col-md-6">
>       <nb-card>
>         <nb-card-header>Using the Grid</nb-card-header>
>         <nb-card-body>
>           <form>
>             <div class="form-group row">
>               <label for="inputEmail1" class="col-sm-3 col-form-label">Email</label>
>               <div class="col-sm-9">
>                 <input type="email" class="form-control" id="inputEmail1" placeholder="Email">
>               </div>
>             </div>
>             <div class="form-group row">
>               <label for="inputPassword2" class="col-sm-3 col-form-label">Password</label>
>               <div class="col-sm-9">
>                 <input type="password" class="form-control" id="inputPassword2" placeholder="Password">
>               </div>
>             </div>
>             <div class="form-group row">
>               <label class="col-sm-3">Radios</label>
>               <div class="col-sm-9">
>                 <div class="form-check">
>                   <label class="custom-control custom-radio">
>                     <input type="radio" class="custom-control-input" name="gridRadios" checked>
>                     <span class="custom-control-indicator"></span>
>                     <span class="custom-control-description">Option one is this and that&mdash;be sure to include why it's great</span>
>                   </label>
>                 </div>
>                 <div class="form-check">
>                   <label class="custom-control custom-radio">
>                     <input type="radio" class="custom-control-input" name="gridRadios">
>                     <span class="custom-control-indicator"></span>
>                     <span class="custom-control-description">Option two can be something else and selecting it will deselect option one</span>
>                   </label>
>                 </div>
>                 <div class="form-check disabled">
>                   <label class="custom-control custom-radio">
>                     <input type="radio" class="custom-control-input" name="gridRadios" disabled>
>                     <span class="custom-control-indicator"></span>
>                     <span class="custom-control-description">Option three is disabled</span>
>                   </label>
>                 </div>
>               </div>
>             </div>
>             <div class="form-group row">
>               <div class="offset-sm-3 col-sm-9">
>                 <button type="submit" class="btn btn-primary">Sign in</button>
>               </div>
>             </div>
>           </form>
>         </nb-card-body>
>       </nb-card>
> 
>       <nb-card>
>         <nb-card-header>Form without labels</nb-card-header>
>         <nb-card-body>
>           <form>
>             <div class="form-group">
>               <input type="text" class="form-control" placeholder="Recipients">
>             </div>
>             <div class="form-group">
>               <input type="text" class="form-control" placeholder="Subject">
>             </div>
>             <div class="form-group">
>               <textarea class="form-control" placeholder="Message"></textarea>
>             </div>
>             <button type="submit" class="btn btn-success">Send</button>
>           </form>
>         </nb-card-body>
>       </nb-card>
>     </div>
> 
>     <div class="col-md-6">
>       <nb-card>
>         <nb-card-header>Basic form</nb-card-header>
>         <nb-card-body>
>           <form>
>             <div class="form-group">
>               <label for="exampleInputEmail1">Email address</label>
>               <input type="email" class="form-control" id="exampleInputEmail1" placeholder="Email">
>             </div>
>             <div class="form-group">
>               <label for="exampleInputPassword1">Password</label>
>               <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Password">
>             </div>
>             <div class="form-group">
>               <nb-checkbox>Check me out</nb-checkbox>
>             </div>
>             <button type="submit" class="btn btn-danger">Submit</button>
>           </form>
>         </nb-card-body>
>       </nb-card>
> 
>       <nb-card>
>         <nb-card-header>Block form</nb-card-header>
>         <nb-card-body>
>           <div class="row">
>             <div class="col-sm-6">
>               <div class="form-group">
>                 <label for="inputFirstName">First Name</label>
>                 <input type="text" class="form-control" id="inputFirstName" placeholder="First Name">
>               </div>
>             </div>
>             <div class="col-sm-6">
>               <div class="form-group">
>                 <label for="inputLastName">Last Name</label>
>                 <input type="text" class="form-control" id="inputLastName" placeholder="Last Name">
>               </div>
>             </div>
>           </div>
>           <div class="row">
>             <div class="col-sm-6">
>               <div class="form-group">
>                 <label for="inputEmail">Email</label>
>                 <input type="email" class="form-control" id="inputEmail" placeholder="Email">
>               </div>
>             </div>
>             <div class="col-sm-6">
>               <div class="form-group">
>                 <label for="inputWebsite">Website</label>
>                 <input type="text" class="form-control" id="inputWebsite" placeholder="Website">
>               </div>
>             </div>
>           </div>
>           <button type="submit" class="btn btn-primary">Submit</button>
>         </nb-card-body>
>       </nb-card>
>     </div>
>   </div>
> 
>   <div class="row">
>     <div class="col-md-6">
>       <nb-card>
>         <nb-card-header>Horizontal form</nb-card-header>
>         <nb-card-body>
>           <form class="form-horizontal">
>             <div class="form-group row">
>               <label for="inputEmail3" class="col-sm-3 form-control-label">Email</label>
>               <div class="col-sm-9">
>                 <input type="email" class="form-control" id="inputEmail3" placeholder="Email">
>               </div>
>             </div>
>             <div class="form-group row">
>               <label for="inputPassword3" class="col-sm-3 form-control-label">Password</label>
>               <div class="col-sm-9">
>                 <input type="password" class="form-control" id="inputPassword3" placeholder="Password">
>               </div>
>             </div>
>             <div class="form-group row">
>               <div class="offset-sm-3 col-sm-9">
>                 <div class="checkbox">
>                   <nb-checkbox>Remember me</nb-checkbox>
>                 </div>
>               </div>
>             </div>
>             <div class="form-group row">
>               <div class="offset-sm-3 col-sm-9">
>                 <button type="submit" class="btn btn-warning">Sign in</button>
>               </div>
>             </div>
>           </form>
>         </nb-card-body>
>       </nb-card>
>     </div>
>   </div>
> 
> 
> 
diff -r app/pages/@test/user-add/user-add.component.ts app_bk/pages/@test/user-add/user-add.component.ts
1,18c1,18
< import { Component, OnInit } from '@angular/core';
< import { UserAddService } from './user-add.service';
< import {Hero} from './hero'
< import 'rxjs/add/operator/toPromise';
< 
< @Component({
<     selector: 'ngx-user-add',
<     templateUrl: `./user-add.component.html`, // 组件对应的html路径
<     styleUrls: ['./user-add.scss'],
<     providers: [UserAddService],
< })
< export class UserAddComponent implements OnInit {
<    constructor(private service: UserAddService) {};
<    heros: Hero;
<    ngOnInit() {
<       this.service.getD().then(res => this.heros = res);
<     }
< }
---
> import { Component, OnInit } from '@angular/core';
> import { UserAddService } from './user-add.service';
> import {Hero} from './hero'
> import 'rxjs/add/operator/toPromise';
> 
> @Component({
>     selector: 'ngx-user-add',
>     templateUrl: `./user-add.component.html`, // 组件对应的html路径
>     styleUrls: ['./user-add.scss'],
>     providers: [UserAddService],
> })
> export class UserAddComponent implements OnInit {
>    constructor(private service: UserAddService) {};
>    heros: Hero;
>    ngOnInit() {
>       this.service.getD().then(res => this.heros = res);
>     }
> }
diff -r app/pages/@test/user-add/user-add.scss app_bk/pages/@test/user-add/user-add.scss
1,21c1,21
< @import '../../../@theme/styles/themes';
< 
< @include nb-install-component() {
<   .full-width {
<     flex: 1;
<     min-width: 220px;
<   }
< 
<   nb-checkbox {
<     margin-bottom: 1rem;
<   }
< 
<   .form-inline > * {
<     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
<     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
<   }
< 
<   nb-card.inline-form-card nb-card-body {
<     padding-bottom: 0;
<   }
< }
---
> @import '../../../@theme/styles/themes';
> 
> @include nb-install-component() {
>   .full-width {
>     flex: 1;
>     min-width: 220px;
>   }
> 
>   nb-checkbox {
>     margin-bottom: 1rem;
>   }
> 
>   .form-inline > * {
>     @include nb-ltr(margin, 0 1.5rem 1.5rem 0);
>     @include nb-rtl(margin, 0 0 1.5rem 1.5rem);
>   }
> 
>   nb-card.inline-form-card nb-card-body {
>     padding-bottom: 0;
>   }
> }
diff -r app/pages/@test/user-add/user-add.service.ts app_bk/pages/@test/user-add/user-add.service.ts
1,19c1,19
< import { Injectable } from '@angular/core';
< import { Http } from '@angular/http';
< import 'rxjs/add/operator/toPromise';
< import { Observable, of } from 'rxjs';
< import { Hero } from './hero';
< 
< @Injectable()
< export class UserAddService {
<     constructor(private http: Http) {};
< 
<     private handleError(error: any): Promise<any> {
<         console.error('An error occurred' + error);
<         return Promise.reject(error.message || error);
<     }
<     getD(): Promise<Hero> {
<     const url1 = '/_accesses/get_user_login';
<     return this.http.get(url1).toPromise().then(res => res.json() as Hero).catch(this.handleError);
<     }
< }
---
> import { Injectable } from '@angular/core';
> import { Http } from '@angular/http';
> import 'rxjs/add/operator/toPromise';
> import { Observable, of } from 'rxjs';
> import { Hero } from './hero';
> 
> @Injectable()
> export class UserAddService {
>     constructor(private http: Http) {};
> 
>     private handleError(error: any): Promise<any> {
>         console.error('An error occurred' + error);
>         return Promise.reject(error.message || error);
>     }
>     getD(): Promise<Hero> {
>     const url1 = '/_accesses/get_user_login';
>     return this.http.get(url1).toPromise().then(res => res.json() as Hero).catch(this.handleError);
>     }
> }
diff -r app/pages/_user/user.component.ts app_bk/pages/_user/user.component.ts
1,26c1,26
< import {Component, OnInit} from '@angular/core';
< 
< @Component({
<   selector: 'ngx-user',
<   styleUrls: ['./user.scss'],
<   templateUrl: './user.html',
< })
< export class UserComponent implements OnInit {
<   constructor() {
<   }
< 
<   ngOnInit() {
<     const cuid = localStorage.getItem('cu_id');
<     const culabel = localStorage.getItem('cu_label');
<     const cutype = localStorage.getItem('cu_type');
<     const cusn = localStorage.getItem('cu_sn');
<     const cupic = localStorage.getItem('cu_pic');
<     const culn = localStorage.getItem('cu_ln');
<     const cutsn = localStorage.getItem('cu_tsn');
<     if (cuid && cuid.trim() !== '') {
<       // window.alert(cuid);
<     } else {
<       window.location.href = '#/auth_u/_auth_login/auth_login_u';
<     }
<   }
< }
---
> import {Component, OnInit} from '@angular/core';
> 
> @Component({
>   selector: 'ngx-user',
>   styleUrls: ['./user.scss'],
>   templateUrl: './user.html',
> })
> export class UserComponent implements OnInit {
>   constructor() {
>   }
> 
>   ngOnInit() {
>     const cuid = localStorage.getItem('cu_id');
>     const culabel = localStorage.getItem('cu_label');
>     const cutype = localStorage.getItem('cu_type');
>     const cusn = localStorage.getItem('cu_sn');
>     const cupic = localStorage.getItem('cu_pic');
>     const culn = localStorage.getItem('cu_ln');
>     const cutsn = localStorage.getItem('cu_tsn');
>     if (cuid && cuid.trim() !== '') {
>       // window.alert(cuid);
>     } else {
>       window.location.href = '#/auth_u/_auth_login/auth_login_u';
>     }
>   }
> }
diff -r app/pages/_user/user.module.ts app_bk/pages/_user/user.module.ts
1,50c1,50
< import {NgModule, OnInit} from '@angular/core';
< 
< import { NgxEchartsModule } from 'ngx-echarts';
< 
< import { ThemeModule } from '../../@theme/theme.module';
< import { UserComponent } from './user.component';
< import { StatusCardComponent } from './status-card/status-card.component';
< import { ContactsComponent } from './contacts/contacts.component';
< import { RoomsComponent } from './rooms/rooms.component';
< import { RoomSelectorComponent } from './rooms/room-selector/room-selector.component';
< import { TemperatureComponent } from './temperature/temperature.component';
< import { TemperatureDraggerComponent } from './temperature/temperature-dragger/temperature-dragger.component';
< import { TeamComponent } from './team/team.component';
< import { KittenComponent } from './kitten/kitten.component';
< import { SecurityCamerasComponent } from './security-cameras/security-cameras.component';
< import { ElectricityComponent } from './electricity/electricity.component';
< import { ElectricityChartComponent } from './electricity/electricity-chart/electricity-chart.component';
< import { WeatherComponent } from './weather/weather.component';
< import { SolarComponent } from './solar/solar.component';
< import { PlayerComponent } from './rooms/player/player.component';
< import { TrafficComponent } from './traffic/traffic.component';
< import { TrafficChartComponent } from './traffic/traffic-chart.component';
< 
< @NgModule({
<   imports: [
<     ThemeModule,
<     NgxEchartsModule,
<   ],
<   declarations: [
<     UserComponent,
<     StatusCardComponent,
<     TemperatureDraggerComponent,
<     ContactsComponent,
<     RoomSelectorComponent,
<     TemperatureComponent,
<     RoomsComponent,
<     TeamComponent,
<     KittenComponent,
<     SecurityCamerasComponent,
<     ElectricityComponent,
<     ElectricityChartComponent,
<     WeatherComponent,
<     PlayerComponent,
<     SolarComponent,
<     TrafficComponent,
<     TrafficChartComponent,
<   ],
< })
< export class UserModule {
< }
---
> import {NgModule, OnInit} from '@angular/core';
> 
> import { NgxEchartsModule } from 'ngx-echarts';
> 
> import { ThemeModule } from '../../@theme/theme.module';
> import { UserComponent } from './user.component';
> import { StatusCardComponent } from './status-card/status-card.component';
> import { ContactsComponent } from './contacts/contacts.component';
> import { RoomsComponent } from './rooms/rooms.component';
> import { RoomSelectorComponent } from './rooms/room-selector/room-selector.component';
> import { TemperatureComponent } from './temperature/temperature.component';
> import { TemperatureDraggerComponent } from './temperature/temperature-dragger/temperature-dragger.component';
> import { TeamComponent } from './team/team.component';
> import { KittenComponent } from './kitten/kitten.component';
> import { SecurityCamerasComponent } from './security-cameras/security-cameras.component';
> import { ElectricityComponent } from './electricity/electricity.component';
> import { ElectricityChartComponent } from './electricity/electricity-chart/electricity-chart.component';
> import { WeatherComponent } from './weather/weather.component';
> import { SolarComponent } from './solar/solar.component';
> import { PlayerComponent } from './rooms/player/player.component';
> import { TrafficComponent } from './traffic/traffic.component';
> import { TrafficChartComponent } from './traffic/traffic-chart.component';
> 
> @NgModule({
>   imports: [
>     ThemeModule,
>     NgxEchartsModule,
>   ],
>   declarations: [
>     UserComponent,
>     StatusCardComponent,
>     TemperatureDraggerComponent,
>     ContactsComponent,
>     RoomSelectorComponent,
>     TemperatureComponent,
>     RoomsComponent,
>     TeamComponent,
>     KittenComponent,
>     SecurityCamerasComponent,
>     ElectricityComponent,
>     ElectricityChartComponent,
>     WeatherComponent,
>     PlayerComponent,
>     SolarComponent,
>     TrafficComponent,
>     TrafficChartComponent,
>   ],
> })
> export class UserModule {
> }
diff -r app/pages/@xmodel/XEnterprise.ts app_bk/pages/@xmodel/XEnterprise.ts
1,64c1,64
< export class XEnterprise {
<   id: number;
<   sn: string;
<   label: string;
<   creator_sn: string;
<   create_dt: string;
<   custom_code: string;
<   last_update_dt: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   class_sn: string;
<   type_sn: string;
<   status_sn: string;
<   level_sn: string;
<   class_label: string;
<   type_label: string;
<   level_label: string;
<   status_label: string;
<   more_info: string;
<   seo_tag: string;
<   current_lenovo_user_sn: string;
<   basic_dic_match_status_sn: string;
<   basic_is_lenovo: string;
<   basic_cn_uid: string;
<   basic_setup_dt: string;
<   basic_latest_reg_dt: string;
<   basic_org_sn: string;
<   basic_reg_sn: string;
<   basic_reg_address: string;
<   basic_legal_rep: string;
<   basic_reg_capital: string;
<   basic_biz_keywords: string;
<   basic_biz_range: string;
<   basic_biz_dt_range: string;
<   basic_biz_address: string;
<   basic_biz_tel: string;
<   basic_nda: string;
<   basic_charge_office: string;
<   acc_bank: string;
<   acc_bank_branch: string;
<   acc_bank_sn: string;
<   acc_asset: string;
<   acc_debt: string;
<   acc_sales: string;
<   acc_profit: string;
<   acc_debt_rate: string;
<   acc_asset_last: string;
<   acc_debt_last: string;
<   acc_sales_last: string;
<   acc_profit_last: string;
<   acc_debt_rate_last: string;
<   other_credits: string;
<   other_website: string;
<   other_email: string;
<   other_size: string;
<   other_deliver_days: string;
<   other_deliver_address: string;
<   other_transport: string;
<   default_contact_user_sn: string;
<   creator_label: string;
<   contact_label: string;
<   lenovo_label: string;
< }
---
> export class XEnterprise {
>   id: number;
>   sn: string;
>   label: string;
>   creator_sn: string;
>   create_dt: string;
>   custom_code: string;
>   last_update_dt: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   class_sn: string;
>   type_sn: string;
>   status_sn: string;
>   level_sn: string;
>   class_label: string;
>   type_label: string;
>   level_label: string;
>   status_label: string;
>   more_info: string;
>   seo_tag: string;
>   current_lenovo_user_sn: string;
>   basic_dic_match_status_sn: string;
>   basic_is_lenovo: string;
>   basic_cn_uid: string;
>   basic_setup_dt: string;
>   basic_latest_reg_dt: string;
>   basic_org_sn: string;
>   basic_reg_sn: string;
>   basic_reg_address: string;
>   basic_legal_rep: string;
>   basic_reg_capital: string;
>   basic_biz_keywords: string;
>   basic_biz_range: string;
>   basic_biz_dt_range: string;
>   basic_biz_address: string;
>   basic_biz_tel: string;
>   basic_nda: string;
>   basic_charge_office: string;
>   acc_bank: string;
>   acc_bank_branch: string;
>   acc_bank_sn: string;
>   acc_asset: string;
>   acc_debt: string;
>   acc_sales: string;
>   acc_profit: string;
>   acc_debt_rate: string;
>   acc_asset_last: string;
>   acc_debt_last: string;
>   acc_sales_last: string;
>   acc_profit_last: string;
>   acc_debt_rate_last: string;
>   other_credits: string;
>   other_website: string;
>   other_email: string;
>   other_size: string;
>   other_deliver_days: string;
>   other_deliver_address: string;
>   other_transport: string;
>   default_contact_user_sn: string;
>   creator_label: string;
>   contact_label: string;
>   lenovo_label: string;
> }
diff -r app/pages/@xmodel/XFile.ts app_bk/pages/@xmodel/XFile.ts
1,8c1,8
< export class XFile {
<   id: number;
<   sn: string;
<   label: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
< }
---
> export class XFile {
>   id: number;
>   sn: string;
>   label: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
> }
diff -r app/pages/@xmodel/XFilter.ts app_bk/pages/@xmodel/XFilter.ts
1,4c1,4
< export class XFilter {
<   value: string;
<   title: string;
< }
---
> export class XFilter {
>   value: string;
>   title: string;
> }
diff -r app/pages/@xmodel/XIndustry.ts app_bk/pages/@xmodel/XIndustry.ts
1,11c1,11
< export class XIndustry {
<   id: number;
<   sn: string;
<   label: string;
<   custom_code: string;
<   seo_tag: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   is_checked: number;
< }
---
> export class XIndustry {
>   id: number;
>   sn: string;
>   label: string;
>   custom_code: string;
>   seo_tag: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   is_checked: number;
> }
diff -r app/pages/@xmodel/XKV.ts app_bk/pages/@xmodel/XKV.ts
1,12c1,12
< export class XKV {
<   id: number;
<   sn: string;
<   label: string;
<   creator_sn: string;
<   create_dt: string;
<   custom_code: string;
<   last_update_dt: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
< }
---
> export class XKV {
>   id: number;
>   sn: string;
>   label: string;
>   creator_sn: string;
>   create_dt: string;
>   custom_code: string;
>   last_update_dt: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
> }
只在 app/pages/@xmodel 存在：XProductCompare.ts
diff -r app/pages/@xmodel/XProduct.ts app_bk/pages/@xmodel/XProduct.ts
1,34c1,34
< export class XProduct {
<   id: number;
<   sn: string;
<   label: string;
<   creator_sn: string;
<   create_dt: string;
<   custom_code: string;
<   last_update_dt: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   class_sn: string;
<   type_sn: string;
<   status_sn: string;
<   level_sn: string;
<   class_label: string;
<   type_label: string;
<   level_label: string;
<   status_label: string;
<   more_info: string;
<   seo_tag: string;
<   sku: string;
<   moq: string;
<   price_sale: string;
<   price_out: string;
<   img_file_sn: string;
<   enterprise_sn: string;
<   project_sn: string;
<   detail_info: string;
<   moq_unit: string;
<   creator_label: string;
<   enterprise_label: string;
<   project_label: string;
< }
---
> export class XProduct {
>   id: number;
>   sn: string;
>   label: string;
>   creator_sn: string;
>   create_dt: string;
>   custom_code: string;
>   last_update_dt: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   class_sn: string;
>   type_sn: string;
>   status_sn: string;
>   level_sn: string;
>   class_label: string;
>   type_label: string;
>   level_label: string;
>   status_label: string;
>   more_info: string;
>   seo_tag: string;
>   sku: string;
>   moq: string;
>   price_sale: string;
>   price_out: string;
>   img_file_sn: string;
>   enterprise_sn: string;
>   project_sn: string;
>   detail_info: string;
>   moq_unit: string;
>   creator_label: string;
>   enterprise_label: string;
>   project_label: string;
> }
diff -r app/pages/@xmodel/XProject.ts app_bk/pages/@xmodel/XProject.ts
1,35c1,35
< export class XProject {
<   id: number;
<   sn: string;
<   label: string;
<   creator_sn: string;
<   create_dt: string;
<   custom_code: string;
<   last_update_dt: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   class_sn: string;
<   type_sn: string;
<   status_sn: string;
<   level_sn: string;
<   more_info: string;
<   seo_tag: string;
<   enterprise_sn: string;
<   lenovo_user_sn: string;
<   contact_dt: string;
<   total_budget: string;
<   main_content: string;
<   plan_start_dt: string;
<   plan_end_dt: string;
<   real_start_dt: string;
<   real_end_dt: string;
<   total_real_investment: string;
<   class_label: string;
<   level_label: string;
<   status_label: string;
<   type_label: string;
<   creator_label: string;
<   lenovo_label: string;
<   enterprise_label: string;
< }
---
> export class XProject {
>   id: number;
>   sn: string;
>   label: string;
>   creator_sn: string;
>   create_dt: string;
>   custom_code: string;
>   last_update_dt: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   class_sn: string;
>   type_sn: string;
>   status_sn: string;
>   level_sn: string;
>   more_info: string;
>   seo_tag: string;
>   enterprise_sn: string;
>   lenovo_user_sn: string;
>   contact_dt: string;
>   total_budget: string;
>   main_content: string;
>   plan_start_dt: string;
>   plan_end_dt: string;
>   real_start_dt: string;
>   real_end_dt: string;
>   total_real_investment: string;
>   class_label: string;
>   level_label: string;
>   status_label: string;
>   type_label: string;
>   creator_label: string;
>   lenovo_label: string;
>   enterprise_label: string;
> }
diff -r app/pages/@xmodel/XScene.ts app_bk/pages/@xmodel/XScene.ts
1,11c1,11
< export class XScene {
<   id: number;
<   sn: string;
<   label: string;
<   custom_code: string;
<   seo_tag: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   is_checked: number;
< }
---
> export class XScene {
>   id: number;
>   sn: string;
>   label: string;
>   custom_code: string;
>   seo_tag: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   is_checked: number;
> }
只在 app/pages/@xmodel 存在：XSTAAreaStackSeriesData.ts
只在 app/pages/@xmodel 存在：XSTAPieSeriesData.ts
diff -r app/pages/@xmodel/XUser.ts app_bk/pages/@xmodel/XUser.ts
1,35c1,35
< export class XUser {
<   id: number;
<   sn: string;
<   label: string;
<   creator_sn: string;
<   create_dt: string;
<   custom_code: string;
<   last_update_dt: string;
<   display_code: number;
<   is_deleted: number;
<   is_na: number;
<   class_sn: string;
<   type_sn: string;
<   status_sn: string;
<   level_sn: string;
<   more_info: string;
<   seo_tag: string;
<   login_name: string;
<   pwd: string;
<   position: string;
<   mobile: string;
<   tel: string;
<   email: string;
<   cn_id: string;
<   class_label: string;
<   type_label: string;
<   status_label: string;
<   level_label: string;
<   lenovo_count: number;
<   is_notice_sys: number;
<   is_notice_enterprise: number;
<   is_notice_product: number;
<   is_notice_user: number;
<   is_notice_project: number;
< }
---
> export class XUser {
>   id: number;
>   sn: string;
>   label: string;
>   creator_sn: string;
>   create_dt: string;
>   custom_code: string;
>   last_update_dt: string;
>   display_code: number;
>   is_deleted: number;
>   is_na: number;
>   class_sn: string;
>   type_sn: string;
>   status_sn: string;
>   level_sn: string;
>   more_info: string;
>   seo_tag: string;
>   login_name: string;
>   pwd: string;
>   position: string;
>   mobile: string;
>   tel: string;
>   email: string;
>   cn_id: string;
>   class_label: string;
>   type_label: string;
>   status_label: string;
>   level_label: string;
>   lenovo_count: number;
>   is_notice_sys: number;
>   is_notice_enterprise: number;
>   is_notice_product: number;
>   is_notice_user: number;
>   is_notice_project: number;
> }
